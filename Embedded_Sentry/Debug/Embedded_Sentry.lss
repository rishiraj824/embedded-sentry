
Embedded_Sentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032b8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000032b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  20000068  00003320  00020068  2**2
                  ALLOC
  3 .stack        00002004  200000dc  00003394  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025bf5  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037c0  00000000  00000000  00045cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000bea9  00000000  00000000  0004949e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ab0  00000000  00000000  00055347  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fe8  00000000  00000000  00055df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001bf43  00000000  00000000  00056ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000116d1  00000000  00000000  00072d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a568  00000000  00000000  000843f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002334  00000000  00000000  0010e95c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 20 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     . . -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 31 09 00 00 29 01 00 00 29 01 00 00     )...1...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	000032b8 	.word	0x000032b8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	000032b8 	.word	0x000032b8
     10c:	000032b8 	.word	0x000032b8
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	stdio_redirect_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000003a9 	.word	0x000003a9
     124:	00001ba9 	.word	0x00001ba9

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	000032b8 	.word	0x000032b8
     1dc:	20000000 	.word	0x20000000
     1e0:	20000068 	.word	0x20000068
     1e4:	20000004 	.word	0x20000004
     1e8:	20000068 	.word	0x20000068
     1ec:	200000dc 	.word	0x200000dc
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00001d35 	.word	0x00001d35
     20c:	000019c9 	.word	0x000019c9

00000210 <BUTTON_init>:
struct i2c_m_sync_desc I2C_0;

struct usart_sync_descriptor TARGET_IO;

void BUTTON_init(void)
{
     210:	b510      	push	{r4, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     212:	4a0f      	ldr	r2, [pc, #60]	; (250 <BUTTON_init+0x40>)
     214:	4b0f      	ldr	r3, [pc, #60]	; (254 <BUTTON_init+0x44>)
     216:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     218:	2280      	movs	r2, #128	; 0x80
     21a:	0212      	lsls	r2, r2, #8
     21c:	23c0      	movs	r3, #192	; 0xc0
     21e:	05db      	lsls	r3, r3, #23
     220:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     222:	4b0d      	ldr	r3, [pc, #52]	; (258 <BUTTON_init+0x48>)
     224:	4a0d      	ldr	r2, [pc, #52]	; (25c <BUTTON_init+0x4c>)
     226:	629a      	str	r2, [r3, #40]	; 0x28
     228:	4a0d      	ldr	r2, [pc, #52]	; (260 <BUTTON_init+0x50>)
     22a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     22c:	214f      	movs	r1, #79	; 0x4f
     22e:	5c5a      	ldrb	r2, [r3, r1]
     230:	2004      	movs	r0, #4
     232:	4382      	bics	r2, r0
     234:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     238:	3803      	subs	r0, #3
     23a:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23c:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     240:	3918      	subs	r1, #24
     242:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     244:	300e      	adds	r0, #14
     246:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     248:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA15, PINMUX_PA15A_EIC_EXTINT15);

	ext_irq_init();
     24a:	4b06      	ldr	r3, [pc, #24]	; (264 <BUTTON_init+0x54>)
     24c:	4798      	blx	r3
}
     24e:	bd10      	pop	{r4, pc}
     250:	00004005 	.word	0x00004005
     254:	40000c00 	.word	0x40000c00
     258:	41004400 	.word	0x41004400
     25c:	40028000 	.word	0x40028000
     260:	c0020000 	.word	0xc0020000
     264:	00000489 	.word	0x00000489

00000268 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     268:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     26a:	4b12      	ldr	r3, [pc, #72]	; (2b4 <I2C_0_PORT_init+0x4c>)
     26c:	2048      	movs	r0, #72	; 0x48
     26e:	5c19      	ldrb	r1, [r3, r0]
     270:	2204      	movs	r2, #4
     272:	4391      	bics	r1, r2
     274:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     276:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     278:	2501      	movs	r5, #1
     27a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     27c:	2401      	movs	r4, #1
     27e:	4321      	orrs	r1, r4
     280:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     282:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     284:	3814      	subs	r0, #20
     286:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     288:	260f      	movs	r6, #15
     28a:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     28c:	3e0d      	subs	r6, #13
     28e:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     290:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     292:	2149      	movs	r1, #73	; 0x49
     294:	5c5e      	ldrb	r6, [r3, r1]
     296:	4396      	bics	r6, r2
     298:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     29c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29e:	4322      	orrs	r2, r4
     2a0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2a6:	393a      	subs	r1, #58	; 0x3a
     2a8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2aa:	3111      	adds	r1, #17
     2ac:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ae:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
}
     2b0:	bd70      	pop	{r4, r5, r6, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	41004400 	.word	0x41004400

000002b8 <I2C_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2b8:	4a05      	ldr	r2, [pc, #20]	; (2d0 <I2C_0_CLOCK_init+0x18>)
     2ba:	6a13      	ldr	r3, [r2, #32]
     2bc:	2104      	movs	r1, #4
     2be:	430b      	orrs	r3, r1
     2c0:	6213      	str	r3, [r2, #32]
     2c2:	4b04      	ldr	r3, [pc, #16]	; (2d4 <I2C_0_CLOCK_init+0x1c>)
     2c4:	4a04      	ldr	r2, [pc, #16]	; (2d8 <I2C_0_CLOCK_init+0x20>)
     2c6:	805a      	strh	r2, [r3, #2]
     2c8:	4a04      	ldr	r2, [pc, #16]	; (2dc <I2C_0_CLOCK_init+0x24>)
     2ca:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	_gclk_enable_channel(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
}
     2cc:	4770      	bx	lr
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	40000400 	.word	0x40000400
     2d4:	40000c00 	.word	0x40000c00
     2d8:	00004014 	.word	0x00004014
     2dc:	00004313 	.word	0x00004313

000002e0 <I2C_0_init>:

void I2C_0_init(void)
{
     2e0:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <I2C_0_init+0x14>)
     2e4:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM0);
     2e6:	4904      	ldr	r1, [pc, #16]	; (2f8 <I2C_0_init+0x18>)
     2e8:	4804      	ldr	r0, [pc, #16]	; (2fc <I2C_0_init+0x1c>)
     2ea:	4b05      	ldr	r3, [pc, #20]	; (300 <I2C_0_init+0x20>)
     2ec:	4798      	blx	r3
	I2C_0_PORT_init();
     2ee:	4b05      	ldr	r3, [pc, #20]	; (304 <I2C_0_init+0x24>)
     2f0:	4798      	blx	r3
}
     2f2:	bd10      	pop	{r4, pc}
     2f4:	000002b9 	.word	0x000002b9
     2f8:	42000800 	.word	0x42000800
     2fc:	200000b8 	.word	0x200000b8
     300:	00000555 	.word	0x00000555
     304:	00000269 	.word	0x00000269

00000308 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     308:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     30a:	4b0e      	ldr	r3, [pc, #56]	; (344 <TARGET_IO_PORT_init+0x3c>)
     30c:	2256      	movs	r2, #86	; 0x56
     30e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     310:	2501      	movs	r5, #1
     312:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     314:	2401      	movs	r4, #1
     316:	4321      	orrs	r1, r4
     318:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     31a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     31c:	203b      	movs	r0, #59	; 0x3b
     31e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     320:	3a47      	subs	r2, #71	; 0x47
     322:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     324:	3a0c      	subs	r2, #12
     326:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     328:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     32a:	2157      	movs	r1, #87	; 0x57
     32c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     32e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     330:	4322      	orrs	r2, r4
     332:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     334:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     336:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     338:	3948      	subs	r1, #72	; 0x48
     33a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     33c:	3121      	adds	r1, #33	; 0x21
     33e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     340:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD1);
}
     342:	bd30      	pop	{r4, r5, pc}
     344:	41004400 	.word	0x41004400

00000348 <TARGET_IO_CLOCK_init>:
     348:	4a04      	ldr	r2, [pc, #16]	; (35c <TARGET_IO_CLOCK_init+0x14>)
     34a:	6a13      	ldr	r3, [r2, #32]
     34c:	2180      	movs	r1, #128	; 0x80
     34e:	430b      	orrs	r3, r1
     350:	6213      	str	r3, [r2, #32]
     352:	4a03      	ldr	r2, [pc, #12]	; (360 <TARGET_IO_CLOCK_init+0x18>)
     354:	4b03      	ldr	r3, [pc, #12]	; (364 <TARGET_IO_CLOCK_init+0x1c>)
     356:	805a      	strh	r2, [r3, #2]

void TARGET_IO_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     358:	4770      	bx	lr
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	40000400 	.word	0x40000400
     360:	00004019 	.word	0x00004019
     364:	40000c00 	.word	0x40000c00

00000368 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     368:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     36a:	4b05      	ldr	r3, [pc, #20]	; (380 <TARGET_IO_init+0x18>)
     36c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM5, (void *)NULL);
     36e:	2200      	movs	r2, #0
     370:	4904      	ldr	r1, [pc, #16]	; (384 <TARGET_IO_init+0x1c>)
     372:	4805      	ldr	r0, [pc, #20]	; (388 <TARGET_IO_init+0x20>)
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <TARGET_IO_init+0x24>)
     376:	4798      	blx	r3
	TARGET_IO_PORT_init();
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TARGET_IO_init+0x28>)
     37a:	4798      	blx	r3
}
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00000349 	.word	0x00000349
     384:	42001c00 	.word	0x42001c00
     388:	200000ac 	.word	0x200000ac
     38c:	0000077d 	.word	0x0000077d
     390:	00000309 	.word	0x00000309

00000394 <delay_driver_init>:

void delay_driver_init(void)
{
     394:	b510      	push	{r4, lr}
	delay_init(SysTick);
     396:	4802      	ldr	r0, [pc, #8]	; (3a0 <delay_driver_init+0xc>)
     398:	4b02      	ldr	r3, [pc, #8]	; (3a4 <delay_driver_init+0x10>)
     39a:	4798      	blx	r3
}
     39c:	bd10      	pop	{r4, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	e000e010 	.word	0xe000e010
     3a4:	0000041d 	.word	0x0000041d

000003a8 <system_init>:

void system_init(void)
{
     3a8:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3aa:	4b0e      	ldr	r3, [pc, #56]	; (3e4 <system_init+0x3c>)
     3ac:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3ae:	23c0      	movs	r3, #192	; 0xc0
     3b0:	05db      	lsls	r3, r3, #23
     3b2:	2280      	movs	r2, #128	; 0x80
     3b4:	05d2      	lsls	r2, r2, #23
     3b6:	2198      	movs	r1, #152	; 0x98
     3b8:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ba:	3910      	subs	r1, #16
     3bc:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3be:	4b0a      	ldr	r3, [pc, #40]	; (3e8 <system_init+0x40>)
     3c0:	3120      	adds	r1, #32
     3c2:	505a      	str	r2, [r3, r1]
     3c4:	4a09      	ldr	r2, [pc, #36]	; (3ec <system_init+0x44>)
     3c6:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	3136      	adds	r1, #54	; 0x36
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	2001      	movs	r0, #1
     3ce:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d0:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(BLINK_LED, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(BLINK_LED, GPIO_PIN_FUNCTION_OFF);

	BUTTON_init();
     3d2:	4b07      	ldr	r3, [pc, #28]	; (3f0 <system_init+0x48>)
     3d4:	4798      	blx	r3

	I2C_0_init();
     3d6:	4b07      	ldr	r3, [pc, #28]	; (3f4 <system_init+0x4c>)
     3d8:	4798      	blx	r3

	TARGET_IO_init();
     3da:	4b07      	ldr	r3, [pc, #28]	; (3f8 <system_init+0x50>)
     3dc:	4798      	blx	r3

	delay_driver_init();
     3de:	4b07      	ldr	r3, [pc, #28]	; (3fc <system_init+0x54>)
     3e0:	4798      	blx	r3
}
     3e2:	bd10      	pop	{r4, pc}
     3e4:	00000841 	.word	0x00000841
     3e8:	41004400 	.word	0x41004400
     3ec:	c0004000 	.word	0xc0004000
     3f0:	00000211 	.word	0x00000211
     3f4:	000002e1 	.word	0x000002e1
     3f8:	00000369 	.word	0x00000369
     3fc:	00000395 	.word	0x00000395

00000400 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     400:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     404:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     406:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     408:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     40c:	4770      	bx	lr

0000040e <atomic_leave_critical>:
     40e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     412:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     414:	f383 8810 	msr	PRIMASK, r3
}
     418:	4770      	bx	lr
	...

0000041c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     41c:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     41e:	4b02      	ldr	r3, [pc, #8]	; (428 <delay_init+0xc>)
     420:	6018      	str	r0, [r3, #0]
     422:	4b02      	ldr	r3, [pc, #8]	; (42c <delay_init+0x10>)
     424:	4798      	blx	r3
}
     426:	bd10      	pop	{r4, pc}
     428:	20000084 	.word	0x20000084
     42c:	000012b5 	.word	0x000012b5

00000430 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     430:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     432:	4b04      	ldr	r3, [pc, #16]	; (444 <delay_ms+0x14>)
     434:	681c      	ldr	r4, [r3, #0]
     436:	4b04      	ldr	r3, [pc, #16]	; (448 <delay_ms+0x18>)
     438:	4798      	blx	r3
     43a:	0001      	movs	r1, r0
     43c:	0020      	movs	r0, r4
     43e:	4b03      	ldr	r3, [pc, #12]	; (44c <delay_ms+0x1c>)
     440:	4798      	blx	r3
}
     442:	bd10      	pop	{r4, pc}
     444:	20000084 	.word	0x20000084
     448:	00000839 	.word	0x00000839
     44c:	000012c9 	.word	0x000012c9

00000450 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     450:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     452:	4b0c      	ldr	r3, [pc, #48]	; (484 <process_ext_irq+0x34>)
     454:	685c      	ldr	r4, [r3, #4]
     456:	42a0      	cmp	r0, r4
     458:	d00e      	beq.n	478 <process_ext_irq+0x28>
     45a:	2201      	movs	r2, #1
     45c:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     45e:	2601      	movs	r6, #1
		} else {
			upper = middle - 1;
     460:	25ff      	movs	r5, #255	; 0xff
     462:	e003      	b.n	46c <process_ext_irq+0x1c>
     464:	002a      	movs	r2, r5
		middle = (upper + lower) >> 1;
     466:	1853      	adds	r3, r2, r1
		if (middle >= EXT_IRQ_AMOUNT) {
     468:	085b      	lsrs	r3, r3, #1
     46a:	d10a      	bne.n	482 <process_ext_irq+0x32>
		if (ext_irqs[middle].pin < pin) {
     46c:	42a0      	cmp	r0, r4
     46e:	d9f9      	bls.n	464 <process_ext_irq+0x14>
	while (upper >= lower) {
     470:	2a00      	cmp	r2, #0
     472:	d006      	beq.n	482 <process_ext_irq+0x32>
			lower = middle + 1;
     474:	0031      	movs	r1, r6
     476:	e7f6      	b.n	466 <process_ext_irq+0x16>
			if (ext_irqs[middle].cb) {
     478:	4b02      	ldr	r3, [pc, #8]	; (484 <process_ext_irq+0x34>)
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	2b00      	cmp	r3, #0
     47e:	d000      	beq.n	482 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     480:	4798      	blx	r3
		}
	}
}
     482:	bd70      	pop	{r4, r5, r6, pc}
     484:	20000088 	.word	0x20000088

00000488 <ext_irq_init>:
{
     488:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     48a:	4b05      	ldr	r3, [pc, #20]	; (4a0 <ext_irq_init+0x18>)
     48c:	2201      	movs	r2, #1
     48e:	4252      	negs	r2, r2
     490:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     492:	2200      	movs	r2, #0
     494:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     496:	4803      	ldr	r0, [pc, #12]	; (4a4 <ext_irq_init+0x1c>)
     498:	4b03      	ldr	r3, [pc, #12]	; (4a8 <ext_irq_init+0x20>)
     49a:	4798      	blx	r3
}
     49c:	bd10      	pop	{r4, pc}
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	20000088 	.word	0x20000088
     4a4:	00000451 	.word	0x00000451
     4a8:	00000871 	.word	0x00000871

000004ac <ext_irq_register>:
{
     4ac:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     4ae:	4b0f      	ldr	r3, [pc, #60]	; (4ec <ext_irq_register+0x40>)
     4b0:	685b      	ldr	r3, [r3, #4]
     4b2:	4298      	cmp	r0, r3
     4b4:	d008      	beq.n	4c8 <ext_irq_register+0x1c>
	if (NULL == cb) {
     4b6:	2900      	cmp	r1, #0
     4b8:	d014      	beq.n	4e4 <ext_irq_register+0x38>
			if (NULL == ext_irqs[i].cb) {
     4ba:	4b0c      	ldr	r3, [pc, #48]	; (4ec <ext_irq_register+0x40>)
     4bc:	681b      	ldr	r3, [r3, #0]
     4be:	2b00      	cmp	r3, #0
     4c0:	d009      	beq.n	4d6 <ext_irq_register+0x2a>
		return ERR_INVALID_ARG;
     4c2:	200d      	movs	r0, #13
     4c4:	4240      	negs	r0, r0
     4c6:	e00c      	b.n	4e2 <ext_irq_register+0x36>
			ext_irqs[i].cb = cb;
     4c8:	4b08      	ldr	r3, [pc, #32]	; (4ec <ext_irq_register+0x40>)
     4ca:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     4cc:	2900      	cmp	r1, #0
     4ce:	d105      	bne.n	4dc <ext_irq_register+0x30>
		return _ext_irq_enable(pin, false);
     4d0:	4b07      	ldr	r3, [pc, #28]	; (4f0 <ext_irq_register+0x44>)
     4d2:	4798      	blx	r3
     4d4:	e005      	b.n	4e2 <ext_irq_register+0x36>
				ext_irqs[i].cb  = cb;
     4d6:	4b05      	ldr	r3, [pc, #20]	; (4ec <ext_irq_register+0x40>)
     4d8:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     4da:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     4dc:	2101      	movs	r1, #1
     4de:	4b04      	ldr	r3, [pc, #16]	; (4f0 <ext_irq_register+0x44>)
     4e0:	4798      	blx	r3
}
     4e2:	bd10      	pop	{r4, pc}
			return ERR_INVALID_ARG;
     4e4:	200d      	movs	r0, #13
     4e6:	4240      	negs	r0, r0
     4e8:	e7fb      	b.n	4e2 <ext_irq_register+0x36>
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	20000088 	.word	0x20000088
     4f0:	00000905 	.word	0x00000905

000004f4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     4f4:	b510      	push	{r4, lr}
     4f6:	b084      	sub	sp, #16
     4f8:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     4fa:	ab01      	add	r3, sp, #4
     4fc:	3814      	subs	r0, #20
     4fe:	8b82      	ldrh	r2, [r0, #28]
     500:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     502:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     504:	4a05      	ldr	r2, [pc, #20]	; (51c <i2c_m_sync_write+0x28>)
     506:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     508:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     50a:	0019      	movs	r1, r3
     50c:	4b04      	ldr	r3, [pc, #16]	; (520 <i2c_m_sync_write+0x2c>)
     50e:	4798      	blx	r3

	if (ret) {
     510:	2800      	cmp	r0, #0
     512:	d100      	bne.n	516 <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     514:	0020      	movs	r0, r4
}
     516:	b004      	add	sp, #16
     518:	bd10      	pop	{r4, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	ffff8000 	.word	0xffff8000
     520:	00000d25 	.word	0x00000d25

00000524 <i2c_m_sync_read>:
{
     524:	b510      	push	{r4, lr}
     526:	b084      	sub	sp, #16
     528:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     52a:	ab01      	add	r3, sp, #4
     52c:	3814      	subs	r0, #20
     52e:	8b82      	ldrh	r2, [r0, #28]
     530:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     532:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     534:	4a05      	ldr	r2, [pc, #20]	; (54c <i2c_m_sync_read+0x28>)
     536:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     538:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     53a:	0019      	movs	r1, r3
     53c:	4b04      	ldr	r3, [pc, #16]	; (550 <i2c_m_sync_read+0x2c>)
     53e:	4798      	blx	r3
	if (ret) {
     540:	2800      	cmp	r0, #0
     542:	d100      	bne.n	546 <i2c_m_sync_read+0x22>
	return n;
     544:	0020      	movs	r0, r4
}
     546:	b004      	add	sp, #16
     548:	bd10      	pop	{r4, pc}
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	ffff8001 	.word	0xffff8001
     550:	00000d25 	.word	0x00000d25

00000554 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     554:	b570      	push	{r4, r5, r6, lr}
     556:	0004      	movs	r4, r0
     558:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     55a:	1e43      	subs	r3, r0, #1
     55c:	4198      	sbcs	r0, r3
     55e:	b2c0      	uxtb	r0, r0
     560:	225e      	movs	r2, #94	; 0x5e
     562:	4907      	ldr	r1, [pc, #28]	; (580 <i2c_m_sync_init+0x2c>)
     564:	4b07      	ldr	r3, [pc, #28]	; (584 <i2c_m_sync_init+0x30>)
     566:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     568:	0029      	movs	r1, r5
     56a:	0020      	movs	r0, r4
     56c:	4b06      	ldr	r3, [pc, #24]	; (588 <i2c_m_sync_init+0x34>)
     56e:	4798      	blx	r3
	if (init_status) {
     570:	2800      	cmp	r0, #0
     572:	d103      	bne.n	57c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     574:	4b05      	ldr	r3, [pc, #20]	; (58c <i2c_m_sync_init+0x38>)
     576:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     578:	4b05      	ldr	r3, [pc, #20]	; (590 <i2c_m_sync_init+0x3c>)
     57a:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     57c:	bd70      	pop	{r4, r5, r6, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	00002f58 	.word	0x00002f58
     584:	000007f5 	.word	0x000007f5
     588:	00000c71 	.word	0x00000c71
     58c:	00000525 	.word	0x00000525
     590:	000004f5 	.word	0x000004f5

00000594 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     594:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     596:	4b01      	ldr	r3, [pc, #4]	; (59c <i2c_m_sync_enable+0x8>)
     598:	4798      	blx	r3
}
     59a:	bd10      	pop	{r4, pc}
     59c:	00000ca1 	.word	0x00000ca1

000005a0 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     5a0:	0589      	lsls	r1, r1, #22
     5a2:	0d89      	lsrs	r1, r1, #22
     5a4:	2380      	movs	r3, #128	; 0x80
     5a6:	00db      	lsls	r3, r3, #3
     5a8:	401a      	ands	r2, r3
     5aa:	430a      	orrs	r2, r1
     5ac:	8382      	strh	r2, [r0, #28]
}
     5ae:	0010      	movs	r0, r2
     5b0:	4770      	bx	lr
	...

000005b4 <i2c_m_sync_cmd_write>:

/**
 * \brief Sync version of i2c write command
 */
int32_t i2c_m_sync_cmd_write(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     5b4:	b500      	push	{lr}
     5b6:	b085      	sub	sp, #20
	uint8_t buf[2];
	struct _i2c_m_msg msg;
	int32_t ret;

	buf[0] = reg;
     5b8:	ab03      	add	r3, sp, #12
     5ba:	7019      	strb	r1, [r3, #0]
	buf[1] = *buffer;
     5bc:	7812      	ldrb	r2, [r2, #0]
     5be:	705a      	strb	r2, [r3, #1]

	msg.addr = i2c->slave_addr;
     5c0:	8b82      	ldrh	r2, [r0, #28]
     5c2:	4669      	mov	r1, sp
     5c4:	800a      	strh	r2, [r1, #0]
	msg.len = sizeof(buf);
     5c6:	2202      	movs	r2, #2
     5c8:	9201      	str	r2, [sp, #4]
	msg.flags = I2C_M_STOP;
     5ca:	4a03      	ldr	r2, [pc, #12]	; (5d8 <i2c_m_sync_cmd_write+0x24>)
     5cc:	804a      	strh	r2, [r1, #2]
	msg.buffer = buf;
     5ce:	9302      	str	r3, [sp, #8]
/**
 * \brief Sync version of i2c transfer command
 */
int32_t i2c_m_sync_transfer(struct i2c_m_sync_desc *const i2c, struct _i2c_m_msg *msg)
{
	return _i2c_m_sync_transfer(&i2c->device, msg);
     5d0:	4b02      	ldr	r3, [pc, #8]	; (5dc <i2c_m_sync_cmd_write+0x28>)
     5d2:	4798      	blx	r3
}
     5d4:	b005      	add	sp, #20
     5d6:	bd00      	pop	{pc}
     5d8:	ffff8000 	.word	0xffff8000
     5dc:	00000d25 	.word	0x00000d25

000005e0 <i2c_m_sync_cmd_read>:
{
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	b086      	sub	sp, #24
     5e4:	0004      	movs	r4, r0
     5e6:	0016      	movs	r6, r2
     5e8:	001d      	movs	r5, r3
     5ea:	466b      	mov	r3, sp
     5ec:	71d9      	strb	r1, [r3, #7]
     5ee:	3307      	adds	r3, #7
	msg.addr   = i2c->slave_addr;
     5f0:	a903      	add	r1, sp, #12
     5f2:	8b82      	ldrh	r2, [r0, #28]
     5f4:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     5f6:	2201      	movs	r2, #1
     5f8:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     5fa:	2200      	movs	r2, #0
     5fc:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     5fe:	608b      	str	r3, [r1, #8]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     600:	4b07      	ldr	r3, [pc, #28]	; (620 <i2c_m_sync_cmd_read+0x40>)
     602:	4798      	blx	r3
	if (ret != 0) {
     604:	2800      	cmp	r0, #0
     606:	d001      	beq.n	60c <i2c_m_sync_cmd_read+0x2c>
}
     608:	b006      	add	sp, #24
     60a:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     60c:	a903      	add	r1, sp, #12
     60e:	4b05      	ldr	r3, [pc, #20]	; (624 <i2c_m_sync_cmd_read+0x44>)
     610:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     612:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     614:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     616:	0020      	movs	r0, r4
     618:	4b01      	ldr	r3, [pc, #4]	; (620 <i2c_m_sync_cmd_read+0x40>)
     61a:	4798      	blx	r3
     61c:	e7f4      	b.n	608 <i2c_m_sync_cmd_read+0x28>
     61e:	46c0      	nop			; (mov r8, r8)
     620:	00000d25 	.word	0x00000d25
     624:	ffff8001 	.word	0xffff8001

00000628 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     628:	3014      	adds	r0, #20
     62a:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     62c:	2000      	movs	r0, #0
     62e:	4770      	bx	lr

00000630 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     630:	b570      	push	{r4, r5, r6, lr}
     632:	0006      	movs	r6, r0
     634:	000c      	movs	r4, r1
     636:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     638:	2800      	cmp	r0, #0
     63a:	d00d      	beq.n	658 <io_write+0x28>
     63c:	0008      	movs	r0, r1
     63e:	1e43      	subs	r3, r0, #1
     640:	4198      	sbcs	r0, r3
     642:	b2c0      	uxtb	r0, r0
     644:	2234      	movs	r2, #52	; 0x34
     646:	4905      	ldr	r1, [pc, #20]	; (65c <io_write+0x2c>)
     648:	4b05      	ldr	r3, [pc, #20]	; (660 <io_write+0x30>)
     64a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     64c:	6833      	ldr	r3, [r6, #0]
     64e:	002a      	movs	r2, r5
     650:	0021      	movs	r1, r4
     652:	0030      	movs	r0, r6
     654:	4798      	blx	r3
}
     656:	bd70      	pop	{r4, r5, r6, pc}
     658:	2000      	movs	r0, #0
     65a:	e7f3      	b.n	644 <io_write+0x14>
     65c:	00002f74 	.word	0x00002f74
     660:	000007f5 	.word	0x000007f5

00000664 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     664:	b570      	push	{r4, r5, r6, lr}
     666:	0006      	movs	r6, r0
     668:	000c      	movs	r4, r1
     66a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     66c:	2800      	cmp	r0, #0
     66e:	d00d      	beq.n	68c <io_read+0x28>
     670:	0008      	movs	r0, r1
     672:	1e43      	subs	r3, r0, #1
     674:	4198      	sbcs	r0, r3
     676:	b2c0      	uxtb	r0, r0
     678:	223d      	movs	r2, #61	; 0x3d
     67a:	4905      	ldr	r1, [pc, #20]	; (690 <io_read+0x2c>)
     67c:	4b05      	ldr	r3, [pc, #20]	; (694 <io_read+0x30>)
     67e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     680:	6873      	ldr	r3, [r6, #4]
     682:	002a      	movs	r2, r5
     684:	0021      	movs	r1, r4
     686:	0030      	movs	r0, r6
     688:	4798      	blx	r3
}
     68a:	bd70      	pop	{r4, r5, r6, pc}
     68c:	2000      	movs	r0, #0
     68e:	e7f3      	b.n	678 <io_read+0x14>
     690:	00002f74 	.word	0x00002f74
     694:	000007f5 	.word	0x000007f5

00000698 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     69a:	46ce      	mov	lr, r9
     69c:	4647      	mov	r7, r8
     69e:	b580      	push	{r7, lr}
     6a0:	0004      	movs	r4, r0
     6a2:	000f      	movs	r7, r1
     6a4:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     6a6:	2800      	cmp	r0, #0
     6a8:	d026      	beq.n	6f8 <usart_sync_write+0x60>
     6aa:	2900      	cmp	r1, #0
     6ac:	d026      	beq.n	6fc <usart_sync_write+0x64>
     6ae:	0010      	movs	r0, r2
     6b0:	1e43      	subs	r3, r0, #1
     6b2:	4198      	sbcs	r0, r3
     6b4:	22f1      	movs	r2, #241	; 0xf1
     6b6:	4912      	ldr	r1, [pc, #72]	; (700 <usart_sync_write+0x68>)
     6b8:	4b12      	ldr	r3, [pc, #72]	; (704 <usart_sync_write+0x6c>)
     6ba:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     6bc:	3408      	adds	r4, #8
     6be:	4d12      	ldr	r5, [pc, #72]	; (708 <usart_sync_write+0x70>)
     6c0:	0020      	movs	r0, r4
     6c2:	47a8      	blx	r5
     6c4:	2800      	cmp	r0, #0
     6c6:	d0fb      	beq.n	6c0 <usart_sync_write+0x28>
     6c8:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6ca:	4b10      	ldr	r3, [pc, #64]	; (70c <usart_sync_write+0x74>)
     6cc:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     6ce:	4d0e      	ldr	r5, [pc, #56]	; (708 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     6d0:	5db9      	ldrb	r1, [r7, r6]
     6d2:	0020      	movs	r0, r4
     6d4:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     6d6:	0020      	movs	r0, r4
     6d8:	47a8      	blx	r5
     6da:	2800      	cmp	r0, #0
     6dc:	d0fb      	beq.n	6d6 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     6de:	3601      	adds	r6, #1
     6e0:	4546      	cmp	r6, r8
     6e2:	d3f5      	bcc.n	6d0 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     6e4:	4d0a      	ldr	r5, [pc, #40]	; (710 <usart_sync_write+0x78>)
     6e6:	0020      	movs	r0, r4
     6e8:	47a8      	blx	r5
     6ea:	2800      	cmp	r0, #0
     6ec:	d0fb      	beq.n	6e6 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     6ee:	0030      	movs	r0, r6
     6f0:	bc0c      	pop	{r2, r3}
     6f2:	4690      	mov	r8, r2
     6f4:	4699      	mov	r9, r3
     6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     6f8:	2000      	movs	r0, #0
     6fa:	e7db      	b.n	6b4 <usart_sync_write+0x1c>
     6fc:	2000      	movs	r0, #0
     6fe:	e7d9      	b.n	6b4 <usart_sync_write+0x1c>
     700:	00002f88 	.word	0x00002f88
     704:	000007f5 	.word	0x000007f5
     708:	00000c51 	.word	0x00000c51
     70c:	00000c41 	.word	0x00000c41
     710:	00000c5b 	.word	0x00000c5b

00000714 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     716:	46ce      	mov	lr, r9
     718:	4647      	mov	r7, r8
     71a:	b580      	push	{r7, lr}
     71c:	0004      	movs	r4, r0
     71e:	000f      	movs	r7, r1
     720:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     722:	2800      	cmp	r0, #0
     724:	d01d      	beq.n	762 <usart_sync_read+0x4e>
     726:	2900      	cmp	r1, #0
     728:	d01d      	beq.n	766 <usart_sync_read+0x52>
     72a:	0010      	movs	r0, r2
     72c:	1e43      	subs	r3, r0, #1
     72e:	4198      	sbcs	r0, r3
     730:	2286      	movs	r2, #134	; 0x86
     732:	0052      	lsls	r2, r2, #1
     734:	490d      	ldr	r1, [pc, #52]	; (76c <usart_sync_read+0x58>)
     736:	4b0e      	ldr	r3, [pc, #56]	; (770 <usart_sync_read+0x5c>)
     738:	4798      	blx	r3
	uint32_t                      offset = 0;
     73a:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     73c:	3408      	adds	r4, #8
     73e:	4d0d      	ldr	r5, [pc, #52]	; (774 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     740:	4b0d      	ldr	r3, [pc, #52]	; (778 <usart_sync_read+0x64>)
     742:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     744:	0020      	movs	r0, r4
     746:	47a8      	blx	r5
     748:	2800      	cmp	r0, #0
     74a:	d0fb      	beq.n	744 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     74c:	0020      	movs	r0, r4
     74e:	47c8      	blx	r9
     750:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     752:	3601      	adds	r6, #1
     754:	4546      	cmp	r6, r8
     756:	d3f5      	bcc.n	744 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     758:	0030      	movs	r0, r6
     75a:	bc0c      	pop	{r2, r3}
     75c:	4690      	mov	r8, r2
     75e:	4699      	mov	r9, r3
     760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     762:	2000      	movs	r0, #0
     764:	e7e4      	b.n	730 <usart_sync_read+0x1c>
     766:	2000      	movs	r0, #0
     768:	e7e2      	b.n	730 <usart_sync_read+0x1c>
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00002f88 	.word	0x00002f88
     770:	000007f5 	.word	0x000007f5
     774:	00000c65 	.word	0x00000c65
     778:	00000c49 	.word	0x00000c49

0000077c <usart_sync_init>:
{
     77c:	b570      	push	{r4, r5, r6, lr}
     77e:	0005      	movs	r5, r0
     780:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     782:	2800      	cmp	r0, #0
     784:	d013      	beq.n	7ae <usart_sync_init+0x32>
     786:	0008      	movs	r0, r1
     788:	1e43      	subs	r3, r0, #1
     78a:	4198      	sbcs	r0, r3
     78c:	b2c0      	uxtb	r0, r0
     78e:	2234      	movs	r2, #52	; 0x34
     790:	4908      	ldr	r1, [pc, #32]	; (7b4 <usart_sync_init+0x38>)
     792:	4b09      	ldr	r3, [pc, #36]	; (7b8 <usart_sync_init+0x3c>)
     794:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     796:	0028      	movs	r0, r5
     798:	3008      	adds	r0, #8
     79a:	0021      	movs	r1, r4
     79c:	4b07      	ldr	r3, [pc, #28]	; (7bc <usart_sync_init+0x40>)
     79e:	4798      	blx	r3
	if (init_status) {
     7a0:	2800      	cmp	r0, #0
     7a2:	d103      	bne.n	7ac <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <usart_sync_init+0x44>)
     7a6:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     7a8:	4b06      	ldr	r3, [pc, #24]	; (7c4 <usart_sync_init+0x48>)
     7aa:	602b      	str	r3, [r5, #0]
}
     7ac:	bd70      	pop	{r4, r5, r6, pc}
     7ae:	2000      	movs	r0, #0
     7b0:	e7ed      	b.n	78e <usart_sync_init+0x12>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	00002f88 	.word	0x00002f88
     7b8:	000007f5 	.word	0x000007f5
     7bc:	00000c01 	.word	0x00000c01
     7c0:	00000715 	.word	0x00000715
     7c4:	00000699 	.word	0x00000699

000007c8 <usart_sync_enable>:
{
     7c8:	b510      	push	{r4, lr}
     7ca:	0004      	movs	r4, r0
	ASSERT(descr);
     7cc:	1e43      	subs	r3, r0, #1
     7ce:	4198      	sbcs	r0, r3
     7d0:	b2c0      	uxtb	r0, r0
     7d2:	2253      	movs	r2, #83	; 0x53
     7d4:	4904      	ldr	r1, [pc, #16]	; (7e8 <usart_sync_enable+0x20>)
     7d6:	4b05      	ldr	r3, [pc, #20]	; (7ec <usart_sync_enable+0x24>)
     7d8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     7da:	0020      	movs	r0, r4
     7dc:	3008      	adds	r0, #8
     7de:	4b04      	ldr	r3, [pc, #16]	; (7f0 <usart_sync_enable+0x28>)
     7e0:	4798      	blx	r3
}
     7e2:	2000      	movs	r0, #0
     7e4:	bd10      	pop	{r4, pc}
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	00002f88 	.word	0x00002f88
     7ec:	000007f5 	.word	0x000007f5
     7f0:	00000c2d 	.word	0x00000c2d

000007f4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     7f4:	2800      	cmp	r0, #0
     7f6:	d100      	bne.n	7fa <assert+0x6>
		__asm("BKPT #0");
     7f8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     7fa:	4770      	bx	lr

000007fc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     7fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     7fe:	4a06      	ldr	r2, [pc, #24]	; (818 <_sbrk+0x1c>)
     800:	6812      	ldr	r2, [r2, #0]
     802:	2a00      	cmp	r2, #0
     804:	d004      	beq.n	810 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     806:	4a04      	ldr	r2, [pc, #16]	; (818 <_sbrk+0x1c>)
     808:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     80a:	18c3      	adds	r3, r0, r3
     80c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     80e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     810:	4902      	ldr	r1, [pc, #8]	; (81c <_sbrk+0x20>)
     812:	4a01      	ldr	r2, [pc, #4]	; (818 <_sbrk+0x1c>)
     814:	6011      	str	r1, [r2, #0]
     816:	e7f6      	b.n	806 <_sbrk+0xa>
     818:	20000090 	.word	0x20000090
     81c:	200020e0 	.word	0x200020e0

00000820 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     820:	2001      	movs	r0, #1
     822:	4240      	negs	r0, r0
     824:	4770      	bx	lr

00000826 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     826:	2380      	movs	r3, #128	; 0x80
     828:	019b      	lsls	r3, r3, #6
     82a:	604b      	str	r3, [r1, #4]

	return 0;
}
     82c:	2000      	movs	r0, #0
     82e:	4770      	bx	lr

00000830 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     830:	2001      	movs	r0, #1
     832:	4770      	bx	lr

00000834 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     834:	2000      	movs	r0, #0
     836:	4770      	bx	lr

00000838 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     838:	23fa      	movs	r3, #250	; 0xfa
     83a:	009b      	lsls	r3, r3, #2
     83c:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     83e:	4770      	bx	lr

00000840 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     840:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     842:	4b06      	ldr	r3, [pc, #24]	; (85c <_init_chip+0x1c>)
     844:	685a      	ldr	r2, [r3, #4]
     846:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     848:	4b05      	ldr	r3, [pc, #20]	; (860 <_init_chip+0x20>)
     84a:	4798      	blx	r3
	_sysctrl_init_sources();
     84c:	4b05      	ldr	r3, [pc, #20]	; (864 <_init_chip+0x24>)
     84e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     850:	4b05      	ldr	r3, [pc, #20]	; (868 <_init_chip+0x28>)
     852:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     854:	20ff      	movs	r0, #255	; 0xff
     856:	4b05      	ldr	r3, [pc, #20]	; (86c <_init_chip+0x2c>)
     858:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     85a:	bd10      	pop	{r4, pc}
     85c:	41004000 	.word	0x41004000
     860:	00000a39 	.word	0x00000a39
     864:	0000125d 	.word	0x0000125d
     868:	000012a5 	.word	0x000012a5
     86c:	00000a19 	.word	0x00000a19

00000870 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     870:	4a21      	ldr	r2, [pc, #132]	; (8f8 <_ext_irq_init+0x88>)
     872:	7853      	ldrb	r3, [r2, #1]
     874:	09db      	lsrs	r3, r3, #7
     876:	d1fc      	bne.n	872 <_ext_irq_init+0x2>
     878:	4a1f      	ldr	r2, [pc, #124]	; (8f8 <_ext_irq_init+0x88>)
     87a:	7853      	ldrb	r3, [r2, #1]
     87c:	09db      	lsrs	r3, r3, #7
     87e:	d1fc      	bne.n	87a <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     880:	4b1d      	ldr	r3, [pc, #116]	; (8f8 <_ext_irq_init+0x88>)
     882:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     884:	079b      	lsls	r3, r3, #30
     886:	d50a      	bpl.n	89e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     888:	2200      	movs	r2, #0
     88a:	4b1b      	ldr	r3, [pc, #108]	; (8f8 <_ext_irq_init+0x88>)
     88c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     88e:	001a      	movs	r2, r3
     890:	7853      	ldrb	r3, [r2, #1]
     892:	09db      	lsrs	r3, r3, #7
     894:	d1fc      	bne.n	890 <_ext_irq_init+0x20>
     896:	4a18      	ldr	r2, [pc, #96]	; (8f8 <_ext_irq_init+0x88>)
     898:	7853      	ldrb	r3, [r2, #1]
     89a:	09db      	lsrs	r3, r3, #7
     89c:	d1fc      	bne.n	898 <_ext_irq_init+0x28>
	((Eic *)hw)->CTRL.reg = data;
     89e:	2201      	movs	r2, #1
     8a0:	4b15      	ldr	r3, [pc, #84]	; (8f8 <_ext_irq_init+0x88>)
     8a2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     8a4:	001a      	movs	r2, r3
     8a6:	7853      	ldrb	r3, [r2, #1]
     8a8:	09db      	lsrs	r3, r3, #7
     8aa:	d1fc      	bne.n	8a6 <_ext_irq_init+0x36>
     8ac:	4a12      	ldr	r2, [pc, #72]	; (8f8 <_ext_irq_init+0x88>)
     8ae:	7853      	ldrb	r3, [r2, #1]
     8b0:	09db      	lsrs	r3, r3, #7
     8b2:	d1fc      	bne.n	8ae <_ext_irq_init+0x3e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     8b4:	4b10      	ldr	r3, [pc, #64]	; (8f8 <_ext_irq_init+0x88>)
     8b6:	2200      	movs	r2, #0
     8b8:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     8ba:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     8bc:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     8be:	619a      	str	r2, [r3, #24]
     8c0:	2280      	movs	r2, #128	; 0x80
     8c2:	0552      	lsls	r2, r2, #21
     8c4:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     8c6:	781a      	ldrb	r2, [r3, #0]
     8c8:	2102      	movs	r1, #2
     8ca:	430a      	orrs	r2, r1
     8cc:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     8ce:	001a      	movs	r2, r3
     8d0:	7853      	ldrb	r3, [r2, #1]
     8d2:	09db      	lsrs	r3, r3, #7
     8d4:	d1fc      	bne.n	8d0 <_ext_irq_init+0x60>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8d6:	4b09      	ldr	r3, [pc, #36]	; (8fc <_ext_irq_init+0x8c>)
     8d8:	2210      	movs	r2, #16
     8da:	2180      	movs	r1, #128	; 0x80
     8dc:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     8de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     8e2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8e6:	3101      	adds	r1, #1
     8e8:	31ff      	adds	r1, #255	; 0xff
     8ea:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8ec:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     8ee:	4b04      	ldr	r3, [pc, #16]	; (900 <_ext_irq_init+0x90>)
     8f0:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     8f2:	2000      	movs	r0, #0
     8f4:	4770      	bx	lr
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	40001800 	.word	0x40001800
     8fc:	e000e100 	.word	0xe000e100
     900:	20000094 	.word	0x20000094

00000904 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     904:	280f      	cmp	r0, #15
     906:	d002      	beq.n	90e <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     908:	200d      	movs	r0, #13
     90a:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     90c:	4770      	bx	lr
	if (enable) {
     90e:	2900      	cmp	r1, #0
     910:	d106      	bne.n	920 <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     912:	4b06      	ldr	r3, [pc, #24]	; (92c <_ext_irq_enable+0x28>)
     914:	2280      	movs	r2, #128	; 0x80
     916:	0212      	lsls	r2, r2, #8
     918:	609a      	str	r2, [r3, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     91a:	611a      	str	r2, [r3, #16]
	return ERR_NONE;
     91c:	2000      	movs	r0, #0
     91e:	e7f5      	b.n	90c <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     920:	2280      	movs	r2, #128	; 0x80
     922:	0212      	lsls	r2, r2, #8
     924:	4b01      	ldr	r3, [pc, #4]	; (92c <_ext_irq_enable+0x28>)
     926:	60da      	str	r2, [r3, #12]
     928:	2000      	movs	r0, #0
     92a:	e7ef      	b.n	90c <_ext_irq_enable+0x8>
     92c:	40001800 	.word	0x40001800

00000930 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     930:	b5f0      	push	{r4, r5, r6, r7, lr}
     932:	46ce      	mov	lr, r9
     934:	4647      	mov	r7, r8
     936:	b580      	push	{r7, lr}
     938:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     93a:	4b31      	ldr	r3, [pc, #196]	; (a00 <EIC_Handler+0xd0>)
     93c:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     93e:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     940:	400a      	ands	r2, r1
     942:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     944:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     946:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     948:	4b2e      	ldr	r3, [pc, #184]	; (a04 <EIC_Handler+0xd4>)
     94a:	6818      	ldr	r0, [r3, #0]
     94c:	1e43      	subs	r3, r0, #1
     94e:	4198      	sbcs	r0, r3
     950:	b2c0      	uxtb	r0, r0
     952:	22d2      	movs	r2, #210	; 0xd2
     954:	492c      	ldr	r1, [pc, #176]	; (a08 <EIC_Handler+0xd8>)
     956:	4b2d      	ldr	r3, [pc, #180]	; (a0c <EIC_Handler+0xdc>)
     958:	4798      	blx	r3

	while (flags) {
     95a:	9b01      	ldr	r3, [sp, #4]
     95c:	2b00      	cmp	r3, #0
     95e:	d049      	beq.n	9f4 <EIC_Handler+0xc4>
     960:	2301      	movs	r3, #1
     962:	425b      	negs	r3, r3
     964:	4699      	mov	r9, r3
		pos = ffs(flags) - 1;
     966:	4b2a      	ldr	r3, [pc, #168]	; (a10 <EIC_Handler+0xe0>)
     968:	4698      	mov	r8, r3
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
				callback(pin);
     96a:	4f26      	ldr	r7, [pc, #152]	; (a04 <EIC_Handler+0xd4>)
				if (_map[middle].extint == pos) {
     96c:	4d29      	ldr	r5, [pc, #164]	; (a14 <EIC_Handler+0xe4>)
     96e:	e03a      	b.n	9e6 <EIC_Handler+0xb6>
					upper = middle - 1;
     970:	3a01      	subs	r2, #1
     972:	b2d6      	uxtb	r6, r2
			while (upper >= lower) {
     974:	42b1      	cmp	r1, r6
     976:	d80c      	bhi.n	992 <EIC_Handler+0x62>
				middle = (upper + lower) >> 1;
     978:	1873      	adds	r3, r6, r1
     97a:	105b      	asrs	r3, r3, #1
     97c:	b2da      	uxtb	r2, r3
				if (_map[middle].extint == pos) {
     97e:	4003      	ands	r3, r0
     980:	00db      	lsls	r3, r3, #3
     982:	5d5b      	ldrb	r3, [r3, r5]
     984:	42a3      	cmp	r3, r4
     986:	d008      	beq.n	99a <EIC_Handler+0x6a>
				if (_map[middle].extint < pos) {
     988:	429c      	cmp	r4, r3
     98a:	ddf1      	ble.n	970 <EIC_Handler+0x40>
					lower = middle + 1;
     98c:	3201      	adds	r2, #1
     98e:	b2d1      	uxtb	r1, r2
     990:	e7f0      	b.n	974 <EIC_Handler+0x44>
			if (INVALID_PIN_NUMBER != pin) {
     992:	464b      	mov	r3, r9
     994:	3301      	adds	r3, #1
     996:	d005      	beq.n	9a4 <EIC_Handler+0x74>
     998:	e001      	b.n	99e <EIC_Handler+0x6e>
     99a:	230f      	movs	r3, #15
     99c:	4699      	mov	r9, r3
				callback(pin);
     99e:	4648      	mov	r0, r9
     9a0:	683b      	ldr	r3, [r7, #0]
     9a2:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     9a4:	9b01      	ldr	r3, [sp, #4]
     9a6:	2201      	movs	r2, #1
     9a8:	40a2      	lsls	r2, r4
     9aa:	4393      	bics	r3, r2
     9ac:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     9ae:	9801      	ldr	r0, [sp, #4]
     9b0:	4b17      	ldr	r3, [pc, #92]	; (a10 <EIC_Handler+0xe0>)
     9b2:	4798      	blx	r3
     9b4:	3801      	subs	r0, #1
     9b6:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     9b8:	1c63      	adds	r3, r4, #1
     9ba:	d00a      	beq.n	9d2 <EIC_Handler+0xa2>
				if (_map[middle].extint == pos) {
     9bc:	2c0f      	cmp	r4, #15
     9be:	d005      	beq.n	9cc <EIC_Handler+0x9c>
     9c0:	230f      	movs	r3, #15
     9c2:	2200      	movs	r2, #0
     9c4:	2601      	movs	r6, #1
     9c6:	2100      	movs	r1, #0
     9c8:	20ff      	movs	r0, #255	; 0xff
     9ca:	e7dd      	b.n	988 <EIC_Handler+0x58>
     9cc:	230f      	movs	r3, #15
     9ce:	4699      	mov	r9, r3
     9d0:	e7e5      	b.n	99e <EIC_Handler+0x6e>
	return ((Eic *)hw)->INTFLAG.reg;
     9d2:	4b0b      	ldr	r3, [pc, #44]	; (a00 <EIC_Handler+0xd0>)
     9d4:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     9d6:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     9d8:	400a      	ands	r2, r1
     9da:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     9dc:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     9de:	611a      	str	r2, [r3, #16]
	while (flags) {
     9e0:	9b01      	ldr	r3, [sp, #4]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d006      	beq.n	9f4 <EIC_Handler+0xc4>
		pos = ffs(flags) - 1;
     9e6:	9801      	ldr	r0, [sp, #4]
     9e8:	47c0      	blx	r8
     9ea:	3801      	subs	r0, #1
     9ec:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     9ee:	1c63      	adds	r3, r4, #1
     9f0:	d1e4      	bne.n	9bc <EIC_Handler+0x8c>
     9f2:	e7ee      	b.n	9d2 <EIC_Handler+0xa2>
	}
}
     9f4:	b003      	add	sp, #12
     9f6:	bc0c      	pop	{r2, r3}
     9f8:	4690      	mov	r8, r2
     9fa:	4699      	mov	r9, r3
     9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	40001800 	.word	0x40001800
     a04:	20000094 	.word	0x20000094
     a08:	00002fac 	.word	0x00002fac
     a0c:	000007f5 	.word	0x000007f5
     a10:	00001ce1 	.word	0x00001ce1
     a14:	00002fa4 	.word	0x00002fa4

00000a18 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     a18:	07c3      	lsls	r3, r0, #31
     a1a:	d50a      	bpl.n	a32 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     a1c:	4b05      	ldr	r3, [pc, #20]	; (a34 <_gclk_init_generators_by_fref+0x1c>)
     a1e:	2280      	movs	r2, #128	; 0x80
     a20:	0052      	lsls	r2, r2, #1
     a22:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     a24:	2283      	movs	r2, #131	; 0x83
     a26:	0252      	lsls	r2, r2, #9
     a28:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     a2a:	001a      	movs	r2, r3
     a2c:	7853      	ldrb	r3, [r2, #1]
     a2e:	09db      	lsrs	r3, r3, #7
     a30:	d1fc      	bne.n	a2c <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     a32:	4770      	bx	lr
     a34:	40000c00 	.word	0x40000c00

00000a38 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     a38:	4b06      	ldr	r3, [pc, #24]	; (a54 <_pm_init+0x1c>)
     a3a:	7a1a      	ldrb	r2, [r3, #8]
     a3c:	b2d2      	uxtb	r2, r2
     a3e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     a40:	7a5a      	ldrb	r2, [r3, #9]
     a42:	b2d2      	uxtb	r2, r2
     a44:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     a46:	7a9a      	ldrb	r2, [r3, #10]
     a48:	b2d2      	uxtb	r2, r2
     a4a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     a4c:	7ada      	ldrb	r2, [r3, #11]
     a4e:	b2d2      	uxtb	r2, r2
     a50:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     a52:	4770      	bx	lr
     a54:	40000400 	.word	0x40000400

00000a58 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     a58:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     a5a:	4b08      	ldr	r3, [pc, #32]	; (a7c <_get_i2cm_index+0x24>)
     a5c:	469c      	mov	ip, r3
     a5e:	4460      	add	r0, ip
     a60:	0a80      	lsrs	r0, r0, #10
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
     a62:	b2c0      	uxtb	r0, r0
     a64:	2800      	cmp	r0, #0
     a66:	d007      	beq.n	a78 <_get_i2cm_index+0x20>
			return i;
		}
	}

	ASSERT(false);
     a68:	22e6      	movs	r2, #230	; 0xe6
     a6a:	0092      	lsls	r2, r2, #2
     a6c:	4904      	ldr	r1, [pc, #16]	; (a80 <_get_i2cm_index+0x28>)
     a6e:	2000      	movs	r0, #0
     a70:	4b04      	ldr	r3, [pc, #16]	; (a84 <_get_i2cm_index+0x2c>)
     a72:	4798      	blx	r3
	return -1;
     a74:	2001      	movs	r0, #1
     a76:	4240      	negs	r0, r0
}
     a78:	bd10      	pop	{r4, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	bdfff800 	.word	0xbdfff800
     a80:	00002fdc 	.word	0x00002fdc
     a84:	000007f5 	.word	0x000007f5

00000a88 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     a88:	b570      	push	{r4, r5, r6, lr}
     a8a:	0005      	movs	r5, r0
     a8c:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     a8e:	0008      	movs	r0, r1
     a90:	4b31      	ldr	r3, [pc, #196]	; (b58 <_i2c_m_sync_init_impl+0xd0>)
     a92:	4798      	blx	r3
     a94:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     a96:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     a98:	07db      	lsls	r3, r3, #31
     a9a:	d421      	bmi.n	ae0 <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     a9c:	0043      	lsls	r3, r0, #1
     a9e:	181b      	adds	r3, r3, r0
     aa0:	00db      	lsls	r3, r3, #3
     aa2:	4a2e      	ldr	r2, [pc, #184]	; (b5c <_i2c_m_sync_init_impl+0xd4>)
     aa4:	18d3      	adds	r3, r2, r3
     aa6:	6859      	ldr	r1, [r3, #4]
     aa8:	231c      	movs	r3, #28
     aaa:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     aac:	2203      	movs	r2, #3
     aae:	69e3      	ldr	r3, [r4, #28]
     ab0:	421a      	tst	r2, r3
     ab2:	d1fc      	bne.n	aae <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     ab4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     ab6:	079b      	lsls	r3, r3, #30
     ab8:	d50b      	bpl.n	ad2 <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     aba:	6823      	ldr	r3, [r4, #0]
     abc:	2202      	movs	r2, #2
     abe:	4393      	bics	r3, r2
     ac0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ac2:	3201      	adds	r2, #1
     ac4:	69e3      	ldr	r3, [r4, #28]
     ac6:	421a      	tst	r2, r3
     ac8:	d1fc      	bne.n	ac4 <_i2c_m_sync_init_impl+0x3c>
     aca:	2202      	movs	r2, #2
     acc:	69e3      	ldr	r3, [r4, #28]
     ace:	421a      	tst	r2, r3
     ad0:	d1fc      	bne.n	acc <_i2c_m_sync_init_impl+0x44>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     ad2:	2301      	movs	r3, #1
     ad4:	430b      	orrs	r3, r1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     ad6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ad8:	2203      	movs	r2, #3
     ada:	69e3      	ldr	r3, [r4, #28]
     adc:	421a      	tst	r2, r3
     ade:	d1fc      	bne.n	ada <_i2c_m_sync_init_impl+0x52>
     ae0:	2201      	movs	r2, #1
     ae2:	69e3      	ldr	r3, [r4, #28]
     ae4:	421a      	tst	r2, r3
     ae6:	d1fc      	bne.n	ae2 <_i2c_m_sync_init_impl+0x5a>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     ae8:	0043      	lsls	r3, r0, #1
     aea:	181b      	adds	r3, r3, r0
     aec:	00db      	lsls	r3, r3, #3
     aee:	4a1b      	ldr	r2, [pc, #108]	; (b5c <_i2c_m_sync_init_impl+0xd4>)
     af0:	18d3      	adds	r3, r2, r3
     af2:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     af4:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     af6:	2203      	movs	r2, #3
     af8:	69e3      	ldr	r3, [r4, #28]
     afa:	421a      	tst	r2, r3
     afc:	d1fc      	bne.n	af8 <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     afe:	0043      	lsls	r3, r0, #1
     b00:	181b      	adds	r3, r3, r0
     b02:	00db      	lsls	r3, r3, #3
     b04:	4a15      	ldr	r2, [pc, #84]	; (b5c <_i2c_m_sync_init_impl+0xd4>)
     b06:	18d3      	adds	r3, r2, r3
     b08:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     b0a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b0c:	2204      	movs	r2, #4
     b0e:	69e3      	ldr	r3, [r4, #28]
     b10:	421a      	tst	r2, r3
     b12:	d1fc      	bne.n	b0e <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     b14:	0043      	lsls	r3, r0, #1
     b16:	181b      	adds	r3, r3, r0
     b18:	00db      	lsls	r3, r3, #3
     b1a:	4a10      	ldr	r2, [pc, #64]	; (b5c <_i2c_m_sync_init_impl+0xd4>)
     b1c:	18d3      	adds	r3, r2, r3
     b1e:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     b20:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     b22:	0189      	lsls	r1, r1, #6
     b24:	0f89      	lsrs	r1, r1, #30
     b26:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     b2a:	4e0d      	ldr	r6, [pc, #52]	; (b60 <_i2c_m_sync_init_impl+0xd8>)
     b2c:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     b2e:	2301      	movs	r3, #1
     b30:	428b      	cmp	r3, r1
     b32:	419b      	sbcs	r3, r3
     b34:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     b36:	039b      	lsls	r3, r3, #14
     b38:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     b3a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b3c:	2204      	movs	r2, #4
     b3e:	69e3      	ldr	r3, [r4, #28]
     b40:	421a      	tst	r2, r3
     b42:	d1fc      	bne.n	b3e <_i2c_m_sync_init_impl+0xb6>

	service->trise = _i2cms[i].trise;
     b44:	0043      	lsls	r3, r0, #1
     b46:	1818      	adds	r0, r3, r0
     b48:	00c0      	lsls	r0, r0, #3
     b4a:	4b04      	ldr	r3, [pc, #16]	; (b5c <_i2c_m_sync_init_impl+0xd4>)
     b4c:	1818      	adds	r0, r3, r0
     b4e:	8a43      	ldrh	r3, [r0, #18]
     b50:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     b52:	2000      	movs	r0, #0
     b54:	bd70      	pop	{r4, r5, r6, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	00000a59 	.word	0x00000a59
     b5c:	00002fc4 	.word	0x00002fc4
     b60:	ffffbfff 	.word	0xffffbfff

00000b64 <_usart_init>:
{
     b64:	b510      	push	{r4, lr}
     b66:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     b68:	4b1f      	ldr	r3, [pc, #124]	; (be8 <_usart_init+0x84>)
     b6a:	18c3      	adds	r3, r0, r3
     b6c:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     b6e:	b2db      	uxtb	r3, r3
     b70:	2b05      	cmp	r3, #5
     b72:	d004      	beq.n	b7e <_usart_init+0x1a>
	ASSERT(false);
     b74:	4a1d      	ldr	r2, [pc, #116]	; (bec <_usart_init+0x88>)
     b76:	491e      	ldr	r1, [pc, #120]	; (bf0 <_usart_init+0x8c>)
     b78:	2000      	movs	r0, #0
     b7a:	4b1e      	ldr	r3, [pc, #120]	; (bf4 <_usart_init+0x90>)
     b7c:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     b7e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     b80:	07db      	lsls	r3, r3, #31
     b82:	d418      	bmi.n	bb6 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b84:	2203      	movs	r2, #3
     b86:	69e3      	ldr	r3, [r4, #28]
     b88:	421a      	tst	r2, r3
     b8a:	d1fc      	bne.n	b86 <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     b8c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     b8e:	079b      	lsls	r3, r3, #30
     b90:	d50b      	bpl.n	baa <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     b92:	6823      	ldr	r3, [r4, #0]
     b94:	2202      	movs	r2, #2
     b96:	4393      	bics	r3, r2
     b98:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b9a:	3201      	adds	r2, #1
     b9c:	69e3      	ldr	r3, [r4, #28]
     b9e:	421a      	tst	r2, r3
     ba0:	d1fc      	bne.n	b9c <_usart_init+0x38>
     ba2:	2202      	movs	r2, #2
     ba4:	69e3      	ldr	r3, [r4, #28]
     ba6:	421a      	tst	r2, r3
     ba8:	d1fc      	bne.n	ba4 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     baa:	2305      	movs	r3, #5
     bac:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bae:	2203      	movs	r2, #3
     bb0:	69e3      	ldr	r3, [r4, #28]
     bb2:	421a      	tst	r2, r3
     bb4:	d1fc      	bne.n	bb0 <_usart_init+0x4c>
     bb6:	2201      	movs	r2, #1
     bb8:	69e3      	ldr	r3, [r4, #28]
     bba:	421a      	tst	r2, r3
     bbc:	d1fc      	bne.n	bb8 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     bbe:	4b0e      	ldr	r3, [pc, #56]	; (bf8 <_usart_init+0x94>)
     bc0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bc2:	2203      	movs	r2, #3
     bc4:	69e3      	ldr	r3, [r4, #28]
     bc6:	421a      	tst	r2, r3
     bc8:	d1fc      	bne.n	bc4 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
     bca:	23c0      	movs	r3, #192	; 0xc0
     bcc:	029b      	lsls	r3, r3, #10
     bce:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bd0:	2207      	movs	r2, #7
     bd2:	69e3      	ldr	r3, [r4, #28]
     bd4:	421a      	tst	r2, r3
     bd6:	d1fc      	bne.n	bd2 <_usart_init+0x6e>
	((Sercom *)hw)->USART.BAUD.reg = data;
     bd8:	4b08      	ldr	r3, [pc, #32]	; (bfc <_usart_init+0x98>)
     bda:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
     bdc:	2300      	movs	r3, #0
     bde:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     be0:	2230      	movs	r2, #48	; 0x30
     be2:	54a3      	strb	r3, [r4, r2]
}
     be4:	2000      	movs	r0, #0
     be6:	bd10      	pop	{r4, pc}
     be8:	bdfff800 	.word	0xbdfff800
     bec:	0000023a 	.word	0x0000023a
     bf0:	00002fdc 	.word	0x00002fdc
     bf4:	000007f5 	.word	0x000007f5
     bf8:	40100004 	.word	0x40100004
     bfc:	000062b6 	.word	0x000062b6

00000c00 <_usart_sync_init>:
{
     c00:	b570      	push	{r4, r5, r6, lr}
     c02:	0005      	movs	r5, r0
     c04:	000c      	movs	r4, r1
	ASSERT(device);
     c06:	1e43      	subs	r3, r0, #1
     c08:	4198      	sbcs	r0, r3
     c0a:	b2c0      	uxtb	r0, r0
     c0c:	22b4      	movs	r2, #180	; 0xb4
     c0e:	4904      	ldr	r1, [pc, #16]	; (c20 <_usart_sync_init+0x20>)
     c10:	4b04      	ldr	r3, [pc, #16]	; (c24 <_usart_sync_init+0x24>)
     c12:	4798      	blx	r3
	device->hw = hw;
     c14:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     c16:	0020      	movs	r0, r4
     c18:	4b03      	ldr	r3, [pc, #12]	; (c28 <_usart_sync_init+0x28>)
     c1a:	4798      	blx	r3
}
     c1c:	bd70      	pop	{r4, r5, r6, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	00002fdc 	.word	0x00002fdc
     c24:	000007f5 	.word	0x000007f5
     c28:	00000b65 	.word	0x00000b65

00000c2c <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     c2c:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c2e:	6813      	ldr	r3, [r2, #0]
     c30:	2102      	movs	r1, #2
     c32:	430b      	orrs	r3, r1
     c34:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c36:	3101      	adds	r1, #1
     c38:	69d3      	ldr	r3, [r2, #28]
     c3a:	4219      	tst	r1, r3
     c3c:	d1fc      	bne.n	c38 <_usart_sync_enable+0xc>
}
     c3e:	4770      	bx	lr

00000c40 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     c40:	6803      	ldr	r3, [r0, #0]
     c42:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     c44:	8519      	strh	r1, [r3, #40]	; 0x28
}
     c46:	4770      	bx	lr

00000c48 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     c48:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     c4a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     c4c:	b2c0      	uxtb	r0, r0
}
     c4e:	4770      	bx	lr

00000c50 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     c50:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     c52:	7e18      	ldrb	r0, [r3, #24]
     c54:	2301      	movs	r3, #1
     c56:	4018      	ands	r0, r3
}
     c58:	4770      	bx	lr

00000c5a <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     c5a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     c5c:	7e18      	ldrb	r0, [r3, #24]
     c5e:	0780      	lsls	r0, r0, #30
     c60:	0fc0      	lsrs	r0, r0, #31
}
     c62:	4770      	bx	lr

00000c64 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     c64:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     c66:	7e18      	ldrb	r0, [r3, #24]
     c68:	0740      	lsls	r0, r0, #29
     c6a:	0fc0      	lsrs	r0, r0, #31
}
     c6c:	4770      	bx	lr
	...

00000c70 <_i2c_m_sync_init>:
{
     c70:	b570      	push	{r4, r5, r6, lr}
     c72:	0004      	movs	r4, r0
     c74:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     c76:	1e43      	subs	r3, r0, #1
     c78:	4198      	sbcs	r0, r3
     c7a:	b2c0      	uxtb	r0, r0
     c7c:	4a04      	ldr	r2, [pc, #16]	; (c90 <_i2c_m_sync_init+0x20>)
     c7e:	4905      	ldr	r1, [pc, #20]	; (c94 <_i2c_m_sync_init+0x24>)
     c80:	4b05      	ldr	r3, [pc, #20]	; (c98 <_i2c_m_sync_init+0x28>)
     c82:	4798      	blx	r3
	i2c_dev->hw = hw;
     c84:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     c86:	0029      	movs	r1, r5
     c88:	0020      	movs	r0, r4
     c8a:	4b04      	ldr	r3, [pc, #16]	; (c9c <_i2c_m_sync_init+0x2c>)
     c8c:	4798      	blx	r3
}
     c8e:	bd70      	pop	{r4, r5, r6, pc}
     c90:	00000507 	.word	0x00000507
     c94:	00002fdc 	.word	0x00002fdc
     c98:	000007f5 	.word	0x000007f5
     c9c:	00000a89 	.word	0x00000a89

00000ca0 <_i2c_m_sync_enable>:
{
     ca0:	b570      	push	{r4, r5, r6, lr}
     ca2:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     ca4:	4d1a      	ldr	r5, [pc, #104]	; (d10 <_i2c_m_sync_enable+0x70>)
     ca6:	1e43      	subs	r3, r0, #1
     ca8:	4198      	sbcs	r0, r3
     caa:	b2c0      	uxtb	r0, r0
     cac:	4a19      	ldr	r2, [pc, #100]	; (d14 <_i2c_m_sync_enable+0x74>)
     cae:	0029      	movs	r1, r5
     cb0:	4e19      	ldr	r6, [pc, #100]	; (d18 <_i2c_m_sync_enable+0x78>)
     cb2:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
     cb4:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
     cb6:	0020      	movs	r0, r4
     cb8:	1e43      	subs	r3, r0, #1
     cba:	4198      	sbcs	r0, r3
     cbc:	b2c0      	uxtb	r0, r0
     cbe:	4a17      	ldr	r2, [pc, #92]	; (d1c <_i2c_m_sync_enable+0x7c>)
     cc0:	0029      	movs	r1, r5
     cc2:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     cc4:	6823      	ldr	r3, [r4, #0]
     cc6:	2202      	movs	r2, #2
     cc8:	4313      	orrs	r3, r2
     cca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ccc:	3201      	adds	r2, #1
     cce:	69e3      	ldr	r3, [r4, #28]
     cd0:	421a      	tst	r2, r3
     cd2:	d1fc      	bne.n	cce <_i2c_m_sync_enable+0x2e>
     cd4:	2504      	movs	r5, #4
     cd6:	2204      	movs	r2, #4
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     cd8:	2003      	movs	r0, #3
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     cda:	2610      	movs	r6, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cdc:	4910      	ldr	r1, [pc, #64]	; (d20 <_i2c_m_sync_enable+0x80>)
     cde:	69e3      	ldr	r3, [r4, #28]
     ce0:	421a      	tst	r2, r3
     ce2:	d1fc      	bne.n	cde <_i2c_m_sync_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     ce4:	8b63      	ldrh	r3, [r4, #26]
     ce6:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     ce8:	4003      	ands	r3, r0
     cea:	2b01      	cmp	r3, #1
     cec:	d00a      	beq.n	d04 <_i2c_m_sync_enable+0x64>
     cee:	3901      	subs	r1, #1
		if (timeout <= 0) {
     cf0:	2900      	cmp	r1, #0
     cf2:	d1f4      	bne.n	cde <_i2c_m_sync_enable+0x3e>
     cf4:	3d01      	subs	r5, #1
			if (--timeout_attempt)
     cf6:	2d00      	cmp	r5, #0
     cf8:	d006      	beq.n	d08 <_i2c_m_sync_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     cfa:	8366      	strh	r6, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cfc:	69e3      	ldr	r3, [r4, #28]
     cfe:	421a      	tst	r2, r3
     d00:	d1fc      	bne.n	cfc <_i2c_m_sync_enable+0x5c>
     d02:	e7eb      	b.n	cdc <_i2c_m_sync_enable+0x3c>
	return ERR_NONE;
     d04:	2000      	movs	r0, #0
}
     d06:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
     d08:	2006      	movs	r0, #6
     d0a:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
     d0c:	e7fb      	b.n	d06 <_i2c_m_sync_enable+0x66>
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	00002fdc 	.word	0x00002fdc
     d14:	00000524 	.word	0x00000524
     d18:	000007f5 	.word	0x000007f5
     d1c:	000005f4 	.word	0x000005f4
     d20:	0000ffff 	.word	0x0000ffff

00000d24 <_i2c_m_sync_transfer>:
{
     d24:	b5f0      	push	{r4, r5, r6, r7, lr}
     d26:	46de      	mov	lr, fp
     d28:	4657      	mov	r7, sl
     d2a:	464e      	mov	r6, r9
     d2c:	4645      	mov	r5, r8
     d2e:	b5e0      	push	{r5, r6, r7, lr}
     d30:	b083      	sub	sp, #12
     d32:	0005      	movs	r5, r0
     d34:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
     d36:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     d38:	0006      	movs	r6, r0
     d3a:	1e73      	subs	r3, r6, #1
     d3c:	419e      	sbcs	r6, r3
     d3e:	b2f3      	uxtb	r3, r6
     d40:	9301      	str	r3, [sp, #4]
     d42:	4fb4      	ldr	r7, [pc, #720]	; (1014 <_i2c_m_sync_transfer+0x2f0>)
     d44:	4ab4      	ldr	r2, [pc, #720]	; (1018 <_i2c_m_sync_transfer+0x2f4>)
     d46:	0039      	movs	r1, r7
     d48:	0018      	movs	r0, r3
     d4a:	4eb4      	ldr	r6, [pc, #720]	; (101c <_i2c_m_sync_transfer+0x2f8>)
     d4c:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
     d4e:	6928      	ldr	r0, [r5, #16]
     d50:	1e43      	subs	r3, r0, #1
     d52:	4198      	sbcs	r0, r3
     d54:	b2c0      	uxtb	r0, r0
     d56:	22b8      	movs	r2, #184	; 0xb8
     d58:	00d2      	lsls	r2, r2, #3
     d5a:	0039      	movs	r1, r7
     d5c:	47b0      	blx	r6
	ASSERT(msg);
     d5e:	4640      	mov	r0, r8
     d60:	1e43      	subs	r3, r0, #1
     d62:	4198      	sbcs	r0, r3
     d64:	b2c0      	uxtb	r0, r0
     d66:	4aae      	ldr	r2, [pc, #696]	; (1020 <_i2c_m_sync_transfer+0x2fc>)
     d68:	0039      	movs	r1, r7
     d6a:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     d6c:	886b      	ldrh	r3, [r5, #2]
     d6e:	05db      	lsls	r3, r3, #23
     d70:	d500      	bpl.n	d74 <_i2c_m_sync_transfer+0x50>
     d72:	e224      	b.n	11be <_i2c_m_sync_transfer+0x49a>
	msg->flags |= I2C_M_BUSY;
     d74:	4643      	mov	r3, r8
     d76:	885a      	ldrh	r2, [r3, #2]
     d78:	2380      	movs	r3, #128	; 0x80
     d7a:	005b      	lsls	r3, r3, #1
     d7c:	431a      	orrs	r2, r3
     d7e:	4641      	mov	r1, r8
     d80:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
     d82:	002a      	movs	r2, r5
     d84:	c9c1      	ldmia	r1!, {r0, r6, r7}
     d86:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     d88:	6862      	ldr	r2, [r4, #4]
     d8a:	4313      	orrs	r3, r2
     d8c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d8e:	2204      	movs	r2, #4
     d90:	69e3      	ldr	r3, [r4, #28]
     d92:	421a      	tst	r2, r3
     d94:	d1fc      	bne.n	d90 <_i2c_m_sync_transfer+0x6c>
	void *             hw    = i2c_dev->hw;
     d96:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     d98:	683b      	ldr	r3, [r7, #0]
     d9a:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
     d9c:	4aa1      	ldr	r2, [pc, #644]	; (1024 <_i2c_m_sync_transfer+0x300>)
     d9e:	499d      	ldr	r1, [pc, #628]	; (1014 <_i2c_m_sync_transfer+0x2f0>)
     da0:	9801      	ldr	r0, [sp, #4]
     da2:	4b9e      	ldr	r3, [pc, #632]	; (101c <_i2c_m_sync_transfer+0x2f8>)
     da4:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     da6:	686b      	ldr	r3, [r5, #4]
     da8:	2b01      	cmp	r3, #1
     daa:	d05a      	beq.n	e62 <_i2c_m_sync_transfer+0x13e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	4a9e      	ldr	r2, [pc, #632]	; (1028 <_i2c_m_sync_transfer+0x304>)
     db0:	4013      	ands	r3, r2
     db2:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     db4:	2204      	movs	r2, #4
     db6:	69fb      	ldr	r3, [r7, #28]
     db8:	421a      	tst	r2, r3
     dba:	d1fc      	bne.n	db6 <_i2c_m_sync_transfer+0x92>
	if (msg->addr & I2C_M_TEN) {
     dbc:	882b      	ldrh	r3, [r5, #0]
     dbe:	055a      	lsls	r2, r3, #21
     dc0:	d55c      	bpl.n	e7c <_i2c_m_sync_transfer+0x158>
		if (msg->flags & I2C_M_RD) {
     dc2:	886a      	ldrh	r2, [r5, #2]
     dc4:	07d2      	lsls	r2, r2, #31
     dc6:	d504      	bpl.n	dd2 <_i2c_m_sync_transfer+0xae>
			msg->flags |= I2C_M_TEN;
     dc8:	886a      	ldrh	r2, [r5, #2]
     dca:	2180      	movs	r1, #128	; 0x80
     dcc:	00c9      	lsls	r1, r1, #3
     dce:	430a      	orrs	r2, r1
     dd0:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     dd2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     dd4:	4995      	ldr	r1, [pc, #596]	; (102c <_i2c_m_sync_transfer+0x308>)
     dd6:	4019      	ands	r1, r3
     dd8:	2204      	movs	r2, #4
     dda:	69fb      	ldr	r3, [r7, #28]
     ddc:	421a      	tst	r2, r3
     dde:	d1fc      	bne.n	dda <_i2c_m_sync_transfer+0xb6>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     de2:	2280      	movs	r2, #128	; 0x80
     de4:	01d2      	lsls	r2, r2, #7
     de6:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
     de8:	2380      	movs	r3, #128	; 0x80
     dea:	021b      	lsls	r3, r3, #8
     dec:	4313      	orrs	r3, r2
     dee:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     df0:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     df2:	2204      	movs	r2, #4
     df4:	69fb      	ldr	r3, [r7, #28]
     df6:	421a      	tst	r2, r3
     df8:	d1fc      	bne.n	df4 <_i2c_m_sync_transfer+0xd0>
	void *   hw      = i2c_dev->hw;
     dfa:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     dfc:	7e0b      	ldrb	r3, [r1, #24]
     dfe:	b2db      	uxtb	r3, r3
     e00:	4a8b      	ldr	r2, [pc, #556]	; (1030 <_i2c_m_sync_transfer+0x30c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     e02:	2003      	movs	r0, #3
     e04:	4218      	tst	r0, r3
     e06:	d104      	bne.n	e12 <_i2c_m_sync_transfer+0xee>
     e08:	7e0b      	ldrb	r3, [r1, #24]
     e0a:	b2db      	uxtb	r3, r3
     e0c:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
     e0e:	2a00      	cmp	r2, #0
     e10:	d1f8      	bne.n	e04 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     e12:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e14:	2104      	movs	r1, #4
     e16:	69fa      	ldr	r2, [r7, #28]
     e18:	4211      	tst	r1, r2
     e1a:	d1fc      	bne.n	e16 <_i2c_m_sync_transfer+0xf2>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     e1c:	8b7a      	ldrh	r2, [r7, #26]
     e1e:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
     e20:	07d9      	lsls	r1, r3, #31
     e22:	d400      	bmi.n	e26 <_i2c_m_sync_transfer+0x102>
     e24:	e0a0      	b.n	f68 <_i2c_m_sync_transfer+0x244>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     e26:	0793      	lsls	r3, r2, #30
     e28:	d53e      	bpl.n	ea8 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     e2a:	2301      	movs	r3, #1
     e2c:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
     e2e:	886b      	ldrh	r3, [r5, #2]
     e30:	2180      	movs	r1, #128	; 0x80
     e32:	0149      	lsls	r1, r1, #5
     e34:	430b      	orrs	r3, r1
     e36:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     e38:	886b      	ldrh	r3, [r5, #2]
     e3a:	497e      	ldr	r1, [pc, #504]	; (1034 <_i2c_m_sync_transfer+0x310>)
     e3c:	400b      	ands	r3, r1
     e3e:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     e40:	2001      	movs	r0, #1
     e42:	0003      	movs	r3, r0
     e44:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
     e46:	4258      	negs	r0, r3
     e48:	4158      	adcs	r0, r3
     e4a:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     e4c:	886b      	ldrh	r3, [r5, #2]
     e4e:	4a79      	ldr	r2, [pc, #484]	; (1034 <_i2c_m_sync_transfer+0x310>)
     e50:	4013      	ands	r3, r2
     e52:	806b      	strh	r3, [r5, #2]
}
     e54:	b003      	add	sp, #12
     e56:	bc3c      	pop	{r2, r3, r4, r5}
     e58:	4690      	mov	r8, r2
     e5a:	4699      	mov	r9, r3
     e5c:	46a2      	mov	sl, r4
     e5e:	46ab      	mov	fp, r5
     e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
     e62:	464b      	mov	r3, r9
     e64:	011b      	lsls	r3, r3, #4
     e66:	d5a1      	bpl.n	dac <_i2c_m_sync_transfer+0x88>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     e68:	687a      	ldr	r2, [r7, #4]
     e6a:	2380      	movs	r3, #128	; 0x80
     e6c:	02db      	lsls	r3, r3, #11
     e6e:	4313      	orrs	r3, r2
     e70:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e72:	2204      	movs	r2, #4
     e74:	69fb      	ldr	r3, [r7, #28]
     e76:	421a      	tst	r2, r3
     e78:	d1fc      	bne.n	e74 <_i2c_m_sync_transfer+0x150>
     e7a:	e79f      	b.n	dbc <_i2c_m_sync_transfer+0x98>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     e7c:	886a      	ldrh	r2, [r5, #2]
     e7e:	005b      	lsls	r3, r3, #1
     e80:	21ff      	movs	r1, #255	; 0xff
     e82:	400b      	ands	r3, r1
     e84:	39fe      	subs	r1, #254	; 0xfe
     e86:	4011      	ands	r1, r2
     e88:	4319      	orrs	r1, r3
     e8a:	2204      	movs	r2, #4
     e8c:	69fb      	ldr	r3, [r7, #28]
     e8e:	421a      	tst	r2, r3
     e90:	d1fc      	bne.n	e8c <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     e94:	2280      	movs	r2, #128	; 0x80
     e96:	01d2      	lsls	r2, r2, #7
     e98:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     e9a:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     e9c:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e9e:	2204      	movs	r2, #4
     ea0:	69fb      	ldr	r3, [r7, #28]
     ea2:	421a      	tst	r2, r3
     ea4:	d1fc      	bne.n	ea0 <_i2c_m_sync_transfer+0x17c>
     ea6:	e7a8      	b.n	dfa <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     ea8:	0753      	lsls	r3, r2, #29
     eaa:	d41b      	bmi.n	ee4 <_i2c_m_sync_transfer+0x1c0>
			if (msg->flags & I2C_M_TEN) {
     eac:	886b      	ldrh	r3, [r5, #2]
     eae:	055b      	lsls	r3, r3, #21
     eb0:	d535      	bpl.n	f1e <_i2c_m_sync_transfer+0x1fa>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     eb2:	882b      	ldrh	r3, [r5, #0]
     eb4:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     eb6:	2106      	movs	r1, #6
     eb8:	4019      	ands	r1, r3
     eba:	2204      	movs	r2, #4
     ebc:	69fb      	ldr	r3, [r7, #28]
     ebe:	421a      	tst	r2, r3
     ec0:	d1fc      	bne.n	ebc <_i2c_m_sync_transfer+0x198>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ec4:	2280      	movs	r2, #128	; 0x80
     ec6:	01d2      	lsls	r2, r2, #7
     ec8:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     eca:	22f1      	movs	r2, #241	; 0xf1
     ecc:	4313      	orrs	r3, r2
     ece:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     ed0:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ed2:	3aed      	subs	r2, #237	; 0xed
     ed4:	69fb      	ldr	r3, [r7, #28]
     ed6:	421a      	tst	r2, r3
     ed8:	d1fc      	bne.n	ed4 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
     eda:	886b      	ldrh	r3, [r5, #2]
     edc:	4a56      	ldr	r2, [pc, #344]	; (1038 <_i2c_m_sync_transfer+0x314>)
     ede:	4013      	ands	r3, r2
     ee0:	806b      	strh	r3, [r5, #2]
     ee2:	e066      	b.n	fb2 <_i2c_m_sync_transfer+0x28e>
				if (msg->len > 0) {
     ee4:	686b      	ldr	r3, [r5, #4]
     ee6:	2b00      	cmp	r3, #0
     ee8:	dd04      	ble.n	ef4 <_i2c_m_sync_transfer+0x1d0>
					msg->flags |= I2C_M_FAIL;
     eea:	886b      	ldrh	r3, [r5, #2]
     eec:	2280      	movs	r2, #128	; 0x80
     eee:	0152      	lsls	r2, r2, #5
     ef0:	4313      	orrs	r3, r2
     ef2:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     ef4:	886b      	ldrh	r3, [r5, #2]
     ef6:	b21b      	sxth	r3, r3
     ef8:	2b00      	cmp	r3, #0
     efa:	db06      	blt.n	f0a <_i2c_m_sync_transfer+0x1e6>
				msg->flags &= ~I2C_M_BUSY;
     efc:	886b      	ldrh	r3, [r5, #2]
     efe:	4a4d      	ldr	r2, [pc, #308]	; (1034 <_i2c_m_sync_transfer+0x310>)
     f00:	4013      	ands	r3, r2
     f02:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     f04:	2002      	movs	r0, #2
     f06:	4240      	negs	r0, r0
     f08:	e7a0      	b.n	e4c <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f0a:	687a      	ldr	r2, [r7, #4]
     f0c:	23c0      	movs	r3, #192	; 0xc0
     f0e:	029b      	lsls	r3, r3, #10
     f10:	4313      	orrs	r3, r2
     f12:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f14:	2304      	movs	r3, #4
     f16:	69fa      	ldr	r2, [r7, #28]
     f18:	4213      	tst	r3, r2
     f1a:	d1fc      	bne.n	f16 <_i2c_m_sync_transfer+0x1f2>
     f1c:	e7ee      	b.n	efc <_i2c_m_sync_transfer+0x1d8>
			if (msg->len == 0) {
     f1e:	686b      	ldr	r3, [r5, #4]
     f20:	2b00      	cmp	r3, #0
     f22:	d112      	bne.n	f4a <_i2c_m_sync_transfer+0x226>
				if (msg->flags & I2C_M_STOP) {
     f24:	886b      	ldrh	r3, [r5, #2]
     f26:	b21b      	sxth	r3, r3
     f28:	2b00      	cmp	r3, #0
     f2a:	db04      	blt.n	f36 <_i2c_m_sync_transfer+0x212>
				msg->flags &= ~I2C_M_BUSY;
     f2c:	886b      	ldrh	r3, [r5, #2]
     f2e:	4a41      	ldr	r2, [pc, #260]	; (1034 <_i2c_m_sync_transfer+0x310>)
     f30:	4013      	ands	r3, r2
     f32:	806b      	strh	r3, [r5, #2]
     f34:	e03d      	b.n	fb2 <_i2c_m_sync_transfer+0x28e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f36:	687a      	ldr	r2, [r7, #4]
     f38:	23c0      	movs	r3, #192	; 0xc0
     f3a:	029b      	lsls	r3, r3, #10
     f3c:	4313      	orrs	r3, r2
     f3e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f40:	2204      	movs	r2, #4
     f42:	69fb      	ldr	r3, [r7, #28]
     f44:	421a      	tst	r2, r3
     f46:	d1fc      	bne.n	f42 <_i2c_m_sync_transfer+0x21e>
     f48:	e7f0      	b.n	f2c <_i2c_m_sync_transfer+0x208>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     f4a:	68ab      	ldr	r3, [r5, #8]
     f4c:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     f4e:	2328      	movs	r3, #40	; 0x28
     f50:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f52:	2204      	movs	r2, #4
     f54:	69fb      	ldr	r3, [r7, #28]
     f56:	421a      	tst	r2, r3
     f58:	d1fc      	bne.n	f54 <_i2c_m_sync_transfer+0x230>
				msg->buffer++;
     f5a:	68ab      	ldr	r3, [r5, #8]
     f5c:	3301      	adds	r3, #1
     f5e:	60ab      	str	r3, [r5, #8]
				msg->len--;
     f60:	686b      	ldr	r3, [r5, #4]
     f62:	3b01      	subs	r3, #1
     f64:	606b      	str	r3, [r5, #4]
     f66:	e024      	b.n	fb2 <_i2c_m_sync_transfer+0x28e>
	} else if (flags & SB_FLAG) {
     f68:	079b      	lsls	r3, r3, #30
     f6a:	d522      	bpl.n	fb2 <_i2c_m_sync_transfer+0x28e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     f6c:	686b      	ldr	r3, [r5, #4]
     f6e:	2b00      	cmp	r3, #0
     f70:	d040      	beq.n	ff4 <_i2c_m_sync_transfer+0x2d0>
     f72:	0752      	lsls	r2, r2, #29
     f74:	d43e      	bmi.n	ff4 <_i2c_m_sync_transfer+0x2d0>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     f76:	0136      	lsls	r6, r6, #4
     f78:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
     f7a:	3b01      	subs	r3, #1
     f7c:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     f7e:	2b00      	cmp	r3, #0
     f80:	d000      	beq.n	f84 <_i2c_m_sync_transfer+0x260>
     f82:	e11f      	b.n	11c4 <_i2c_m_sync_transfer+0x4a0>
     f84:	2e00      	cmp	r6, #0
     f86:	d100      	bne.n	f8a <_i2c_m_sync_transfer+0x266>
     f88:	e122      	b.n	11d0 <_i2c_m_sync_transfer+0x4ac>
				if (msg->flags & I2C_M_STOP) {
     f8a:	886b      	ldrh	r3, [r5, #2]
     f8c:	b21b      	sxth	r3, r3
     f8e:	2b00      	cmp	r3, #0
     f90:	db1d      	blt.n	fce <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
     f92:	886b      	ldrh	r3, [r5, #2]
     f94:	4a27      	ldr	r2, [pc, #156]	; (1034 <_i2c_m_sync_transfer+0x310>)
     f96:	4013      	ands	r3, r2
     f98:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     f9a:	68a9      	ldr	r1, [r5, #8]
     f9c:	1c4b      	adds	r3, r1, #1
     f9e:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fa0:	2204      	movs	r2, #4
     fa2:	69fb      	ldr	r3, [r7, #28]
     fa4:	421a      	tst	r2, r3
     fa6:	d1fc      	bne.n	fa2 <_i2c_m_sync_transfer+0x27e>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     fa8:	2328      	movs	r3, #40	; 0x28
     faa:	5cfb      	ldrb	r3, [r7, r3]
     fac:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     fae:	2302      	movs	r3, #2
     fb0:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     fb2:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     fb4:	2380      	movs	r3, #128	; 0x80
     fb6:	005b      	lsls	r3, r3, #1
     fb8:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     fba:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fbc:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
     fbe:	3bff      	subs	r3, #255	; 0xff
     fc0:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
     fc2:	3301      	adds	r3, #1
     fc4:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
     fc6:	3326      	adds	r3, #38	; 0x26
     fc8:	469b      	mov	fp, r3
     fca:	9601      	str	r6, [sp, #4]
     fcc:	e0c2      	b.n	1154 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     fce:	687b      	ldr	r3, [r7, #4]
     fd0:	4a18      	ldr	r2, [pc, #96]	; (1034 <_i2c_m_sync_transfer+0x310>)
     fd2:	4013      	ands	r3, r2
     fd4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fd6:	3206      	adds	r2, #6
     fd8:	32ff      	adds	r2, #255	; 0xff
     fda:	69fb      	ldr	r3, [r7, #28]
     fdc:	421a      	tst	r2, r3
     fde:	d1fc      	bne.n	fda <_i2c_m_sync_transfer+0x2b6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     fe0:	687a      	ldr	r2, [r7, #4]
     fe2:	23c0      	movs	r3, #192	; 0xc0
     fe4:	029b      	lsls	r3, r3, #10
     fe6:	4313      	orrs	r3, r2
     fe8:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fea:	2204      	movs	r2, #4
     fec:	69fb      	ldr	r3, [r7, #28]
     fee:	421a      	tst	r2, r3
     ff0:	d1fc      	bne.n	fec <_i2c_m_sync_transfer+0x2c8>
     ff2:	e7ce      	b.n	f92 <_i2c_m_sync_transfer+0x26e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ff4:	2302      	movs	r3, #2
     ff6:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     ff8:	2002      	movs	r0, #2
     ffa:	4240      	negs	r0, r0
     ffc:	e726      	b.n	e4c <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     ffe:	6862      	ldr	r2, [r4, #4]
    1000:	23c0      	movs	r3, #192	; 0xc0
    1002:	029b      	lsls	r3, r3, #10
    1004:	4313      	orrs	r3, r2
    1006:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1008:	2204      	movs	r2, #4
    100a:	69e3      	ldr	r3, [r4, #28]
    100c:	421a      	tst	r2, r3
    100e:	d1fc      	bne.n	100a <_i2c_m_sync_transfer+0x2e6>
    1010:	e0b5      	b.n	117e <_i2c_m_sync_transfer+0x45a>
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	00002fdc 	.word	0x00002fdc
    1018:	000005bf 	.word	0x000005bf
    101c:	000007f5 	.word	0x000007f5
    1020:	000005c1 	.word	0x000005c1
    1024:	00000594 	.word	0x00000594
    1028:	fffbffff 	.word	0xfffbffff
    102c:	000007fe 	.word	0x000007fe
    1030:	0000ffff 	.word	0x0000ffff
    1034:	fffffeff 	.word	0xfffffeff
    1038:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    103c:	4202      	tst	r2, r0
    103e:	d11b      	bne.n	1078 <_i2c_m_sync_transfer+0x354>
			if (msg->flags & I2C_M_TEN) {
    1040:	886b      	ldrh	r3, [r5, #2]
    1042:	055b      	lsls	r3, r3, #21
    1044:	d535      	bpl.n	10b2 <_i2c_m_sync_transfer+0x38e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1046:	882b      	ldrh	r3, [r5, #0]
    1048:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    104a:	2006      	movs	r0, #6
    104c:	4018      	ands	r0, r3
    104e:	69e3      	ldr	r3, [r4, #28]
    1050:	421a      	tst	r2, r3
    1052:	d1fc      	bne.n	104e <_i2c_m_sync_transfer+0x32a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1054:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1056:	2680      	movs	r6, #128	; 0x80
    1058:	01f6      	lsls	r6, r6, #7
    105a:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
    105c:	26f1      	movs	r6, #241	; 0xf1
    105e:	4333      	orrs	r3, r6
    1060:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1062:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1064:	69e3      	ldr	r3, [r4, #28]
    1066:	421a      	tst	r2, r3
    1068:	d1fc      	bne.n	1064 <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_TEN;
    106a:	886b      	ldrh	r3, [r5, #2]
    106c:	4878      	ldr	r0, [pc, #480]	; (1250 <_i2c_m_sync_transfer+0x52c>)
    106e:	4003      	ands	r3, r0
    1070:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1072:	2300      	movs	r3, #0
    1074:	9301      	str	r3, [sp, #4]
    1076:	e06d      	b.n	1154 <_i2c_m_sync_transfer+0x430>
				if (msg->len > 0) {
    1078:	686b      	ldr	r3, [r5, #4]
    107a:	2b00      	cmp	r3, #0
    107c:	dd04      	ble.n	1088 <_i2c_m_sync_transfer+0x364>
					msg->flags |= I2C_M_FAIL;
    107e:	886b      	ldrh	r3, [r5, #2]
    1080:	2080      	movs	r0, #128	; 0x80
    1082:	0140      	lsls	r0, r0, #5
    1084:	4303      	orrs	r3, r0
    1086:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1088:	886b      	ldrh	r3, [r5, #2]
    108a:	b21b      	sxth	r3, r3
    108c:	2b00      	cmp	r3, #0
    108e:	db07      	blt.n	10a0 <_i2c_m_sync_transfer+0x37c>
				msg->flags &= ~I2C_M_BUSY;
    1090:	886b      	ldrh	r3, [r5, #2]
    1092:	4870      	ldr	r0, [pc, #448]	; (1254 <_i2c_m_sync_transfer+0x530>)
    1094:	4003      	ands	r3, r0
    1096:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1098:	2302      	movs	r3, #2
    109a:	425b      	negs	r3, r3
    109c:	9301      	str	r3, [sp, #4]
    109e:	e059      	b.n	1154 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10a0:	6860      	ldr	r0, [r4, #4]
    10a2:	23c0      	movs	r3, #192	; 0xc0
    10a4:	029b      	lsls	r3, r3, #10
    10a6:	4303      	orrs	r3, r0
    10a8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10aa:	69e3      	ldr	r3, [r4, #28]
    10ac:	421a      	tst	r2, r3
    10ae:	d1fc      	bne.n	10aa <_i2c_m_sync_transfer+0x386>
    10b0:	e7ee      	b.n	1090 <_i2c_m_sync_transfer+0x36c>
			if (msg->len == 0) {
    10b2:	686b      	ldr	r3, [r5, #4]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d113      	bne.n	10e0 <_i2c_m_sync_transfer+0x3bc>
				if (msg->flags & I2C_M_STOP) {
    10b8:	886b      	ldrh	r3, [r5, #2]
    10ba:	b21b      	sxth	r3, r3
    10bc:	2b00      	cmp	r3, #0
    10be:	db06      	blt.n	10ce <_i2c_m_sync_transfer+0x3aa>
				msg->flags &= ~I2C_M_BUSY;
    10c0:	886b      	ldrh	r3, [r5, #2]
    10c2:	4864      	ldr	r0, [pc, #400]	; (1254 <_i2c_m_sync_transfer+0x530>)
    10c4:	4003      	ands	r3, r0
    10c6:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    10c8:	2300      	movs	r3, #0
    10ca:	9301      	str	r3, [sp, #4]
    10cc:	e042      	b.n	1154 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10ce:	6860      	ldr	r0, [r4, #4]
    10d0:	23c0      	movs	r3, #192	; 0xc0
    10d2:	029b      	lsls	r3, r3, #10
    10d4:	4303      	orrs	r3, r0
    10d6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10d8:	69e3      	ldr	r3, [r4, #28]
    10da:	421a      	tst	r2, r3
    10dc:	d1fc      	bne.n	10d8 <_i2c_m_sync_transfer+0x3b4>
    10de:	e7ef      	b.n	10c0 <_i2c_m_sync_transfer+0x39c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    10e0:	68ab      	ldr	r3, [r5, #8]
    10e2:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    10e4:	4658      	mov	r0, fp
    10e6:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10e8:	69e3      	ldr	r3, [r4, #28]
    10ea:	421a      	tst	r2, r3
    10ec:	d1fc      	bne.n	10e8 <_i2c_m_sync_transfer+0x3c4>
				msg->buffer++;
    10ee:	68ab      	ldr	r3, [r5, #8]
    10f0:	3301      	adds	r3, #1
    10f2:	60ab      	str	r3, [r5, #8]
				msg->len--;
    10f4:	686b      	ldr	r3, [r5, #4]
    10f6:	3b01      	subs	r3, #1
    10f8:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    10fa:	2300      	movs	r3, #0
    10fc:	9301      	str	r3, [sp, #4]
    10fe:	e029      	b.n	1154 <_i2c_m_sync_transfer+0x430>
	return I2C_OK;
    1100:	2600      	movs	r6, #0
    1102:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
    1104:	464e      	mov	r6, r9
    1106:	421e      	tst	r6, r3
    1108:	d024      	beq.n	1154 <_i2c_m_sync_transfer+0x430>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    110a:	686b      	ldr	r3, [r5, #4]
    110c:	2b00      	cmp	r3, #0
    110e:	d04d      	beq.n	11ac <_i2c_m_sync_transfer+0x488>
    1110:	4202      	tst	r2, r0
    1112:	d14b      	bne.n	11ac <_i2c_m_sync_transfer+0x488>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1114:	0eff      	lsrs	r7, r7, #27
    1116:	4660      	mov	r0, ip
    1118:	4007      	ands	r7, r0
			msg->len--;
    111a:	3b01      	subs	r3, #1
    111c:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    111e:	2b00      	cmp	r3, #0
    1120:	d000      	beq.n	1124 <_i2c_m_sync_transfer+0x400>
    1122:	e082      	b.n	122a <_i2c_m_sync_transfer+0x506>
    1124:	2f00      	cmp	r7, #0
    1126:	d100      	bne.n	112a <_i2c_m_sync_transfer+0x406>
    1128:	e085      	b.n	1236 <_i2c_m_sync_transfer+0x512>
				if (msg->flags & I2C_M_STOP) {
    112a:	886b      	ldrh	r3, [r5, #2]
    112c:	b21b      	sxth	r3, r3
    112e:	2b00      	cmp	r3, #0
    1130:	db2c      	blt.n	118c <_i2c_m_sync_transfer+0x468>
				msg->flags &= ~I2C_M_BUSY;
    1132:	886b      	ldrh	r3, [r5, #2]
    1134:	4847      	ldr	r0, [pc, #284]	; (1254 <_i2c_m_sync_transfer+0x530>)
    1136:	4003      	ands	r3, r0
    1138:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    113a:	68a8      	ldr	r0, [r5, #8]
    113c:	1c43      	adds	r3, r0, #1
    113e:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1140:	69e3      	ldr	r3, [r4, #28]
    1142:	421a      	tst	r2, r3
    1144:	d1fc      	bne.n	1140 <_i2c_m_sync_transfer+0x41c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1146:	465b      	mov	r3, fp
    1148:	5ce3      	ldrb	r3, [r4, r3]
    114a:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    114c:	464b      	mov	r3, r9
    114e:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1150:	2300      	movs	r3, #0
    1152:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1154:	886b      	ldrh	r3, [r5, #2]
    1156:	4650      	mov	r0, sl
    1158:	4203      	tst	r3, r0
    115a:	d02d      	beq.n	11b8 <_i2c_m_sync_transfer+0x494>
	void *   hw      = i2c_dev->hw;
    115c:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    115e:	7e33      	ldrb	r3, [r6, #24]
    1160:	b2db      	uxtb	r3, r3
    1162:	483d      	ldr	r0, [pc, #244]	; (1258 <_i2c_m_sync_transfer+0x534>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1164:	4219      	tst	r1, r3
    1166:	d141      	bne.n	11ec <_i2c_m_sync_transfer+0x4c8>
    1168:	7e33      	ldrb	r3, [r6, #24]
    116a:	b2db      	uxtb	r3, r3
    116c:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    116e:	2800      	cmp	r0, #0
    1170:	d1f8      	bne.n	1164 <_i2c_m_sync_transfer+0x440>
			if (msg->flags & I2C_M_STOP) {
    1172:	4643      	mov	r3, r8
    1174:	885b      	ldrh	r3, [r3, #2]
    1176:	b21b      	sxth	r3, r3
    1178:	2b00      	cmp	r3, #0
    117a:	da00      	bge.n	117e <_i2c_m_sync_transfer+0x45a>
    117c:	e73f      	b.n	ffe <_i2c_m_sync_transfer+0x2da>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    117e:	886b      	ldrh	r3, [r5, #2]
    1180:	4a34      	ldr	r2, [pc, #208]	; (1254 <_i2c_m_sync_transfer+0x530>)
    1182:	4013      	ands	r3, r2
    1184:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    1186:	2005      	movs	r0, #5
    1188:	4240      	negs	r0, r0
			return ret;
    118a:	e663      	b.n	e54 <_i2c_m_sync_transfer+0x130>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    118c:	6863      	ldr	r3, [r4, #4]
    118e:	4831      	ldr	r0, [pc, #196]	; (1254 <_i2c_m_sync_transfer+0x530>)
    1190:	4003      	ands	r3, r0
    1192:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1194:	69e3      	ldr	r3, [r4, #28]
    1196:	421a      	tst	r2, r3
    1198:	d1fc      	bne.n	1194 <_i2c_m_sync_transfer+0x470>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    119a:	6860      	ldr	r0, [r4, #4]
    119c:	23c0      	movs	r3, #192	; 0xc0
    119e:	029b      	lsls	r3, r3, #10
    11a0:	4303      	orrs	r3, r0
    11a2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11a4:	69e3      	ldr	r3, [r4, #28]
    11a6:	421a      	tst	r2, r3
    11a8:	d1fc      	bne.n	11a4 <_i2c_m_sync_transfer+0x480>
    11aa:	e7c2      	b.n	1132 <_i2c_m_sync_transfer+0x40e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    11ac:	464b      	mov	r3, r9
    11ae:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    11b0:	2302      	movs	r3, #2
    11b2:	425b      	negs	r3, r3
    11b4:	9301      	str	r3, [sp, #4]
    11b6:	e7cd      	b.n	1154 <_i2c_m_sync_transfer+0x430>
    11b8:	9e01      	ldr	r6, [sp, #4]
    11ba:	0030      	movs	r0, r6
    11bc:	e64a      	b.n	e54 <_i2c_m_sync_transfer+0x130>
		return I2C_ERR_BUSY;
    11be:	2006      	movs	r0, #6
    11c0:	4240      	negs	r0, r0
    11c2:	e647      	b.n	e54 <_i2c_m_sync_transfer+0x130>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    11c4:	2b01      	cmp	r3, #1
    11c6:	d000      	beq.n	11ca <_i2c_m_sync_transfer+0x4a6>
    11c8:	e6e7      	b.n	f9a <_i2c_m_sync_transfer+0x276>
    11ca:	2e00      	cmp	r6, #0
    11cc:	d100      	bne.n	11d0 <_i2c_m_sync_transfer+0x4ac>
    11ce:	e6e4      	b.n	f9a <_i2c_m_sync_transfer+0x276>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    11d0:	687a      	ldr	r2, [r7, #4]
    11d2:	2380      	movs	r3, #128	; 0x80
    11d4:	02db      	lsls	r3, r3, #11
    11d6:	4313      	orrs	r3, r2
    11d8:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11da:	2204      	movs	r2, #4
    11dc:	69fb      	ldr	r3, [r7, #28]
    11de:	421a      	tst	r2, r3
    11e0:	d1fc      	bne.n	11dc <_i2c_m_sync_transfer+0x4b8>
			if (msg->len == 0) {
    11e2:	686b      	ldr	r3, [r5, #4]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d100      	bne.n	11ea <_i2c_m_sync_transfer+0x4c6>
    11e8:	e6cf      	b.n	f8a <_i2c_m_sync_transfer+0x266>
    11ea:	e6d6      	b.n	f9a <_i2c_m_sync_transfer+0x276>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    11ec:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11ee:	69e0      	ldr	r0, [r4, #28]
    11f0:	4202      	tst	r2, r0
    11f2:	d1fc      	bne.n	11ee <_i2c_m_sync_transfer+0x4ca>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    11f4:	8b60      	ldrh	r0, [r4, #26]
    11f6:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
    11f8:	4666      	mov	r6, ip
    11fa:	421e      	tst	r6, r3
    11fc:	d100      	bne.n	1200 <_i2c_m_sync_transfer+0x4dc>
    11fe:	e77f      	b.n	1100 <_i2c_m_sync_transfer+0x3dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1200:	464b      	mov	r3, r9
    1202:	4203      	tst	r3, r0
    1204:	d100      	bne.n	1208 <_i2c_m_sync_transfer+0x4e4>
    1206:	e719      	b.n	103c <_i2c_m_sync_transfer+0x318>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1208:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    120a:	886b      	ldrh	r3, [r5, #2]
    120c:	2680      	movs	r6, #128	; 0x80
    120e:	0176      	lsls	r6, r6, #5
    1210:	4333      	orrs	r3, r6
    1212:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1214:	886b      	ldrh	r3, [r5, #2]
    1216:	4e0f      	ldr	r6, [pc, #60]	; (1254 <_i2c_m_sync_transfer+0x530>)
    1218:	4033      	ands	r3, r6
    121a:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    121c:	4663      	mov	r3, ip
    121e:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
    1220:	4246      	negs	r6, r0
    1222:	4146      	adcs	r6, r0
    1224:	1f73      	subs	r3, r6, #5
    1226:	9301      	str	r3, [sp, #4]
    1228:	e794      	b.n	1154 <_i2c_m_sync_transfer+0x430>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    122a:	2b01      	cmp	r3, #1
    122c:	d000      	beq.n	1230 <_i2c_m_sync_transfer+0x50c>
    122e:	e784      	b.n	113a <_i2c_m_sync_transfer+0x416>
    1230:	2f00      	cmp	r7, #0
    1232:	d100      	bne.n	1236 <_i2c_m_sync_transfer+0x512>
    1234:	e781      	b.n	113a <_i2c_m_sync_transfer+0x416>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1236:	6860      	ldr	r0, [r4, #4]
    1238:	2380      	movs	r3, #128	; 0x80
    123a:	02db      	lsls	r3, r3, #11
    123c:	4303      	orrs	r3, r0
    123e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1240:	69e3      	ldr	r3, [r4, #28]
    1242:	421a      	tst	r2, r3
    1244:	d1fc      	bne.n	1240 <_i2c_m_sync_transfer+0x51c>
			if (msg->len == 0) {
    1246:	686b      	ldr	r3, [r5, #4]
    1248:	2b00      	cmp	r3, #0
    124a:	d100      	bne.n	124e <_i2c_m_sync_transfer+0x52a>
    124c:	e76d      	b.n	112a <_i2c_m_sync_transfer+0x406>
    124e:	e774      	b.n	113a <_i2c_m_sync_transfer+0x416>
    1250:	fffffbff 	.word	0xfffffbff
    1254:	fffffeff 	.word	0xfffffeff
    1258:	0000ffff 	.word	0x0000ffff

0000125c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    125c:	4b0e      	ldr	r3, [pc, #56]	; (1298 <_sysctrl_init_sources+0x3c>)
    125e:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1260:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1262:	480e      	ldr	r0, [pc, #56]	; (129c <_sysctrl_init_sources+0x40>)
    1264:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1266:	0f89      	lsrs	r1, r1, #30
    1268:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    126a:	480d      	ldr	r0, [pc, #52]	; (12a0 <_sysctrl_init_sources+0x44>)
    126c:	4301      	orrs	r1, r0
    126e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1270:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1272:	699a      	ldr	r2, [r3, #24]
    1274:	2102      	movs	r1, #2
    1276:	430a      	orrs	r2, r1
    1278:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    127a:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    127c:	311d      	adds	r1, #29
    127e:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1280:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1282:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1284:	2208      	movs	r2, #8
    1286:	68cb      	ldr	r3, [r1, #12]
    1288:	421a      	tst	r2, r3
    128a:	d0fc      	beq.n	1286 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    128c:	4a02      	ldr	r2, [pc, #8]	; (1298 <_sysctrl_init_sources+0x3c>)
    128e:	6a13      	ldr	r3, [r2, #32]
    1290:	2180      	movs	r1, #128	; 0x80
    1292:	430b      	orrs	r3, r1
    1294:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1296:	4770      	bx	lr
    1298:	40000800 	.word	0x40000800
    129c:	0fff0000 	.word	0x0fff0000
    12a0:	00000302 	.word	0x00000302

000012a4 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    12a4:	4a02      	ldr	r2, [pc, #8]	; (12b0 <_sysctrl_init_referenced_generators+0xc>)
    12a6:	6993      	ldr	r3, [r2, #24]
    12a8:	2102      	movs	r1, #2
    12aa:	438b      	bics	r3, r1
    12ac:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    12ae:	4770      	bx	lr
    12b0:	40000800 	.word	0x40000800

000012b4 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    12b4:	4b02      	ldr	r3, [pc, #8]	; (12c0 <_delay_init+0xc>)
    12b6:	4a03      	ldr	r2, [pc, #12]	; (12c4 <_delay_init+0x10>)
    12b8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    12ba:	2205      	movs	r2, #5
    12bc:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    12be:	4770      	bx	lr
    12c0:	e000e010 	.word	0xe000e010
    12c4:	00ffffff 	.word	0x00ffffff

000012c8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    12c8:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
    12ca:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    12cc:	1e5e      	subs	r6, r3, #1
    12ce:	b2f6      	uxtb	r6, r6
    12d0:	2b00      	cmp	r3, #0
    12d2:	d013      	beq.n	12fc <_delay_cycles+0x34>
    12d4:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
    12d6:	4a0e      	ldr	r2, [pc, #56]	; (1310 <_delay_cycles+0x48>)
    12d8:	4d0e      	ldr	r5, [pc, #56]	; (1314 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    12da:	2080      	movs	r0, #128	; 0x80
    12dc:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
    12de:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    12e0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    12e2:	6813      	ldr	r3, [r2, #0]
    12e4:	4203      	tst	r3, r0
    12e6:	d0fc      	beq.n	12e2 <_delay_cycles+0x1a>
	while (n--) {
    12e8:	3c01      	subs	r4, #1
    12ea:	b2e4      	uxtb	r4, r4
    12ec:	2cff      	cmp	r4, #255	; 0xff
    12ee:	d1f6      	bne.n	12de <_delay_cycles+0x16>
    12f0:	0633      	lsls	r3, r6, #24
    12f2:	1af6      	subs	r6, r6, r3
    12f4:	4b08      	ldr	r3, [pc, #32]	; (1318 <_delay_cycles+0x50>)
    12f6:	469c      	mov	ip, r3
    12f8:	4461      	add	r1, ip
    12fa:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    12fc:	4b04      	ldr	r3, [pc, #16]	; (1310 <_delay_cycles+0x48>)
    12fe:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1300:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1302:	0019      	movs	r1, r3
    1304:	2280      	movs	r2, #128	; 0x80
    1306:	0252      	lsls	r2, r2, #9
    1308:	680b      	ldr	r3, [r1, #0]
    130a:	4213      	tst	r3, r2
    130c:	d0fc      	beq.n	1308 <_delay_cycles+0x40>
		;
}
    130e:	bd70      	pop	{r4, r5, r6, pc}
    1310:	e000e010 	.word	0xe000e010
    1314:	00ffffff 	.word	0x00ffffff
    1318:	ff000001 	.word	0xff000001

0000131c <lcs>:
#include "GestureClassifier.h"

#define ERROR_GAP 1500
const int ARRAY_LIMIT = 20;
// routine for comparing two sequences 
int lcs(int *a,int *b,int n,int m, int *lcss){
    131c:	b5f0      	push	{r4, r5, r6, r7, lr}
    131e:	46de      	mov	lr, fp
    1320:	4657      	mov	r7, sl
    1322:	464e      	mov	r6, r9
    1324:	4645      	mov	r5, r8
    1326:	b5e0      	push	{r5, r6, r7, lr}
    1328:	b08b      	sub	sp, #44	; 0x2c
    132a:	af00      	add	r7, sp, #0
    132c:	6038      	str	r0, [r7, #0]
    132e:	60b9      	str	r1, [r7, #8]
    1330:	0015      	movs	r5, r2
    1332:	617a      	str	r2, [r7, #20]
	int l[n+1][m+1],i,j; for(i=0;i<=n;i++){
    1334:	1c5a      	adds	r2, r3, #1
    1336:	0091      	lsls	r1, r2, #2
    1338:	000c      	movs	r4, r1
    133a:	61b9      	str	r1, [r7, #24]
    133c:	0029      	movs	r1, r5
    133e:	3101      	adds	r1, #1
    1340:	0089      	lsls	r1, r1, #2
    1342:	434a      	muls	r2, r1
    1344:	320a      	adds	r2, #10
    1346:	08d2      	lsrs	r2, r2, #3
    1348:	00d2      	lsls	r2, r2, #3
    134a:	4669      	mov	r1, sp
    134c:	1a8a      	subs	r2, r1, r2
    134e:	4695      	mov	sp, r2
    1350:	60fa      	str	r2, [r7, #12]
    1352:	2d00      	cmp	r5, #0
    1354:	db69      	blt.n	142a <lcs+0x10e>
    1356:	4262      	negs	r2, r4
    1358:	613a      	str	r2, [r7, #16]
    135a:	3804      	subs	r0, #4
    135c:	4682      	mov	sl, r0
			if(i==0 || j==0){
				l[i][j]=0;
			}
			else if(a[i-1]==b[j-1]){
				l[i][j]=l[i-1][j-1]+1;
			} else l[i][j]=max(l[i-1][j],l[i][j-1]);
    135e:	4693      	mov	fp, r2
    1360:	2200      	movs	r2, #0
    1362:	623a      	str	r2, [r7, #32]
    1364:	61fa      	str	r2, [r7, #28]
    1366:	4691      	mov	r9, r2
    1368:	4690      	mov	r8, r2
    136a:	3a04      	subs	r2, #4
    136c:	1b12      	subs	r2, r2, r4
    136e:	607a      	str	r2, [r7, #4]
    1370:	464c      	mov	r4, r9
    1372:	469c      	mov	ip, r3
    1374:	e043      	b.n	13fe <lcs+0xe2>
				l[i][j]=0;
    1376:	464b      	mov	r3, r9
    1378:	18d3      	adds	r3, r2, r3
    137a:	69fc      	ldr	r4, [r7, #28]
    137c:	2500      	movs	r5, #0
    137e:	511d      	str	r5, [r3, r4]
    1380:	e008      	b.n	1394 <lcs+0x78>
				l[i][j]=l[i-1][j-1]+1;
    1382:	464b      	mov	r3, r9
    1384:	18d4      	adds	r4, r2, r3
    1386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1388:	681b      	ldr	r3, [r3, #0]
    138a:	3301      	adds	r3, #1
    138c:	6a3d      	ldr	r5, [r7, #32]
    138e:	5163      	str	r3, [r4, r5]
    1390:	e000      	b.n	1394 <lcs+0x78>
			} else l[i][j]=max(l[i-1][j],l[i][j-1]);
    1392:	6033      	str	r3, [r6, #0]
		for(j=0;j<=m;j++){
    1394:	3101      	adds	r1, #1
    1396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1398:	3304      	adds	r3, #4
    139a:	627b      	str	r3, [r7, #36]	; 0x24
    139c:	3204      	adds	r2, #4
    139e:	3004      	adds	r0, #4
    13a0:	458c      	cmp	ip, r1
    13a2:	db14      	blt.n	13ce <lcs+0xb2>
			if(i==0 || j==0){
    13a4:	4643      	mov	r3, r8
    13a6:	2b00      	cmp	r3, #0
    13a8:	d0e5      	beq.n	1376 <lcs+0x5a>
    13aa:	2900      	cmp	r1, #0
    13ac:	d0e3      	beq.n	1376 <lcs+0x5a>
			else if(a[i-1]==b[j-1]){
    13ae:	4653      	mov	r3, sl
    13b0:	681b      	ldr	r3, [r3, #0]
    13b2:	6804      	ldr	r4, [r0, #0]
    13b4:	42a3      	cmp	r3, r4
    13b6:	d0e4      	beq.n	1382 <lcs+0x66>
    13b8:	0016      	movs	r6, r2
			} else l[i][j]=max(l[i-1][j],l[i][j-1]);
    13ba:	464b      	mov	r3, r9
    13bc:	18d3      	adds	r3, r2, r3
    13be:	1f14      	subs	r4, r2, #4
	return lcs;
}

// routine to return maximum of two integers
int max(int a,int b){
	return (a>b)? a:b;
    13c0:	6824      	ldr	r4, [r4, #0]
    13c2:	465d      	mov	r5, fp
    13c4:	595b      	ldr	r3, [r3, r5]
    13c6:	42a3      	cmp	r3, r4
    13c8:	dae3      	bge.n	1392 <lcs+0x76>
    13ca:	0023      	movs	r3, r4
    13cc:	e7e1      	b.n	1392 <lcs+0x76>
    13ce:	464c      	mov	r4, r9
	int l[n+1][m+1],i,j; for(i=0;i<=n;i++){
    13d0:	2301      	movs	r3, #1
    13d2:	4699      	mov	r9, r3
    13d4:	44c8      	add	r8, r9
    13d6:	693b      	ldr	r3, [r7, #16]
    13d8:	4699      	mov	r9, r3
    13da:	444c      	add	r4, r9
    13dc:	69fb      	ldr	r3, [r7, #28]
    13de:	0019      	movs	r1, r3
    13e0:	69ba      	ldr	r2, [r7, #24]
    13e2:	4691      	mov	r9, r2
    13e4:	4449      	add	r1, r9
    13e6:	61f9      	str	r1, [r7, #28]
    13e8:	6a3b      	ldr	r3, [r7, #32]
    13ea:	0019      	movs	r1, r3
    13ec:	4449      	add	r1, r9
    13ee:	6239      	str	r1, [r7, #32]
    13f0:	44cb      	add	fp, r9
    13f2:	2304      	movs	r3, #4
    13f4:	4699      	mov	r9, r3
    13f6:	44ca      	add	sl, r9
    13f8:	697b      	ldr	r3, [r7, #20]
    13fa:	4543      	cmp	r3, r8
    13fc:	db14      	blt.n	1428 <lcs+0x10c>
		for(j=0;j<=m;j++){
    13fe:	4663      	mov	r3, ip
    1400:	2b00      	cmp	r3, #0
    1402:	dbe5      	blt.n	13d0 <lcs+0xb4>
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	6a3a      	ldr	r2, [r7, #32]
    1408:	4691      	mov	r9, r2
    140a:	444b      	add	r3, r9
    140c:	001d      	movs	r5, r3
    140e:	68f9      	ldr	r1, [r7, #12]
    1410:	4689      	mov	r9, r1
    1412:	444d      	add	r5, r9
    1414:	69bb      	ldr	r3, [r7, #24]
    1416:	445b      	add	r3, fp
    1418:	001a      	movs	r2, r3
    141a:	444a      	add	r2, r9
    141c:	68bb      	ldr	r3, [r7, #8]
    141e:	1f18      	subs	r0, r3, #4
    1420:	2100      	movs	r1, #0
    1422:	627d      	str	r5, [r7, #36]	; 0x24
    1424:	46a1      	mov	r9, r4
    1426:	e7bd      	b.n	13a4 <lcs+0x88>
    1428:	4663      	mov	r3, ip
	int index=l[n][m];
    142a:	69ba      	ldr	r2, [r7, #24]
    142c:	0892      	lsrs	r2, r2, #2
    142e:	4694      	mov	ip, r2
    1430:	697d      	ldr	r5, [r7, #20]
    1432:	002a      	movs	r2, r5
    1434:	4661      	mov	r1, ip
    1436:	434a      	muls	r2, r1
    1438:	18d2      	adds	r2, r2, r3
    143a:	0092      	lsls	r2, r2, #2
    143c:	68f9      	ldr	r1, [r7, #12]
    143e:	5854      	ldr	r4, [r2, r1]
	while(p>=0){
    1440:	1e60      	subs	r0, r4, #1
    1442:	d42e      	bmi.n	14a2 <lcs+0x186>
    1444:	46a3      	mov	fp, r4
    1446:	000c      	movs	r4, r1
    1448:	683a      	ldr	r2, [r7, #0]
    144a:	4691      	mov	r9, r2
    144c:	68ba      	ldr	r2, [r7, #8]
    144e:	4692      	mov	sl, r2
    1450:	e009      	b.n	1466 <lcs+0x14a>
			lcss[p]=a[i-1];
    1452:	0082      	lsls	r2, r0, #2
    1454:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    1456:	5191      	str	r1, [r2, r6]
			i--;
    1458:	3d01      	subs	r5, #1
			j--;
    145a:	3b01      	subs	r3, #1
			p--;
    145c:	3801      	subs	r0, #1
    145e:	e000      	b.n	1462 <lcs+0x146>
			i--;
    1460:	0035      	movs	r5, r6
	while(p>=0){
    1462:	2800      	cmp	r0, #0
    1464:	db1c      	blt.n	14a0 <lcs+0x184>
		if(a[i-1]==b[j-1]){
    1466:	4a1b      	ldr	r2, [pc, #108]	; (14d4 <lcs+0x1b8>)
    1468:	18aa      	adds	r2, r5, r2
    146a:	0092      	lsls	r2, r2, #2
    146c:	4649      	mov	r1, r9
    146e:	5851      	ldr	r1, [r2, r1]
    1470:	4a18      	ldr	r2, [pc, #96]	; (14d4 <lcs+0x1b8>)
    1472:	189a      	adds	r2, r3, r2
    1474:	0092      	lsls	r2, r2, #2
    1476:	4656      	mov	r6, sl
    1478:	5992      	ldr	r2, [r2, r6]
    147a:	4291      	cmp	r1, r2
    147c:	d0e9      	beq.n	1452 <lcs+0x136>
		else if(l[i-1][j]>l[i][j-1]){
    147e:	1e6e      	subs	r6, r5, #1
    1480:	1e5a      	subs	r2, r3, #1
    1482:	4690      	mov	r8, r2
    1484:	4661      	mov	r1, ip
    1486:	4371      	muls	r1, r6
    1488:	18c9      	adds	r1, r1, r3
    148a:	0089      	lsls	r1, r1, #2
    148c:	4662      	mov	r2, ip
    148e:	436a      	muls	r2, r5
    1490:	4442      	add	r2, r8
    1492:	0092      	lsls	r2, r2, #2
    1494:	5909      	ldr	r1, [r1, r4]
    1496:	5912      	ldr	r2, [r2, r4]
    1498:	4291      	cmp	r1, r2
    149a:	dce1      	bgt.n	1460 <lcs+0x144>
			j--;
    149c:	4643      	mov	r3, r8
    149e:	e7e0      	b.n	1462 <lcs+0x146>
    14a0:	465c      	mov	r4, fp
	for(int k=0;k<index;k++){
    14a2:	2c00      	cmp	r4, #0
    14a4:	dd0c      	ble.n	14c0 <lcs+0x1a4>
    14a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    14a8:	4698      	mov	r8, r3
    14aa:	2500      	movs	r5, #0
		printf("%d ",lcss[k]);
    14ac:	4e0a      	ldr	r6, [pc, #40]	; (14d8 <lcs+0x1bc>)
    14ae:	0023      	movs	r3, r4
    14b0:	4644      	mov	r4, r8
    14b2:	4698      	mov	r8, r3
    14b4:	cc02      	ldmia	r4!, {r1}
    14b6:	4809      	ldr	r0, [pc, #36]	; (14dc <lcs+0x1c0>)
    14b8:	47b0      	blx	r6
	for(int k=0;k<index;k++){
    14ba:	3501      	adds	r5, #1
    14bc:	45a8      	cmp	r8, r5
    14be:	d1f9      	bne.n	14b4 <lcs+0x198>
}
    14c0:	4807      	ldr	r0, [pc, #28]	; (14e0 <lcs+0x1c4>)
    14c2:	46bd      	mov	sp, r7
    14c4:	b00b      	add	sp, #44	; 0x2c
    14c6:	bc3c      	pop	{r2, r3, r4, r5}
    14c8:	4690      	mov	r8, r2
    14ca:	4699      	mov	r9, r3
    14cc:	46a2      	mov	sl, r4
    14ce:	46ab      	mov	fp, r5
    14d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	3fffffff 	.word	0x3fffffff
    14d8:	00001ef1 	.word	0x00001ef1
    14dc:	00002ff8 	.word	0x00002ff8
    14e0:	0000131d 	.word	0x0000131d

000014e4 <isGesture>:
}

// routine to return whether the test gesture matched the recorded gesture 
bool isGesture(int *gesture_one_directions, int *gesture_two_directions, int *test_directions) {
    14e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14e6:	b085      	sub	sp, #20
    14e8:	0005      	movs	r5, r0
    14ea:	000f      	movs	r7, r1
    14ec:	9203      	str	r2, [sp, #12]
	// initialize two arrays of size of the gesture to find common sequence
	int * common_gesture = malloc((sizeof(gesture_one_directions)/sizeof(gesture_one_directions[0])) * sizeof(gesture_one_directions));
    14ee:	2004      	movs	r0, #4
    14f0:	4c13      	ldr	r4, [pc, #76]	; (1540 <isGesture+0x5c>)
    14f2:	47a0      	blx	r4
    14f4:	0006      	movs	r6, r0
	int * test_common = malloc((sizeof(gesture_one_directions)/sizeof(gesture_one_directions[0])) * sizeof(gesture_one_directions));
    14f6:	2004      	movs	r0, #4
    14f8:	47a0      	blx	r4
    14fa:	0004      	movs	r4, r0
	
	// find the common sequence between the two gestures
	lcs(gesture_one_directions, gesture_two_directions, sizeof(gesture_one_directions)/sizeof(gesture_one_directions[0]), sizeof(gesture_two_directions)/sizeof(gesture_two_directions[0]), common_gesture);
    14fc:	9600      	str	r6, [sp, #0]
    14fe:	2301      	movs	r3, #1
    1500:	2201      	movs	r2, #1
    1502:	0039      	movs	r1, r7
    1504:	0028      	movs	r0, r5
    1506:	4f0f      	ldr	r7, [pc, #60]	; (1544 <isGesture+0x60>)
    1508:	47b8      	blx	r7
	
	// find the common sequence between any gesture and the test gesture
	lcs(test_directions, gesture_one_directions, sizeof(test_directions)/sizeof(test_directions[0]), sizeof(gesture_one_directions)/sizeof(gesture_one_directions[0]), test_common);
    150a:	9400      	str	r4, [sp, #0]
    150c:	2301      	movs	r3, #1
    150e:	2201      	movs	r2, #1
    1510:	0029      	movs	r1, r5
    1512:	9803      	ldr	r0, [sp, #12]
    1514:	47b8      	blx	r7
	printf("These are the common gestures\n");
    1516:	480c      	ldr	r0, [pc, #48]	; (1548 <isGesture+0x64>)
    1518:	4b0c      	ldr	r3, [pc, #48]	; (154c <isGesture+0x68>)
    151a:	4798      	blx	r3
	printf("%d %d\n", common_gesture[0], common_gesture[1]);
    151c:	4f0c      	ldr	r7, [pc, #48]	; (1550 <isGesture+0x6c>)
    151e:	6872      	ldr	r2, [r6, #4]
    1520:	6831      	ldr	r1, [r6, #0]
    1522:	0038      	movs	r0, r7
    1524:	4d0b      	ldr	r5, [pc, #44]	; (1554 <isGesture+0x70>)
    1526:	47a8      	blx	r5
	printf("%d %d\n", test_common[0], test_common[1]);
    1528:	6862      	ldr	r2, [r4, #4]
    152a:	6821      	ldr	r1, [r4, #0]
    152c:	0038      	movs	r0, r7
    152e:	47a8      	blx	r5
	
	bool classified = true;
	
	// check if both the sequences match
	for (int i=0;i<sizeof(common_gesture)/sizeof(common_gesture[0]);i++){
		if(common_gesture[i] != test_common[i]){
    1530:	6830      	ldr	r0, [r6, #0]
    1532:	6823      	ldr	r3, [r4, #0]
    1534:	1ac0      	subs	r0, r0, r3
    1536:	4242      	negs	r2, r0
    1538:	4142      	adcs	r2, r0
			classified = false;
		}
	}
	return classified;
    153a:	b2d0      	uxtb	r0, r2
}
    153c:	b005      	add	sp, #20
    153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1540:	00001d7d 	.word	0x00001d7d
    1544:	0000131d 	.word	0x0000131d
    1548:	00002ffc 	.word	0x00002ffc
    154c:	0000200d 	.word	0x0000200d
    1550:	0000301c 	.word	0x0000301c
    1554:	00001ef1 	.word	0x00001ef1

00001558 <differenceInDirection>:

// routine to detect whether there was a change in direction along any of the two values at time (t - 1) and (t)
bool differenceInDirection(int x, int y){
    1558:	b510      	push	{r4, lr}
	if (x>y && x-y>ERROR_GAP) {
    155a:	4288      	cmp	r0, r1
    155c:	dd04      	ble.n	1568 <differenceInDirection+0x10>
    155e:	1a42      	subs	r2, r0, r1
    1560:	4c07      	ldr	r4, [pc, #28]	; (1580 <differenceInDirection+0x28>)
			return true;
    1562:	2301      	movs	r3, #1
	if (x>y && x-y>ERROR_GAP) {
    1564:	42a2      	cmp	r2, r4
    1566:	dc09      	bgt.n	157c <differenceInDirection+0x24>
	}
	else if(y>x && y-x>ERROR_GAP) {
		return true;
	}
	return false;
    1568:	2300      	movs	r3, #0
	else if(y>x && y-x>ERROR_GAP) {
    156a:	4288      	cmp	r0, r1
    156c:	da06      	bge.n	157c <differenceInDirection+0x24>
    156e:	1a09      	subs	r1, r1, r0
    1570:	2301      	movs	r3, #1
    1572:	4a03      	ldr	r2, [pc, #12]	; (1580 <differenceInDirection+0x28>)
    1574:	4291      	cmp	r1, r2
    1576:	dc00      	bgt.n	157a <differenceInDirection+0x22>
    1578:	2300      	movs	r3, #0
    157a:	b2db      	uxtb	r3, r3
}
    157c:	0018      	movs	r0, r3
    157e:	bd10      	pop	{r4, pc}
    1580:	000005dc 	.word	0x000005dc

00001584 <push>:
 
// states to store the directions +-(x,y,z)
enum directions { X_POS = 1, X_NEG = -1, Y_POS = 2, Y_NEG = -2 , Z_POS = 3, Z_NEG = -3 };

// routine to push into array dynamically
void push(int *arr, int index, int value, int *size, int *capacity){
    1584:	b5f0      	push	{r4, r5, r6, r7, lr}
    1586:	46c6      	mov	lr, r8
    1588:	b500      	push	{lr}
    158a:	0006      	movs	r6, r0
    158c:	000d      	movs	r5, r1
    158e:	4690      	mov	r8, r2
    1590:	001c      	movs	r4, r3
    1592:	9f06      	ldr	r7, [sp, #24]
     if(*size > *capacity){
    1594:	681b      	ldr	r3, [r3, #0]
    1596:	683a      	ldr	r2, [r7, #0]
    1598:	4293      	cmp	r3, r2
    159a:	dc08      	bgt.n	15ae <push+0x2a>
          realloc(arr, sizeof(arr) * 2);
          *capacity = sizeof(arr) * 2;
     }
     arr[index] = value;
    159c:	00ad      	lsls	r5, r5, #2
    159e:	4643      	mov	r3, r8
    15a0:	51ab      	str	r3, [r5, r6]
     *size = *size + 1;
    15a2:	6823      	ldr	r3, [r4, #0]
    15a4:	3301      	adds	r3, #1
    15a6:	6023      	str	r3, [r4, #0]
}
    15a8:	bc04      	pop	{r2}
    15aa:	4690      	mov	r8, r2
    15ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          realloc(arr, sizeof(arr) * 2);
    15ae:	2108      	movs	r1, #8
    15b0:	4b02      	ldr	r3, [pc, #8]	; (15bc <push+0x38>)
    15b2:	4798      	blx	r3
          *capacity = sizeof(arr) * 2;
    15b4:	2308      	movs	r3, #8
    15b6:	603b      	str	r3, [r7, #0]
    15b8:	e7f0      	b.n	159c <push+0x18>
    15ba:	46c0      	nop			; (mov r8, r8)
    15bc:	00002021 	.word	0x00002021

000015c0 <recordGesture>:

/* Function to record with the duration as the parameter and the output as the dequence of directions */
int recordGesture(int max, int *directions) {
    15c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15c2:	46de      	mov	lr, fp
    15c4:	4657      	mov	r7, sl
    15c6:	464e      	mov	r6, r9
    15c8:	4645      	mov	r5, r8
    15ca:	b5e0      	push	{r5, r6, r7, lr}
    15cc:	b089      	sub	sp, #36	; 0x24
    15ce:	4682      	mov	sl, r0
    15d0:	9105      	str	r1, [sp, #20]
	int  i = 0;
	int counter = 0;
	int direction_counter = 0;

	int ac_t_minus_1[2][3] = {{0,0,0},{0,0,0}};
	int size = 0;
    15d2:	2300      	movs	r3, #0
    15d4:	9307      	str	r3, [sp, #28]
    int capacity = ARRAY_MAX;
    15d6:	330a      	adds	r3, #10
    15d8:	9306      	str	r3, [sp, #24]
	while(i<max) {
    15da:	2800      	cmp	r0, #0
    15dc:	dc00      	bgt.n	15e0 <recordGesture+0x20>
    15de:	e0a6      	b.n	172e <recordGesture+0x16e>
    15e0:	2300      	movs	r3, #0
    15e2:	9302      	str	r3, [sp, #8]
    15e4:	9303      	str	r3, [sp, #12]
    15e6:	2700      	movs	r7, #0
    15e8:	9304      	str	r3, [sp, #16]
    15ea:	4699      	mov	r9, r3
		delay_ms(10);
    15ec:	4b54      	ldr	r3, [pc, #336]	; (1740 <recordGesture+0x180>)
    15ee:	469b      	mov	fp, r3
		ac_t_minus_1[1][0] = ac_t_minus_1[0][0];
		ac_t_minus_1[1][1] = ac_t_minus_1[0][1];
		ac_t_minus_1[1][2] = ac_t_minus_1[0][2];
		
		
		int32_t read_ack = i2c_m_sync_cmd_read(&I2C_0, 0x3b, buffer, 6);
    15f0:	4b54      	ldr	r3, [pc, #336]	; (1744 <recordGesture+0x184>)
    15f2:	4698      	mov	r8, r3
    15f4:	e056      	b.n	16a4 <recordGesture+0xe4>
		ac_t_minus_1[0][0] = acX;
		ac_t_minus_1[0][1] = acY;
		ac_t_minus_1[0][2] = acZ;
		// detect a direction change in X and save in the sequence
		if(differenceInDirection(ac_t_minus_1[0][0], ac_t_minus_1[1][0]) && ac_t_minus_1[1][0] != 0) {
			printf("direction change in x\n");
    15f6:	4854      	ldr	r0, [pc, #336]	; (1748 <recordGesture+0x188>)
    15f8:	4b54      	ldr	r3, [pc, #336]	; (174c <recordGesture+0x18c>)
    15fa:	4798      	blx	r3
			if (ac_t_minus_1[0][0] > ac_t_minus_1[1][0]) {
    15fc:	42be      	cmp	r6, r7
    15fe:	dd0b      	ble.n	1618 <recordGesture+0x58>
				push(directions,direction_counter, X_POS, &size, &capacity);
    1600:	ab06      	add	r3, sp, #24
    1602:	9300      	str	r3, [sp, #0]
    1604:	ab07      	add	r3, sp, #28
    1606:	2201      	movs	r2, #1
    1608:	9904      	ldr	r1, [sp, #16]
    160a:	9805      	ldr	r0, [sp, #20]
    160c:	4f50      	ldr	r7, [pc, #320]	; (1750 <recordGesture+0x190>)
    160e:	47b8      	blx	r7
				direction_counter += 1;
    1610:	9b04      	ldr	r3, [sp, #16]
    1612:	3301      	adds	r3, #1
    1614:	9304      	str	r3, [sp, #16]
    1616:	e066      	b.n	16e6 <recordGesture+0x126>
			}
			else {
				push(directions,direction_counter, X_NEG, &size, &capacity);
    1618:	ab06      	add	r3, sp, #24
    161a:	9300      	str	r3, [sp, #0]
    161c:	ab07      	add	r3, sp, #28
    161e:	2201      	movs	r2, #1
    1620:	4252      	negs	r2, r2
    1622:	9904      	ldr	r1, [sp, #16]
    1624:	9805      	ldr	r0, [sp, #20]
    1626:	4f4a      	ldr	r7, [pc, #296]	; (1750 <recordGesture+0x190>)
    1628:	47b8      	blx	r7
				direction_counter += 1;
    162a:	9b04      	ldr	r3, [sp, #16]
    162c:	3301      	adds	r3, #1
    162e:	9304      	str	r3, [sp, #16]
    1630:	e059      	b.n	16e6 <recordGesture+0x126>
			}
		}
		// detect a direction change in Y and save in the sequence
		if(differenceInDirection(ac_t_minus_1[0][1], ac_t_minus_1[1][1]) && ac_t_minus_1[1][1] != 0) {
			printf("direction change in y\n");
    1632:	4848      	ldr	r0, [pc, #288]	; (1754 <recordGesture+0x194>)
    1634:	4b45      	ldr	r3, [pc, #276]	; (174c <recordGesture+0x18c>)
    1636:	4798      	blx	r3
			if (ac_t_minus_1[0][1] > ac_t_minus_1[1][1]) {
    1638:	9b03      	ldr	r3, [sp, #12]
    163a:	429d      	cmp	r5, r3
    163c:	dd0b      	ble.n	1656 <recordGesture+0x96>
				push(directions,direction_counter, Y_POS, &size, &capacity);
    163e:	ab06      	add	r3, sp, #24
    1640:	9300      	str	r3, [sp, #0]
    1642:	ab07      	add	r3, sp, #28
    1644:	2202      	movs	r2, #2
    1646:	9904      	ldr	r1, [sp, #16]
    1648:	9805      	ldr	r0, [sp, #20]
    164a:	4f41      	ldr	r7, [pc, #260]	; (1750 <recordGesture+0x190>)
    164c:	47b8      	blx	r7
				direction_counter += 1;
    164e:	9b04      	ldr	r3, [sp, #16]
    1650:	3301      	adds	r3, #1
    1652:	9304      	str	r3, [sp, #16]
    1654:	e050      	b.n	16f8 <recordGesture+0x138>
			}
			else {;
				push(directions,direction_counter, Y_NEG, &size, &capacity);
    1656:	ab06      	add	r3, sp, #24
    1658:	9300      	str	r3, [sp, #0]
    165a:	ab07      	add	r3, sp, #28
    165c:	2202      	movs	r2, #2
    165e:	4252      	negs	r2, r2
    1660:	9904      	ldr	r1, [sp, #16]
    1662:	9805      	ldr	r0, [sp, #20]
    1664:	4f3a      	ldr	r7, [pc, #232]	; (1750 <recordGesture+0x190>)
    1666:	47b8      	blx	r7
				direction_counter += 1;
    1668:	9b04      	ldr	r3, [sp, #16]
    166a:	3301      	adds	r3, #1
    166c:	9304      	str	r3, [sp, #16]
    166e:	e043      	b.n	16f8 <recordGesture+0x138>
			if (ac_t_minus_1[0][2] > ac_t_minus_1[1][2]) {
				push(directions,direction_counter, Z_POS, &size, &capacity);
				direction_counter += 1;
			}
			else {
				push(directions,direction_counter, Z_NEG, &size, &capacity);
    1670:	ab06      	add	r3, sp, #24
    1672:	9300      	str	r3, [sp, #0]
    1674:	ab07      	add	r3, sp, #28
    1676:	2203      	movs	r2, #3
    1678:	4252      	negs	r2, r2
    167a:	9904      	ldr	r1, [sp, #16]
    167c:	9805      	ldr	r0, [sp, #20]
    167e:	4f34      	ldr	r7, [pc, #208]	; (1750 <recordGesture+0x190>)
    1680:	47b8      	blx	r7
				direction_counter += 1;
    1682:	9b04      	ldr	r3, [sp, #16]
    1684:	3301      	adds	r3, #1
    1686:	9304      	str	r3, [sp, #16]
			}
		}
		
		
		printf("X: %d        Y: %d        Z: %d\n",acX,acY,acZ);
    1688:	0023      	movs	r3, r4
    168a:	002a      	movs	r2, r5
    168c:	0031      	movs	r1, r6
    168e:	4832      	ldr	r0, [pc, #200]	; (1758 <recordGesture+0x198>)
    1690:	4f32      	ldr	r7, [pc, #200]	; (175c <recordGesture+0x19c>)
    1692:	47b8      	blx	r7
		
		i++;
    1694:	2301      	movs	r3, #1
    1696:	469c      	mov	ip, r3
    1698:	44e1      	add	r9, ip
		ac_t_minus_1[0][0] = acX;
    169a:	0037      	movs	r7, r6
		ac_t_minus_1[0][1] = acY;
    169c:	9503      	str	r5, [sp, #12]
		ac_t_minus_1[0][2] = acZ;
    169e:	9402      	str	r4, [sp, #8]
	while(i<max) {
    16a0:	45ca      	cmp	sl, r9
    16a2:	d044      	beq.n	172e <recordGesture+0x16e>
		delay_ms(10);
    16a4:	200a      	movs	r0, #10
    16a6:	47d8      	blx	fp
		int32_t read_ack = i2c_m_sync_cmd_read(&I2C_0, 0x3b, buffer, 6);
    16a8:	2306      	movs	r3, #6
    16aa:	4642      	mov	r2, r8
    16ac:	213b      	movs	r1, #59	; 0x3b
    16ae:	482c      	ldr	r0, [pc, #176]	; (1760 <recordGesture+0x1a0>)
    16b0:	4c2c      	ldr	r4, [pc, #176]	; (1764 <recordGesture+0x1a4>)
    16b2:	47a0      	blx	r4
		int16_t acX = buffer[counter++] << 8 | buffer[counter++]; // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
    16b4:	4643      	mov	r3, r8
    16b6:	781b      	ldrb	r3, [r3, #0]
    16b8:	021b      	lsls	r3, r3, #8
    16ba:	4642      	mov	r2, r8
    16bc:	7856      	ldrb	r6, [r2, #1]
    16be:	431e      	orrs	r6, r3
		ac_t_minus_1[0][0] = acX;
    16c0:	b236      	sxth	r6, r6
		int16_t acY = buffer[counter++] << 8 | buffer[counter++]; // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
    16c2:	7893      	ldrb	r3, [r2, #2]
    16c4:	021b      	lsls	r3, r3, #8
    16c6:	78d5      	ldrb	r5, [r2, #3]
    16c8:	431d      	orrs	r5, r3
		ac_t_minus_1[0][1] = acY;
    16ca:	b22d      	sxth	r5, r5
		int16_t acZ = buffer[counter++] << 8 | buffer[counter++]; // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
    16cc:	7913      	ldrb	r3, [r2, #4]
    16ce:	021b      	lsls	r3, r3, #8
    16d0:	7954      	ldrb	r4, [r2, #5]
    16d2:	431c      	orrs	r4, r3
		ac_t_minus_1[0][2] = acZ;
    16d4:	b224      	sxth	r4, r4
		if(differenceInDirection(ac_t_minus_1[0][0], ac_t_minus_1[1][0]) && ac_t_minus_1[1][0] != 0) {
    16d6:	0039      	movs	r1, r7
    16d8:	0030      	movs	r0, r6
    16da:	4b23      	ldr	r3, [pc, #140]	; (1768 <recordGesture+0x1a8>)
    16dc:	4798      	blx	r3
    16de:	2800      	cmp	r0, #0
    16e0:	d001      	beq.n	16e6 <recordGesture+0x126>
    16e2:	2f00      	cmp	r7, #0
    16e4:	d187      	bne.n	15f6 <recordGesture+0x36>
		if(differenceInDirection(ac_t_minus_1[0][1], ac_t_minus_1[1][1]) && ac_t_minus_1[1][1] != 0) {
    16e6:	9f03      	ldr	r7, [sp, #12]
    16e8:	0039      	movs	r1, r7
    16ea:	0028      	movs	r0, r5
    16ec:	4b1e      	ldr	r3, [pc, #120]	; (1768 <recordGesture+0x1a8>)
    16ee:	4798      	blx	r3
    16f0:	2800      	cmp	r0, #0
    16f2:	d001      	beq.n	16f8 <recordGesture+0x138>
    16f4:	2f00      	cmp	r7, #0
    16f6:	d19c      	bne.n	1632 <recordGesture+0x72>
		if(differenceInDirection(ac_t_minus_1[0][2], ac_t_minus_1[1][2]) && ac_t_minus_1[1][2] != 0) {
    16f8:	9f02      	ldr	r7, [sp, #8]
    16fa:	0039      	movs	r1, r7
    16fc:	0020      	movs	r0, r4
    16fe:	4b1a      	ldr	r3, [pc, #104]	; (1768 <recordGesture+0x1a8>)
    1700:	4798      	blx	r3
    1702:	2800      	cmp	r0, #0
    1704:	d0c0      	beq.n	1688 <recordGesture+0xc8>
    1706:	2f00      	cmp	r7, #0
    1708:	d0be      	beq.n	1688 <recordGesture+0xc8>
			printf("direction change in z\n");
    170a:	4818      	ldr	r0, [pc, #96]	; (176c <recordGesture+0x1ac>)
    170c:	4b0f      	ldr	r3, [pc, #60]	; (174c <recordGesture+0x18c>)
    170e:	4798      	blx	r3
			if (ac_t_minus_1[0][2] > ac_t_minus_1[1][2]) {
    1710:	9b02      	ldr	r3, [sp, #8]
    1712:	429c      	cmp	r4, r3
    1714:	ddac      	ble.n	1670 <recordGesture+0xb0>
				push(directions,direction_counter, Z_POS, &size, &capacity);
    1716:	ab06      	add	r3, sp, #24
    1718:	9300      	str	r3, [sp, #0]
    171a:	ab07      	add	r3, sp, #28
    171c:	2203      	movs	r2, #3
    171e:	9904      	ldr	r1, [sp, #16]
    1720:	9805      	ldr	r0, [sp, #20]
    1722:	4f0b      	ldr	r7, [pc, #44]	; (1750 <recordGesture+0x190>)
    1724:	47b8      	blx	r7
				direction_counter += 1;
    1726:	9b04      	ldr	r3, [sp, #16]
    1728:	3301      	adds	r3, #1
    172a:	9304      	str	r3, [sp, #16]
    172c:	e7ac      	b.n	1688 <recordGesture+0xc8>
		 
		counter=0;
	}
	
	return directions;
}
    172e:	9805      	ldr	r0, [sp, #20]
    1730:	b009      	add	sp, #36	; 0x24
    1732:	bc3c      	pop	{r2, r3, r4, r5}
    1734:	4690      	mov	r8, r2
    1736:	4699      	mov	r9, r3
    1738:	46a2      	mov	sl, r4
    173a:	46ab      	mov	fp, r5
    173c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	00000431 	.word	0x00000431
    1744:	20000098 	.word	0x20000098
    1748:	00003024 	.word	0x00003024
    174c:	0000200d 	.word	0x0000200d
    1750:	00001585 	.word	0x00001585
    1754:	0000303c 	.word	0x0000303c
    1758:	0000306c 	.word	0x0000306c
    175c:	00001ef1 	.word	0x00001ef1
    1760:	200000b8 	.word	0x200000b8
    1764:	000005e1 	.word	0x000005e1
    1768:	00001559 	.word	0x00001559
    176c:	00003054 	.word	0x00003054

00001770 <toggleLED>:

void toggleLED(){
    1770:	b5f0      	push	{r4, r5, r6, r7, lr}
    1772:	b083      	sub	sp, #12
	do {
		delay_ms(100);
    1774:	4f19      	ldr	r7, [pc, #100]	; (17dc <toggleLED+0x6c>)
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1776:	4e1a      	ldr	r6, [pc, #104]	; (17e0 <toggleLED+0x70>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    1778:	4d1a      	ldr	r5, [pc, #104]	; (17e4 <toggleLED+0x74>)
    177a:	2064      	movs	r0, #100	; 0x64
    177c:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    177e:	4668      	mov	r0, sp
    1780:	47b0      	blx	r6
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1782:	23c0      	movs	r3, #192	; 0xc0
    1784:	05db      	lsls	r3, r3, #23
    1786:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1788:	4a17      	ldr	r2, [pc, #92]	; (17e8 <toggleLED+0x78>)
    178a:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    178c:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    178e:	4053      	eors	r3, r2
    1790:	401c      	ands	r4, r3
    1792:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1794:	4668      	mov	r0, sp
    1796:	47a8      	blx	r5
	} while (gpio_get_pin_level(SW0));
    1798:	0423      	lsls	r3, r4, #16
    179a:	d4ee      	bmi.n	177a <toggleLED+0xa>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    179c:	2180      	movs	r1, #128	; 0x80
    179e:	05c9      	lsls	r1, r1, #23
    17a0:	239c      	movs	r3, #156	; 0x9c
    17a2:	22c0      	movs	r2, #192	; 0xc0
    17a4:	05d2      	lsls	r2, r2, #23
    17a6:	50d1      	str	r1, [r2, r3]

	gpio_toggle_pin_level(LED0);
	
	printf("Button pressed\n");
    17a8:	4810      	ldr	r0, [pc, #64]	; (17ec <toggleLED+0x7c>)
    17aa:	4b11      	ldr	r3, [pc, #68]	; (17f0 <toggleLED+0x80>)
    17ac:	4798      	blx	r3
	do {
		delay_ms(100);
    17ae:	4f0b      	ldr	r7, [pc, #44]	; (17dc <toggleLED+0x6c>)
	CRITICAL_SECTION_ENTER();
    17b0:	4e0b      	ldr	r6, [pc, #44]	; (17e0 <toggleLED+0x70>)
	CRITICAL_SECTION_LEAVE();
    17b2:	4d0c      	ldr	r5, [pc, #48]	; (17e4 <toggleLED+0x74>)
    17b4:	2064      	movs	r0, #100	; 0x64
    17b6:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    17b8:	a801      	add	r0, sp, #4
    17ba:	47b0      	blx	r6
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    17bc:	23c0      	movs	r3, #192	; 0xc0
    17be:	05db      	lsls	r3, r3, #23
    17c0:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    17c2:	4a09      	ldr	r2, [pc, #36]	; (17e8 <toggleLED+0x78>)
    17c4:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    17c6:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    17c8:	4053      	eors	r3, r2
    17ca:	401c      	ands	r4, r3
    17cc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    17ce:	a801      	add	r0, sp, #4
    17d0:	47a8      	blx	r5
	} while (!gpio_get_pin_level(SW0));
    17d2:	0423      	lsls	r3, r4, #16
    17d4:	d5ee      	bpl.n	17b4 <toggleLED+0x44>
}
    17d6:	b003      	add	sp, #12
    17d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	00000431 	.word	0x00000431
    17e0:	00000401 	.word	0x00000401
    17e4:	0000040f 	.word	0x0000040f
    17e8:	41004400 	.word	0x41004400
    17ec:	00003090 	.word	0x00003090
    17f0:	0000200d 	.word	0x0000200d

000017f4 <button_pressed>:

/* External button press interrupt */


static void button_pressed(void){
    17f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17f6:	46d6      	mov	lr, sl
    17f8:	464f      	mov	r7, r9
    17fa:	4646      	mov	r6, r8
    17fc:	b5c0      	push	{r6, r7, lr}
    17fe:	b086      	sub	sp, #24
	// switch on gpio led pin for indicating a record
	toggleLED();
    1800:	4b5e      	ldr	r3, [pc, #376]	; (197c <button_pressed+0x188>)
    1802:	4798      	blx	r3

	// initialize two array for storing the gesture directions and test directions
	
	int* gesture_one_directions = malloc(ARRAY_MAX * sizeof(int));
    1804:	2028      	movs	r0, #40	; 0x28
    1806:	4e5e      	ldr	r6, [pc, #376]	; (1980 <button_pressed+0x18c>)
    1808:	47b0      	blx	r6
    180a:	9001      	str	r0, [sp, #4]
	int* gesture_two_directions = malloc(ARRAY_MAX * sizeof(int));
    180c:	2028      	movs	r0, #40	; 0x28
    180e:	47b0      	blx	r6
    1810:	9003      	str	r0, [sp, #12]
	
	int* test_directions = malloc(ARRAY_MAX * sizeof(int));
    1812:	2028      	movs	r0, #40	; 0x28
    1814:	47b0      	blx	r6
    1816:	9002      	str	r0, [sp, #8]
	
	/* Record once again and Toggle LED if gesture is classified */
	delay_ms(200);
    1818:	20c8      	movs	r0, #200	; 0xc8
    181a:	4b5a      	ldr	r3, [pc, #360]	; (1984 <button_pressed+0x190>)
    181c:	4798      	blx	r3
	if(MAX_RECORD_COUNT==0){
    181e:	4b5a      	ldr	r3, [pc, #360]	; (1988 <button_pressed+0x194>)
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	2b00      	cmp	r3, #0
    1824:	d03c      	beq.n	18a0 <button_pressed+0xac>
	CRITICAL_SECTION_ENTER();
    1826:	a805      	add	r0, sp, #20
    1828:	4b58      	ldr	r3, [pc, #352]	; (198c <button_pressed+0x198>)
    182a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    182c:	23c0      	movs	r3, #192	; 0xc0
    182e:	05db      	lsls	r3, r3, #23
    1830:	2280      	movs	r2, #128	; 0x80
    1832:	589e      	ldr	r6, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1834:	3220      	adds	r2, #32
    1836:	4956      	ldr	r1, [pc, #344]	; (1990 <button_pressed+0x19c>)
    1838:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    183a:	2190      	movs	r1, #144	; 0x90
    183c:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    183e:	4053      	eors	r3, r2
    1840:	401e      	ands	r6, r3
    1842:	4056      	eors	r6, r2
	CRITICAL_SECTION_LEAVE();
    1844:	a805      	add	r0, sp, #20
    1846:	4b53      	ldr	r3, [pc, #332]	; (1994 <button_pressed+0x1a0>)
    1848:	4798      	blx	r3
			}
		}
	}
	
	// record only on press/HIGH/LED is on
	if(!gpio_get_pin_level(LED0) && MAX_RECORD_COUNT>0) {
    184a:	0073      	lsls	r3, r6, #1
    184c:	d422      	bmi.n	1894 <button_pressed+0xa0>
    184e:	4b4e      	ldr	r3, [pc, #312]	; (1988 <button_pressed+0x194>)
    1850:	681b      	ldr	r3, [r3, #0]
    1852:	2b00      	cmp	r3, #0
    1854:	dd1e      	ble.n	1894 <button_pressed+0xa0>
		if(MAX_RECORD_COUNT==1){
    1856:	2b01      	cmp	r3, #1
    1858:	d100      	bne.n	185c <button_pressed+0x68>
    185a:	e075      	b.n	1948 <button_pressed+0x154>
			}
			printf("\n");
		}
		else {
			
			printf("\nRecording Gesture 1\n");
    185c:	484e      	ldr	r0, [pc, #312]	; (1998 <button_pressed+0x1a4>)
    185e:	4b4f      	ldr	r3, [pc, #316]	; (199c <button_pressed+0x1a8>)
    1860:	4798      	blx	r3
			recordGesture(50, gesture_one_directions);
    1862:	9d01      	ldr	r5, [sp, #4]
    1864:	0029      	movs	r1, r5
    1866:	2032      	movs	r0, #50	; 0x32
    1868:	4b4d      	ldr	r3, [pc, #308]	; (19a0 <button_pressed+0x1ac>)
    186a:	4798      	blx	r3
			delay_ms(1000);
    186c:	20fa      	movs	r0, #250	; 0xfa
    186e:	0080      	lsls	r0, r0, #2
    1870:	4b44      	ldr	r3, [pc, #272]	; (1984 <button_pressed+0x190>)
    1872:	4798      	blx	r3
    1874:	002c      	movs	r4, r5
    1876:	3528      	adds	r5, #40	; 0x28
			
			for (int i=0;i<ARRAY_MAX;i++)
			{
				printf("%d ", gesture_one_directions[i]);
    1878:	4e4a      	ldr	r6, [pc, #296]	; (19a4 <button_pressed+0x1b0>)
    187a:	4f4b      	ldr	r7, [pc, #300]	; (19a8 <button_pressed+0x1b4>)
    187c:	cc02      	ldmia	r4!, {r1}
    187e:	0030      	movs	r0, r6
    1880:	47b8      	blx	r7
			for (int i=0;i<ARRAY_MAX;i++)
    1882:	42ac      	cmp	r4, r5
    1884:	d1fa      	bne.n	187c <button_pressed+0x88>
			}
			printf("\n");
    1886:	200a      	movs	r0, #10
    1888:	4b48      	ldr	r3, [pc, #288]	; (19ac <button_pressed+0x1b8>)
    188a:	4798      	blx	r3
		}
		
		MAX_RECORD_COUNT -= 1;
    188c:	4a3e      	ldr	r2, [pc, #248]	; (1988 <button_pressed+0x194>)
    188e:	6813      	ldr	r3, [r2, #0]
    1890:	3b01      	subs	r3, #1
    1892:	6013      	str	r3, [r2, #0]
		
	}
} 
    1894:	b006      	add	sp, #24
    1896:	bc1c      	pop	{r2, r3, r4}
    1898:	4690      	mov	r8, r2
    189a:	4699      	mov	r9, r3
    189c:	46a2      	mov	sl, r4
    189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("\nRecording Final Gesture\n");
    18a0:	4843      	ldr	r0, [pc, #268]	; (19b0 <button_pressed+0x1bc>)
    18a2:	4b3e      	ldr	r3, [pc, #248]	; (199c <button_pressed+0x1a8>)
    18a4:	4798      	blx	r3
		recordGesture(50, test_directions);
    18a6:	9d02      	ldr	r5, [sp, #8]
    18a8:	0029      	movs	r1, r5
    18aa:	2032      	movs	r0, #50	; 0x32
    18ac:	4b3c      	ldr	r3, [pc, #240]	; (19a0 <button_pressed+0x1ac>)
    18ae:	4798      	blx	r3
		delay_ms(2000);
    18b0:	20fa      	movs	r0, #250	; 0xfa
    18b2:	00c0      	lsls	r0, r0, #3
    18b4:	4b33      	ldr	r3, [pc, #204]	; (1984 <button_pressed+0x190>)
    18b6:	4798      	blx	r3
    18b8:	002f      	movs	r7, r5
    18ba:	3528      	adds	r5, #40	; 0x28
			printf("%d ", test_directions[i]);
    18bc:	4e39      	ldr	r6, [pc, #228]	; (19a4 <button_pressed+0x1b0>)
    18be:	4c3a      	ldr	r4, [pc, #232]	; (19a8 <button_pressed+0x1b4>)
    18c0:	cf02      	ldmia	r7!, {r1}
    18c2:	0030      	movs	r0, r6
    18c4:	47a0      	blx	r4
		for (int i =0;i<ARRAY_MAX;i++)
    18c6:	42af      	cmp	r7, r5
    18c8:	d1fa      	bne.n	18c0 <button_pressed+0xcc>
		printf("\n");
    18ca:	200a      	movs	r0, #10
    18cc:	4b37      	ldr	r3, [pc, #220]	; (19ac <button_pressed+0x1b8>)
    18ce:	4798      	blx	r3
		bool classified = isGesture(gesture_one_directions, gesture_two_directions, test_directions);
    18d0:	9a02      	ldr	r2, [sp, #8]
    18d2:	9903      	ldr	r1, [sp, #12]
    18d4:	9801      	ldr	r0, [sp, #4]
    18d6:	4b37      	ldr	r3, [pc, #220]	; (19b4 <button_pressed+0x1c0>)
    18d8:	4798      	blx	r3
    18da:	0006      	movs	r6, r0
    18dc:	0001      	movs	r1, r0
    18de:	1e4b      	subs	r3, r1, #1
    18e0:	4199      	sbcs	r1, r3
		printf("\n Return whether the gesture was true(1)- %d\n", classified);
    18e2:	4835      	ldr	r0, [pc, #212]	; (19b8 <button_pressed+0x1c4>)
    18e4:	4b30      	ldr	r3, [pc, #192]	; (19a8 <button_pressed+0x1b4>)
    18e6:	4798      	blx	r3
		if(classified){
    18e8:	2e00      	cmp	r6, #0
    18ea:	d012      	beq.n	1912 <button_pressed+0x11e>
			printf("Successfully classified\n");
    18ec:	4833      	ldr	r0, [pc, #204]	; (19bc <button_pressed+0x1c8>)
    18ee:	4b2b      	ldr	r3, [pc, #172]	; (199c <button_pressed+0x1a8>)
    18f0:	4798      	blx	r3
    18f2:	260a      	movs	r6, #10
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    18f4:	23c0      	movs	r3, #192	; 0xc0
    18f6:	05db      	lsls	r3, r3, #23
    18f8:	469a      	mov	sl, r3
    18fa:	259c      	movs	r5, #156	; 0x9c
    18fc:	2480      	movs	r4, #128	; 0x80
    18fe:	05e4      	lsls	r4, r4, #23
				delay_ms(250);
    1900:	4f20      	ldr	r7, [pc, #128]	; (1984 <button_pressed+0x190>)
    1902:	4653      	mov	r3, sl
    1904:	515c      	str	r4, [r3, r5]
    1906:	20fa      	movs	r0, #250	; 0xfa
    1908:	47b8      	blx	r7
    190a:	3e01      	subs	r6, #1
			while(i<10) {
    190c:	2e00      	cmp	r6, #0
    190e:	d1f8      	bne.n	1902 <button_pressed+0x10e>
    1910:	e789      	b.n	1826 <button_pressed+0x32>
			printf("Gesture not recognized\n");
    1912:	482b      	ldr	r0, [pc, #172]	; (19c0 <button_pressed+0x1cc>)
    1914:	4b21      	ldr	r3, [pc, #132]	; (199c <button_pressed+0x1a8>)
    1916:	4798      	blx	r3
    1918:	23c0      	movs	r3, #192	; 0xc0
    191a:	05db      	lsls	r3, r3, #23
    191c:	4698      	mov	r8, r3
    191e:	279c      	movs	r7, #156	; 0x9c
    1920:	2380      	movs	r3, #128	; 0x80
    1922:	05db      	lsls	r3, r3, #23
    1924:	4699      	mov	r9, r3
    1926:	4643      	mov	r3, r8
    1928:	464a      	mov	r2, r9
    192a:	51da      	str	r2, [r3, r7]
				delay_ms(250);
    192c:	20fa      	movs	r0, #250	; 0xfa
    192e:	4e15      	ldr	r6, [pc, #84]	; (1984 <button_pressed+0x190>)
    1930:	47b0      	blx	r6
    1932:	4643      	mov	r3, r8
    1934:	464a      	mov	r2, r9
    1936:	51da      	str	r2, [r3, r7]
    1938:	20fa      	movs	r0, #250	; 0xfa
    193a:	47b0      	blx	r6
    193c:	4643      	mov	r3, r8
    193e:	464a      	mov	r2, r9
    1940:	51da      	str	r2, [r3, r7]
    1942:	20fa      	movs	r0, #250	; 0xfa
    1944:	47b0      	blx	r6
    1946:	e76e      	b.n	1826 <button_pressed+0x32>
			printf("\nRecording Gesture 2\n");
    1948:	481e      	ldr	r0, [pc, #120]	; (19c4 <button_pressed+0x1d0>)
    194a:	4b14      	ldr	r3, [pc, #80]	; (199c <button_pressed+0x1a8>)
    194c:	4798      	blx	r3
			recordGesture(50, gesture_two_directions);
    194e:	9c03      	ldr	r4, [sp, #12]
    1950:	0021      	movs	r1, r4
    1952:	2032      	movs	r0, #50	; 0x32
    1954:	4b12      	ldr	r3, [pc, #72]	; (19a0 <button_pressed+0x1ac>)
    1956:	4798      	blx	r3
			delay_ms(1000);
    1958:	20fa      	movs	r0, #250	; 0xfa
    195a:	0080      	lsls	r0, r0, #2
    195c:	4b09      	ldr	r3, [pc, #36]	; (1984 <button_pressed+0x190>)
    195e:	4798      	blx	r3
    1960:	0025      	movs	r5, r4
    1962:	3428      	adds	r4, #40	; 0x28
				printf("%d ", gesture_two_directions[i]);
    1964:	4e0f      	ldr	r6, [pc, #60]	; (19a4 <button_pressed+0x1b0>)
    1966:	4f10      	ldr	r7, [pc, #64]	; (19a8 <button_pressed+0x1b4>)
    1968:	cd02      	ldmia	r5!, {r1}
    196a:	0030      	movs	r0, r6
    196c:	47b8      	blx	r7
			for (int i=0;i<ARRAY_MAX;i++)
    196e:	42ac      	cmp	r4, r5
    1970:	d1fa      	bne.n	1968 <button_pressed+0x174>
			printf("\n");
    1972:	200a      	movs	r0, #10
    1974:	4b0d      	ldr	r3, [pc, #52]	; (19ac <button_pressed+0x1b8>)
    1976:	4798      	blx	r3
    1978:	e788      	b.n	188c <button_pressed+0x98>
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	00001771 	.word	0x00001771
    1980:	00001d7d 	.word	0x00001d7d
    1984:	00000431 	.word	0x00000431
    1988:	20000000 	.word	0x20000000
    198c:	00000401 	.word	0x00000401
    1990:	41004400 	.word	0x41004400
    1994:	0000040f 	.word	0x0000040f
    1998:	00003134 	.word	0x00003134
    199c:	0000200d 	.word	0x0000200d
    19a0:	000015c1 	.word	0x000015c1
    19a4:	00002ff8 	.word	0x00002ff8
    19a8:	00001ef1 	.word	0x00001ef1
    19ac:	00001f25 	.word	0x00001f25
    19b0:	000030a0 	.word	0x000030a0
    19b4:	000014e5 	.word	0x000014e5
    19b8:	000030bc 	.word	0x000030bc
    19bc:	000030ec 	.word	0x000030ec
    19c0:	00003104 	.word	0x00003104
    19c4:	0000311c 	.word	0x0000311c

000019c8 <main>:

int main(void)
{
    19c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ca:	46ce      	mov	lr, r9
    19cc:	4647      	mov	r7, r8
    19ce:	b580      	push	{r7, lr}
    19d0:	b083      	sub	sp, #12
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    19d2:	4b30      	ldr	r3, [pc, #192]	; (1a94 <main+0xcc>)
    19d4:	4798      	blx	r3
	/* Register the interrupt */
	ext_irq_register(PA15, button_pressed);
    19d6:	4930      	ldr	r1, [pc, #192]	; (1a98 <main+0xd0>)
    19d8:	200f      	movs	r0, #15
    19da:	4b30      	ldr	r3, [pc, #192]	; (1a9c <main+0xd4>)
    19dc:	4798      	blx	r3
	
	struct io_descriptor *I2C_0_io;
	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    19de:	4d30      	ldr	r5, [pc, #192]	; (1aa0 <main+0xd8>)
    19e0:	a901      	add	r1, sp, #4
    19e2:	0028      	movs	r0, r5
    19e4:	4b2f      	ldr	r3, [pc, #188]	; (1aa4 <main+0xdc>)
    19e6:	4798      	blx	r3
	int32_t i2c_ack = i2c_m_sync_enable(&I2C_0);
    19e8:	0028      	movs	r0, r5
    19ea:	4b2f      	ldr	r3, [pc, #188]	; (1aa8 <main+0xe0>)
    19ec:	4798      	blx	r3
    19ee:	0001      	movs	r1, r0
	printf("I2C Enabled - %d\n", i2c_ack);
    19f0:	482e      	ldr	r0, [pc, #184]	; (1aac <main+0xe4>)
    19f2:	4c2f      	ldr	r4, [pc, #188]	; (1ab0 <main+0xe8>)
    19f4:	47a0      	blx	r4
	
	int32_t slave_addr = i2c_m_sync_set_slaveaddr(&I2C_0, 0x68, I2C_M_SEVEN);
    19f6:	2280      	movs	r2, #128	; 0x80
    19f8:	0112      	lsls	r2, r2, #4
    19fa:	2168      	movs	r1, #104	; 0x68
    19fc:	0028      	movs	r0, r5
    19fe:	4b2d      	ldr	r3, [pc, #180]	; (1ab4 <main+0xec>)
    1a00:	4798      	blx	r3
    1a02:	0001      	movs	r1, r0
	
	printf("Masked Slave Address - %d\n", slave_addr);
    1a04:	482c      	ldr	r0, [pc, #176]	; (1ab8 <main+0xf0>)
    1a06:	47a0      	blx	r4
	
	
	uint8_t readBuffer;
	int32_t readData = i2c_m_sync_cmd_read(&I2C_0, 0x75, &readBuffer, 1);
    1a08:	466b      	mov	r3, sp
    1a0a:	1cdf      	adds	r7, r3, #3
    1a0c:	2301      	movs	r3, #1
    1a0e:	003a      	movs	r2, r7
    1a10:	2175      	movs	r1, #117	; 0x75
    1a12:	0028      	movs	r0, r5
    1a14:	4e29      	ldr	r6, [pc, #164]	; (1abc <main+0xf4>)
    1a16:	46b0      	mov	r8, r6
    1a18:	47b0      	blx	r6
    1a1a:	0001      	movs	r1, r0

	printf("read data : : %x\n", readData);
    1a1c:	4828      	ldr	r0, [pc, #160]	; (1ac0 <main+0xf8>)
    1a1e:	47a0      	blx	r4
	printf("Read Buffer : %x\n", readBuffer);
    1a20:	7839      	ldrb	r1, [r7, #0]
    1a22:	4828      	ldr	r0, [pc, #160]	; (1ac4 <main+0xfc>)
    1a24:	47a0      	blx	r4
	delay_ms(500);
    1a26:	20fa      	movs	r0, #250	; 0xfa
    1a28:	0040      	lsls	r0, r0, #1
    1a2a:	4f27      	ldr	r7, [pc, #156]	; (1ac8 <main+0x100>)
    1a2c:	47b8      	blx	r7
	uint8_t readbuffer;
	int32_t read_ack = i2c_m_sync_cmd_read(&I2C_0, 0x6b, &readbuffer, 1);
    1a2e:	2302      	movs	r3, #2
    1a30:	446b      	add	r3, sp
    1a32:	4699      	mov	r9, r3
    1a34:	2301      	movs	r3, #1
    1a36:	464a      	mov	r2, r9
    1a38:	216b      	movs	r1, #107	; 0x6b
    1a3a:	0028      	movs	r0, r5
    1a3c:	47b0      	blx	r6
    1a3e:	0001      	movs	r1, r0
	printf("\nread_ack : %d\n",read_ack);
    1a40:	4822      	ldr	r0, [pc, #136]	; (1acc <main+0x104>)
    1a42:	47a0      	blx	r4
	printf("readbuffer : %x\n",readbuffer);
    1a44:	464b      	mov	r3, r9
    1a46:	7819      	ldrb	r1, [r3, #0]
    1a48:	4821      	ldr	r0, [pc, #132]	; (1ad0 <main+0x108>)
    1a4a:	47a0      	blx	r4
	delay_ms(500);
    1a4c:	20fa      	movs	r0, #250	; 0xfa
    1a4e:	0040      	lsls	r0, r0, #1
    1a50:	47b8      	blx	r7
	uint8_t writebuffer = 0x20;
    1a52:	466b      	mov	r3, sp
    1a54:	1c5a      	adds	r2, r3, #1
    1a56:	2320      	movs	r3, #32
    1a58:	7013      	strb	r3, [r2, #0]
	int32_t write = i2c_m_sync_cmd_write(&I2C_0, 0x6b, &writebuffer, 1);
    1a5a:	3b1f      	subs	r3, #31
    1a5c:	216b      	movs	r1, #107	; 0x6b
    1a5e:	0028      	movs	r0, r5
    1a60:	4e1c      	ldr	r6, [pc, #112]	; (1ad4 <main+0x10c>)
    1a62:	47b0      	blx	r6
    1a64:	0001      	movs	r1, r0
	
	
	
	printf("write : %d\n", write);
    1a66:	481c      	ldr	r0, [pc, #112]	; (1ad8 <main+0x110>)
    1a68:	47a0      	blx	r4
	delay_ms(500);
    1a6a:	20fa      	movs	r0, #250	; 0xfa
    1a6c:	0040      	lsls	r0, r0, #1
    1a6e:	47b8      	blx	r7
	uint8_t readbuffer1;
	int32_t read_ack1 = i2c_m_sync_cmd_read(&I2C_0, 0x6b, &readbuffer1, 1);
    1a70:	2301      	movs	r3, #1
    1a72:	466a      	mov	r2, sp
    1a74:	216b      	movs	r1, #107	; 0x6b
    1a76:	0028      	movs	r0, r5
    1a78:	47c0      	blx	r8
    1a7a:	0001      	movs	r1, r0
	printf("\nread_ack1 : %d\n",read_ack1);
    1a7c:	4817      	ldr	r0, [pc, #92]	; (1adc <main+0x114>)
    1a7e:	47a0      	blx	r4
	printf("readbuffer1 : %x      \n",readbuffer1);
    1a80:	466b      	mov	r3, sp
    1a82:	7819      	ldrb	r1, [r3, #0]
    1a84:	4816      	ldr	r0, [pc, #88]	; (1ae0 <main+0x118>)
    1a86:	47a0      	blx	r4
	
	
		
	
	
}
    1a88:	2000      	movs	r0, #0
    1a8a:	b003      	add	sp, #12
    1a8c:	bc0c      	pop	{r2, r3}
    1a8e:	4690      	mov	r8, r2
    1a90:	4699      	mov	r9, r3
    1a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a94:	00000115 	.word	0x00000115
    1a98:	000017f5 	.word	0x000017f5
    1a9c:	000004ad 	.word	0x000004ad
    1aa0:	200000b8 	.word	0x200000b8
    1aa4:	00000629 	.word	0x00000629
    1aa8:	00000595 	.word	0x00000595
    1aac:	0000314c 	.word	0x0000314c
    1ab0:	00001ef1 	.word	0x00001ef1
    1ab4:	000005a1 	.word	0x000005a1
    1ab8:	00003160 	.word	0x00003160
    1abc:	000005e1 	.word	0x000005e1
    1ac0:	0000317c 	.word	0x0000317c
    1ac4:	00003190 	.word	0x00003190
    1ac8:	00000431 	.word	0x00000431
    1acc:	000031a4 	.word	0x000031a4
    1ad0:	000031b4 	.word	0x000031b4
    1ad4:	000005b5 	.word	0x000005b5
    1ad8:	000031c8 	.word	0x000031c8
    1adc:	000031d4 	.word	0x000031d4
    1ae0:	000031e8 	.word	0x000031e8

00001ae4 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1ae4:	b510      	push	{r4, lr}
    1ae6:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    1ae8:	2800      	cmp	r0, #0
    1aea:	d109      	bne.n	1b00 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1aec:	0011      	movs	r1, r2
    1aee:	0018      	movs	r0, r3
    1af0:	4b05      	ldr	r3, [pc, #20]	; (1b08 <_read+0x24>)
    1af2:	4798      	blx	r3
    1af4:	2800      	cmp	r0, #0
    1af6:	db00      	blt.n	1afa <_read+0x16>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1af8:	bd10      	pop	{r4, pc}
    1afa:	2001      	movs	r0, #1
    1afc:	4240      	negs	r0, r0
    1afe:	e7fb      	b.n	1af8 <_read+0x14>
		return -1;
    1b00:	2001      	movs	r0, #1
    1b02:	4240      	negs	r0, r0
    1b04:	e7f8      	b.n	1af8 <_read+0x14>
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	00001b61 	.word	0x00001b61

00001b0c <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1b0c:	b510      	push	{r4, lr}
    1b0e:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1b10:	3801      	subs	r0, #1
    1b12:	2802      	cmp	r0, #2
    1b14:	d809      	bhi.n	1b2a <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1b16:	0011      	movs	r1, r2
    1b18:	0018      	movs	r0, r3
    1b1a:	4b05      	ldr	r3, [pc, #20]	; (1b30 <_write+0x24>)
    1b1c:	4798      	blx	r3
    1b1e:	2800      	cmp	r0, #0
    1b20:	db00      	blt.n	1b24 <_write+0x18>
	if (n < 0) {
		return -1;
	}

	return n;
}
    1b22:	bd10      	pop	{r4, pc}
    1b24:	2001      	movs	r0, #1
    1b26:	4240      	negs	r0, r0
    1b28:	e7fb      	b.n	1b22 <_write+0x16>
		return -1;
    1b2a:	2001      	movs	r0, #1
    1b2c:	4240      	negs	r0, r0
    1b2e:	e7f8      	b.n	1b22 <_write+0x16>
    1b30:	00001b85 	.word	0x00001b85

00001b34 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1b34:	b570      	push	{r4, r5, r6, lr}
    1b36:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1b38:	4d06      	ldr	r5, [pc, #24]	; (1b54 <stdio_io_init+0x20>)
    1b3a:	682b      	ldr	r3, [r5, #0]
    1b3c:	6898      	ldr	r0, [r3, #8]
    1b3e:	2100      	movs	r1, #0
    1b40:	4c05      	ldr	r4, [pc, #20]	; (1b58 <stdio_io_init+0x24>)
    1b42:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1b44:	682b      	ldr	r3, [r5, #0]
    1b46:	6858      	ldr	r0, [r3, #4]
    1b48:	2100      	movs	r1, #0
    1b4a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1b4c:	4b03      	ldr	r3, [pc, #12]	; (1b5c <stdio_io_init+0x28>)
    1b4e:	601e      	str	r6, [r3, #0]
}
    1b50:	bd70      	pop	{r4, r5, r6, pc}
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	20000004 	.word	0x20000004
    1b58:	00002059 	.word	0x00002059
    1b5c:	200000a0 	.word	0x200000a0

00001b60 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1b60:	b510      	push	{r4, lr}
    1b62:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1b64:	4b05      	ldr	r3, [pc, #20]	; (1b7c <stdio_io_read+0x1c>)
    1b66:	6818      	ldr	r0, [r3, #0]
    1b68:	2800      	cmp	r0, #0
    1b6a:	d004      	beq.n	1b76 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1b6c:	b28a      	uxth	r2, r1
    1b6e:	0021      	movs	r1, r4
    1b70:	4b03      	ldr	r3, [pc, #12]	; (1b80 <stdio_io_read+0x20>)
    1b72:	4798      	blx	r3
}
    1b74:	bd10      	pop	{r4, pc}
		return 0;
    1b76:	2000      	movs	r0, #0
    1b78:	e7fc      	b.n	1b74 <stdio_io_read+0x14>
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	200000a0 	.word	0x200000a0
    1b80:	00000665 	.word	0x00000665

00001b84 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1b84:	b510      	push	{r4, lr}
    1b86:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1b88:	4b05      	ldr	r3, [pc, #20]	; (1ba0 <stdio_io_write+0x1c>)
    1b8a:	6818      	ldr	r0, [r3, #0]
    1b8c:	2800      	cmp	r0, #0
    1b8e:	d004      	beq.n	1b9a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1b90:	b28a      	uxth	r2, r1
    1b92:	0021      	movs	r1, r4
    1b94:	4b03      	ldr	r3, [pc, #12]	; (1ba4 <stdio_io_write+0x20>)
    1b96:	4798      	blx	r3
}
    1b98:	bd10      	pop	{r4, pc}
		return 0;
    1b9a:	2000      	movs	r0, #0
    1b9c:	e7fc      	b.n	1b98 <stdio_io_write+0x14>
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	200000a0 	.word	0x200000a0
    1ba4:	00000631 	.word	0x00000631

00001ba8 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1ba8:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    1baa:	4c04      	ldr	r4, [pc, #16]	; (1bbc <stdio_redirect_init+0x14>)
    1bac:	0020      	movs	r0, r4
    1bae:	4b04      	ldr	r3, [pc, #16]	; (1bc0 <stdio_redirect_init+0x18>)
    1bb0:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1bb2:	0020      	movs	r0, r4
    1bb4:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <stdio_redirect_init+0x1c>)
    1bb6:	4798      	blx	r3
}
    1bb8:	bd10      	pop	{r4, pc}
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	200000ac 	.word	0x200000ac
    1bc0:	000007c9 	.word	0x000007c9
    1bc4:	00001b35 	.word	0x00001b35

00001bc8 <__udivsi3>:
    1bc8:	2200      	movs	r2, #0
    1bca:	0843      	lsrs	r3, r0, #1
    1bcc:	428b      	cmp	r3, r1
    1bce:	d374      	bcc.n	1cba <__udivsi3+0xf2>
    1bd0:	0903      	lsrs	r3, r0, #4
    1bd2:	428b      	cmp	r3, r1
    1bd4:	d35f      	bcc.n	1c96 <__udivsi3+0xce>
    1bd6:	0a03      	lsrs	r3, r0, #8
    1bd8:	428b      	cmp	r3, r1
    1bda:	d344      	bcc.n	1c66 <__udivsi3+0x9e>
    1bdc:	0b03      	lsrs	r3, r0, #12
    1bde:	428b      	cmp	r3, r1
    1be0:	d328      	bcc.n	1c34 <__udivsi3+0x6c>
    1be2:	0c03      	lsrs	r3, r0, #16
    1be4:	428b      	cmp	r3, r1
    1be6:	d30d      	bcc.n	1c04 <__udivsi3+0x3c>
    1be8:	22ff      	movs	r2, #255	; 0xff
    1bea:	0209      	lsls	r1, r1, #8
    1bec:	ba12      	rev	r2, r2
    1bee:	0c03      	lsrs	r3, r0, #16
    1bf0:	428b      	cmp	r3, r1
    1bf2:	d302      	bcc.n	1bfa <__udivsi3+0x32>
    1bf4:	1212      	asrs	r2, r2, #8
    1bf6:	0209      	lsls	r1, r1, #8
    1bf8:	d065      	beq.n	1cc6 <__udivsi3+0xfe>
    1bfa:	0b03      	lsrs	r3, r0, #12
    1bfc:	428b      	cmp	r3, r1
    1bfe:	d319      	bcc.n	1c34 <__udivsi3+0x6c>
    1c00:	e000      	b.n	1c04 <__udivsi3+0x3c>
    1c02:	0a09      	lsrs	r1, r1, #8
    1c04:	0bc3      	lsrs	r3, r0, #15
    1c06:	428b      	cmp	r3, r1
    1c08:	d301      	bcc.n	1c0e <__udivsi3+0x46>
    1c0a:	03cb      	lsls	r3, r1, #15
    1c0c:	1ac0      	subs	r0, r0, r3
    1c0e:	4152      	adcs	r2, r2
    1c10:	0b83      	lsrs	r3, r0, #14
    1c12:	428b      	cmp	r3, r1
    1c14:	d301      	bcc.n	1c1a <__udivsi3+0x52>
    1c16:	038b      	lsls	r3, r1, #14
    1c18:	1ac0      	subs	r0, r0, r3
    1c1a:	4152      	adcs	r2, r2
    1c1c:	0b43      	lsrs	r3, r0, #13
    1c1e:	428b      	cmp	r3, r1
    1c20:	d301      	bcc.n	1c26 <__udivsi3+0x5e>
    1c22:	034b      	lsls	r3, r1, #13
    1c24:	1ac0      	subs	r0, r0, r3
    1c26:	4152      	adcs	r2, r2
    1c28:	0b03      	lsrs	r3, r0, #12
    1c2a:	428b      	cmp	r3, r1
    1c2c:	d301      	bcc.n	1c32 <__udivsi3+0x6a>
    1c2e:	030b      	lsls	r3, r1, #12
    1c30:	1ac0      	subs	r0, r0, r3
    1c32:	4152      	adcs	r2, r2
    1c34:	0ac3      	lsrs	r3, r0, #11
    1c36:	428b      	cmp	r3, r1
    1c38:	d301      	bcc.n	1c3e <__udivsi3+0x76>
    1c3a:	02cb      	lsls	r3, r1, #11
    1c3c:	1ac0      	subs	r0, r0, r3
    1c3e:	4152      	adcs	r2, r2
    1c40:	0a83      	lsrs	r3, r0, #10
    1c42:	428b      	cmp	r3, r1
    1c44:	d301      	bcc.n	1c4a <__udivsi3+0x82>
    1c46:	028b      	lsls	r3, r1, #10
    1c48:	1ac0      	subs	r0, r0, r3
    1c4a:	4152      	adcs	r2, r2
    1c4c:	0a43      	lsrs	r3, r0, #9
    1c4e:	428b      	cmp	r3, r1
    1c50:	d301      	bcc.n	1c56 <__udivsi3+0x8e>
    1c52:	024b      	lsls	r3, r1, #9
    1c54:	1ac0      	subs	r0, r0, r3
    1c56:	4152      	adcs	r2, r2
    1c58:	0a03      	lsrs	r3, r0, #8
    1c5a:	428b      	cmp	r3, r1
    1c5c:	d301      	bcc.n	1c62 <__udivsi3+0x9a>
    1c5e:	020b      	lsls	r3, r1, #8
    1c60:	1ac0      	subs	r0, r0, r3
    1c62:	4152      	adcs	r2, r2
    1c64:	d2cd      	bcs.n	1c02 <__udivsi3+0x3a>
    1c66:	09c3      	lsrs	r3, r0, #7
    1c68:	428b      	cmp	r3, r1
    1c6a:	d301      	bcc.n	1c70 <__udivsi3+0xa8>
    1c6c:	01cb      	lsls	r3, r1, #7
    1c6e:	1ac0      	subs	r0, r0, r3
    1c70:	4152      	adcs	r2, r2
    1c72:	0983      	lsrs	r3, r0, #6
    1c74:	428b      	cmp	r3, r1
    1c76:	d301      	bcc.n	1c7c <__udivsi3+0xb4>
    1c78:	018b      	lsls	r3, r1, #6
    1c7a:	1ac0      	subs	r0, r0, r3
    1c7c:	4152      	adcs	r2, r2
    1c7e:	0943      	lsrs	r3, r0, #5
    1c80:	428b      	cmp	r3, r1
    1c82:	d301      	bcc.n	1c88 <__udivsi3+0xc0>
    1c84:	014b      	lsls	r3, r1, #5
    1c86:	1ac0      	subs	r0, r0, r3
    1c88:	4152      	adcs	r2, r2
    1c8a:	0903      	lsrs	r3, r0, #4
    1c8c:	428b      	cmp	r3, r1
    1c8e:	d301      	bcc.n	1c94 <__udivsi3+0xcc>
    1c90:	010b      	lsls	r3, r1, #4
    1c92:	1ac0      	subs	r0, r0, r3
    1c94:	4152      	adcs	r2, r2
    1c96:	08c3      	lsrs	r3, r0, #3
    1c98:	428b      	cmp	r3, r1
    1c9a:	d301      	bcc.n	1ca0 <__udivsi3+0xd8>
    1c9c:	00cb      	lsls	r3, r1, #3
    1c9e:	1ac0      	subs	r0, r0, r3
    1ca0:	4152      	adcs	r2, r2
    1ca2:	0883      	lsrs	r3, r0, #2
    1ca4:	428b      	cmp	r3, r1
    1ca6:	d301      	bcc.n	1cac <__udivsi3+0xe4>
    1ca8:	008b      	lsls	r3, r1, #2
    1caa:	1ac0      	subs	r0, r0, r3
    1cac:	4152      	adcs	r2, r2
    1cae:	0843      	lsrs	r3, r0, #1
    1cb0:	428b      	cmp	r3, r1
    1cb2:	d301      	bcc.n	1cb8 <__udivsi3+0xf0>
    1cb4:	004b      	lsls	r3, r1, #1
    1cb6:	1ac0      	subs	r0, r0, r3
    1cb8:	4152      	adcs	r2, r2
    1cba:	1a41      	subs	r1, r0, r1
    1cbc:	d200      	bcs.n	1cc0 <__udivsi3+0xf8>
    1cbe:	4601      	mov	r1, r0
    1cc0:	4152      	adcs	r2, r2
    1cc2:	4610      	mov	r0, r2
    1cc4:	4770      	bx	lr
    1cc6:	e7ff      	b.n	1cc8 <__udivsi3+0x100>
    1cc8:	b501      	push	{r0, lr}
    1cca:	2000      	movs	r0, #0
    1ccc:	f000 f806 	bl	1cdc <__aeabi_idiv0>
    1cd0:	bd02      	pop	{r1, pc}
    1cd2:	46c0      	nop			; (mov r8, r8)

00001cd4 <__aeabi_uidivmod>:
    1cd4:	2900      	cmp	r1, #0
    1cd6:	d0f7      	beq.n	1cc8 <__udivsi3+0x100>
    1cd8:	e776      	b.n	1bc8 <__udivsi3>
    1cda:	4770      	bx	lr

00001cdc <__aeabi_idiv0>:
    1cdc:	4770      	bx	lr
    1cde:	46c0      	nop			; (mov r8, r8)

00001ce0 <__ffssi2>:
    1ce0:	b510      	push	{r4, lr}
    1ce2:	2300      	movs	r3, #0
    1ce4:	2800      	cmp	r0, #0
    1ce6:	d002      	beq.n	1cee <__ffssi2+0xe>
    1ce8:	f000 f804 	bl	1cf4 <__ctzsi2>
    1cec:	1c43      	adds	r3, r0, #1
    1cee:	0018      	movs	r0, r3
    1cf0:	bd10      	pop	{r4, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)

00001cf4 <__ctzsi2>:
    1cf4:	4241      	negs	r1, r0
    1cf6:	4008      	ands	r0, r1
    1cf8:	211c      	movs	r1, #28
    1cfa:	2301      	movs	r3, #1
    1cfc:	041b      	lsls	r3, r3, #16
    1cfe:	4298      	cmp	r0, r3
    1d00:	d301      	bcc.n	1d06 <__ctzsi2+0x12>
    1d02:	0c00      	lsrs	r0, r0, #16
    1d04:	3910      	subs	r1, #16
    1d06:	0a1b      	lsrs	r3, r3, #8
    1d08:	4298      	cmp	r0, r3
    1d0a:	d301      	bcc.n	1d10 <__ctzsi2+0x1c>
    1d0c:	0a00      	lsrs	r0, r0, #8
    1d0e:	3908      	subs	r1, #8
    1d10:	091b      	lsrs	r3, r3, #4
    1d12:	4298      	cmp	r0, r3
    1d14:	d301      	bcc.n	1d1a <__ctzsi2+0x26>
    1d16:	0900      	lsrs	r0, r0, #4
    1d18:	3904      	subs	r1, #4
    1d1a:	a202      	add	r2, pc, #8	; (adr r2, 1d24 <__ctzsi2+0x30>)
    1d1c:	5c10      	ldrb	r0, [r2, r0]
    1d1e:	1a40      	subs	r0, r0, r1
    1d20:	4770      	bx	lr
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	1d1d1c1b 	.word	0x1d1d1c1b
    1d28:	1e1e1e1e 	.word	0x1e1e1e1e
    1d2c:	1f1f1f1f 	.word	0x1f1f1f1f
    1d30:	1f1f1f1f 	.word	0x1f1f1f1f

00001d34 <__libc_init_array>:
    1d34:	b570      	push	{r4, r5, r6, lr}
    1d36:	2600      	movs	r6, #0
    1d38:	4d0c      	ldr	r5, [pc, #48]	; (1d6c <__libc_init_array+0x38>)
    1d3a:	4c0d      	ldr	r4, [pc, #52]	; (1d70 <__libc_init_array+0x3c>)
    1d3c:	1b64      	subs	r4, r4, r5
    1d3e:	10a4      	asrs	r4, r4, #2
    1d40:	42a6      	cmp	r6, r4
    1d42:	d109      	bne.n	1d58 <__libc_init_array+0x24>
    1d44:	2600      	movs	r6, #0
    1d46:	f001 faa7 	bl	3298 <_init>
    1d4a:	4d0a      	ldr	r5, [pc, #40]	; (1d74 <__libc_init_array+0x40>)
    1d4c:	4c0a      	ldr	r4, [pc, #40]	; (1d78 <__libc_init_array+0x44>)
    1d4e:	1b64      	subs	r4, r4, r5
    1d50:	10a4      	asrs	r4, r4, #2
    1d52:	42a6      	cmp	r6, r4
    1d54:	d105      	bne.n	1d62 <__libc_init_array+0x2e>
    1d56:	bd70      	pop	{r4, r5, r6, pc}
    1d58:	00b3      	lsls	r3, r6, #2
    1d5a:	58eb      	ldr	r3, [r5, r3]
    1d5c:	4798      	blx	r3
    1d5e:	3601      	adds	r6, #1
    1d60:	e7ee      	b.n	1d40 <__libc_init_array+0xc>
    1d62:	00b3      	lsls	r3, r6, #2
    1d64:	58eb      	ldr	r3, [r5, r3]
    1d66:	4798      	blx	r3
    1d68:	3601      	adds	r6, #1
    1d6a:	e7f2      	b.n	1d52 <__libc_init_array+0x1e>
    1d6c:	000032a4 	.word	0x000032a4
    1d70:	000032a4 	.word	0x000032a4
    1d74:	000032a4 	.word	0x000032a4
    1d78:	000032a8 	.word	0x000032a8

00001d7c <malloc>:
    1d7c:	b510      	push	{r4, lr}
    1d7e:	4b03      	ldr	r3, [pc, #12]	; (1d8c <malloc+0x10>)
    1d80:	0001      	movs	r1, r0
    1d82:	6818      	ldr	r0, [r3, #0]
    1d84:	f000 f856 	bl	1e34 <_malloc_r>
    1d88:	bd10      	pop	{r4, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	20000004 	.word	0x20000004

00001d90 <memset>:
    1d90:	0003      	movs	r3, r0
    1d92:	1882      	adds	r2, r0, r2
    1d94:	4293      	cmp	r3, r2
    1d96:	d100      	bne.n	1d9a <memset+0xa>
    1d98:	4770      	bx	lr
    1d9a:	7019      	strb	r1, [r3, #0]
    1d9c:	3301      	adds	r3, #1
    1d9e:	e7f9      	b.n	1d94 <memset+0x4>

00001da0 <_free_r>:
    1da0:	b570      	push	{r4, r5, r6, lr}
    1da2:	0005      	movs	r5, r0
    1da4:	2900      	cmp	r1, #0
    1da6:	d010      	beq.n	1dca <_free_r+0x2a>
    1da8:	1f0c      	subs	r4, r1, #4
    1daa:	6823      	ldr	r3, [r4, #0]
    1dac:	2b00      	cmp	r3, #0
    1dae:	da00      	bge.n	1db2 <_free_r+0x12>
    1db0:	18e4      	adds	r4, r4, r3
    1db2:	0028      	movs	r0, r5
    1db4:	f000 fccc 	bl	2750 <__malloc_lock>
    1db8:	4a1d      	ldr	r2, [pc, #116]	; (1e30 <_free_r+0x90>)
    1dba:	6813      	ldr	r3, [r2, #0]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d105      	bne.n	1dcc <_free_r+0x2c>
    1dc0:	6063      	str	r3, [r4, #4]
    1dc2:	6014      	str	r4, [r2, #0]
    1dc4:	0028      	movs	r0, r5
    1dc6:	f000 fcc4 	bl	2752 <__malloc_unlock>
    1dca:	bd70      	pop	{r4, r5, r6, pc}
    1dcc:	42a3      	cmp	r3, r4
    1dce:	d909      	bls.n	1de4 <_free_r+0x44>
    1dd0:	6821      	ldr	r1, [r4, #0]
    1dd2:	1860      	adds	r0, r4, r1
    1dd4:	4283      	cmp	r3, r0
    1dd6:	d1f3      	bne.n	1dc0 <_free_r+0x20>
    1dd8:	6818      	ldr	r0, [r3, #0]
    1dda:	685b      	ldr	r3, [r3, #4]
    1ddc:	1841      	adds	r1, r0, r1
    1dde:	6021      	str	r1, [r4, #0]
    1de0:	e7ee      	b.n	1dc0 <_free_r+0x20>
    1de2:	0013      	movs	r3, r2
    1de4:	685a      	ldr	r2, [r3, #4]
    1de6:	2a00      	cmp	r2, #0
    1de8:	d001      	beq.n	1dee <_free_r+0x4e>
    1dea:	42a2      	cmp	r2, r4
    1dec:	d9f9      	bls.n	1de2 <_free_r+0x42>
    1dee:	6819      	ldr	r1, [r3, #0]
    1df0:	1858      	adds	r0, r3, r1
    1df2:	42a0      	cmp	r0, r4
    1df4:	d10b      	bne.n	1e0e <_free_r+0x6e>
    1df6:	6820      	ldr	r0, [r4, #0]
    1df8:	1809      	adds	r1, r1, r0
    1dfa:	1858      	adds	r0, r3, r1
    1dfc:	6019      	str	r1, [r3, #0]
    1dfe:	4282      	cmp	r2, r0
    1e00:	d1e0      	bne.n	1dc4 <_free_r+0x24>
    1e02:	6810      	ldr	r0, [r2, #0]
    1e04:	6852      	ldr	r2, [r2, #4]
    1e06:	1841      	adds	r1, r0, r1
    1e08:	6019      	str	r1, [r3, #0]
    1e0a:	605a      	str	r2, [r3, #4]
    1e0c:	e7da      	b.n	1dc4 <_free_r+0x24>
    1e0e:	42a0      	cmp	r0, r4
    1e10:	d902      	bls.n	1e18 <_free_r+0x78>
    1e12:	230c      	movs	r3, #12
    1e14:	602b      	str	r3, [r5, #0]
    1e16:	e7d5      	b.n	1dc4 <_free_r+0x24>
    1e18:	6821      	ldr	r1, [r4, #0]
    1e1a:	1860      	adds	r0, r4, r1
    1e1c:	4282      	cmp	r2, r0
    1e1e:	d103      	bne.n	1e28 <_free_r+0x88>
    1e20:	6810      	ldr	r0, [r2, #0]
    1e22:	6852      	ldr	r2, [r2, #4]
    1e24:	1841      	adds	r1, r0, r1
    1e26:	6021      	str	r1, [r4, #0]
    1e28:	6062      	str	r2, [r4, #4]
    1e2a:	605c      	str	r4, [r3, #4]
    1e2c:	e7ca      	b.n	1dc4 <_free_r+0x24>
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	200000a4 	.word	0x200000a4

00001e34 <_malloc_r>:
    1e34:	2303      	movs	r3, #3
    1e36:	b570      	push	{r4, r5, r6, lr}
    1e38:	1ccd      	adds	r5, r1, #3
    1e3a:	439d      	bics	r5, r3
    1e3c:	3508      	adds	r5, #8
    1e3e:	0006      	movs	r6, r0
    1e40:	2d0c      	cmp	r5, #12
    1e42:	d21e      	bcs.n	1e82 <_malloc_r+0x4e>
    1e44:	250c      	movs	r5, #12
    1e46:	42a9      	cmp	r1, r5
    1e48:	d81d      	bhi.n	1e86 <_malloc_r+0x52>
    1e4a:	0030      	movs	r0, r6
    1e4c:	f000 fc80 	bl	2750 <__malloc_lock>
    1e50:	4a25      	ldr	r2, [pc, #148]	; (1ee8 <_malloc_r+0xb4>)
    1e52:	6814      	ldr	r4, [r2, #0]
    1e54:	0021      	movs	r1, r4
    1e56:	2900      	cmp	r1, #0
    1e58:	d119      	bne.n	1e8e <_malloc_r+0x5a>
    1e5a:	4c24      	ldr	r4, [pc, #144]	; (1eec <_malloc_r+0xb8>)
    1e5c:	6823      	ldr	r3, [r4, #0]
    1e5e:	2b00      	cmp	r3, #0
    1e60:	d103      	bne.n	1e6a <_malloc_r+0x36>
    1e62:	0030      	movs	r0, r6
    1e64:	f000 f8e6 	bl	2034 <_sbrk_r>
    1e68:	6020      	str	r0, [r4, #0]
    1e6a:	0029      	movs	r1, r5
    1e6c:	0030      	movs	r0, r6
    1e6e:	f000 f8e1 	bl	2034 <_sbrk_r>
    1e72:	1c43      	adds	r3, r0, #1
    1e74:	d12c      	bne.n	1ed0 <_malloc_r+0x9c>
    1e76:	230c      	movs	r3, #12
    1e78:	0030      	movs	r0, r6
    1e7a:	6033      	str	r3, [r6, #0]
    1e7c:	f000 fc69 	bl	2752 <__malloc_unlock>
    1e80:	e003      	b.n	1e8a <_malloc_r+0x56>
    1e82:	2d00      	cmp	r5, #0
    1e84:	dadf      	bge.n	1e46 <_malloc_r+0x12>
    1e86:	230c      	movs	r3, #12
    1e88:	6033      	str	r3, [r6, #0]
    1e8a:	2000      	movs	r0, #0
    1e8c:	bd70      	pop	{r4, r5, r6, pc}
    1e8e:	680b      	ldr	r3, [r1, #0]
    1e90:	1b5b      	subs	r3, r3, r5
    1e92:	d41a      	bmi.n	1eca <_malloc_r+0x96>
    1e94:	2b0b      	cmp	r3, #11
    1e96:	d903      	bls.n	1ea0 <_malloc_r+0x6c>
    1e98:	600b      	str	r3, [r1, #0]
    1e9a:	18cc      	adds	r4, r1, r3
    1e9c:	6025      	str	r5, [r4, #0]
    1e9e:	e003      	b.n	1ea8 <_malloc_r+0x74>
    1ea0:	428c      	cmp	r4, r1
    1ea2:	d10e      	bne.n	1ec2 <_malloc_r+0x8e>
    1ea4:	6863      	ldr	r3, [r4, #4]
    1ea6:	6013      	str	r3, [r2, #0]
    1ea8:	0030      	movs	r0, r6
    1eaa:	f000 fc52 	bl	2752 <__malloc_unlock>
    1eae:	0020      	movs	r0, r4
    1eb0:	2207      	movs	r2, #7
    1eb2:	300b      	adds	r0, #11
    1eb4:	1d23      	adds	r3, r4, #4
    1eb6:	4390      	bics	r0, r2
    1eb8:	1ac3      	subs	r3, r0, r3
    1eba:	d0e7      	beq.n	1e8c <_malloc_r+0x58>
    1ebc:	425a      	negs	r2, r3
    1ebe:	50e2      	str	r2, [r4, r3]
    1ec0:	e7e4      	b.n	1e8c <_malloc_r+0x58>
    1ec2:	684b      	ldr	r3, [r1, #4]
    1ec4:	6063      	str	r3, [r4, #4]
    1ec6:	000c      	movs	r4, r1
    1ec8:	e7ee      	b.n	1ea8 <_malloc_r+0x74>
    1eca:	000c      	movs	r4, r1
    1ecc:	6849      	ldr	r1, [r1, #4]
    1ece:	e7c2      	b.n	1e56 <_malloc_r+0x22>
    1ed0:	2303      	movs	r3, #3
    1ed2:	1cc4      	adds	r4, r0, #3
    1ed4:	439c      	bics	r4, r3
    1ed6:	42a0      	cmp	r0, r4
    1ed8:	d0e0      	beq.n	1e9c <_malloc_r+0x68>
    1eda:	1a21      	subs	r1, r4, r0
    1edc:	0030      	movs	r0, r6
    1ede:	f000 f8a9 	bl	2034 <_sbrk_r>
    1ee2:	1c43      	adds	r3, r0, #1
    1ee4:	d1da      	bne.n	1e9c <_malloc_r+0x68>
    1ee6:	e7c6      	b.n	1e76 <_malloc_r+0x42>
    1ee8:	200000a4 	.word	0x200000a4
    1eec:	200000a8 	.word	0x200000a8

00001ef0 <iprintf>:
    1ef0:	b40f      	push	{r0, r1, r2, r3}
    1ef2:	4b0b      	ldr	r3, [pc, #44]	; (1f20 <iprintf+0x30>)
    1ef4:	b513      	push	{r0, r1, r4, lr}
    1ef6:	681c      	ldr	r4, [r3, #0]
    1ef8:	2c00      	cmp	r4, #0
    1efa:	d005      	beq.n	1f08 <iprintf+0x18>
    1efc:	69a3      	ldr	r3, [r4, #24]
    1efe:	2b00      	cmp	r3, #0
    1f00:	d102      	bne.n	1f08 <iprintf+0x18>
    1f02:	0020      	movs	r0, r4
    1f04:	f000 fb22 	bl	254c <__sinit>
    1f08:	ab05      	add	r3, sp, #20
    1f0a:	9a04      	ldr	r2, [sp, #16]
    1f0c:	68a1      	ldr	r1, [r4, #8]
    1f0e:	0020      	movs	r0, r4
    1f10:	9301      	str	r3, [sp, #4]
    1f12:	f000 fc6d 	bl	27f0 <_vfiprintf_r>
    1f16:	bc16      	pop	{r1, r2, r4}
    1f18:	bc08      	pop	{r3}
    1f1a:	b004      	add	sp, #16
    1f1c:	4718      	bx	r3
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	20000004 	.word	0x20000004

00001f24 <putchar>:
    1f24:	4b08      	ldr	r3, [pc, #32]	; (1f48 <putchar+0x24>)
    1f26:	b570      	push	{r4, r5, r6, lr}
    1f28:	681c      	ldr	r4, [r3, #0]
    1f2a:	0005      	movs	r5, r0
    1f2c:	2c00      	cmp	r4, #0
    1f2e:	d005      	beq.n	1f3c <putchar+0x18>
    1f30:	69a3      	ldr	r3, [r4, #24]
    1f32:	2b00      	cmp	r3, #0
    1f34:	d102      	bne.n	1f3c <putchar+0x18>
    1f36:	0020      	movs	r0, r4
    1f38:	f000 fb08 	bl	254c <__sinit>
    1f3c:	0029      	movs	r1, r5
    1f3e:	68a2      	ldr	r2, [r4, #8]
    1f40:	0020      	movs	r0, r4
    1f42:	f000 fef9 	bl	2d38 <_putc_r>
    1f46:	bd70      	pop	{r4, r5, r6, pc}
    1f48:	20000004 	.word	0x20000004

00001f4c <_puts_r>:
    1f4c:	b570      	push	{r4, r5, r6, lr}
    1f4e:	0005      	movs	r5, r0
    1f50:	000e      	movs	r6, r1
    1f52:	2800      	cmp	r0, #0
    1f54:	d004      	beq.n	1f60 <_puts_r+0x14>
    1f56:	6983      	ldr	r3, [r0, #24]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d101      	bne.n	1f60 <_puts_r+0x14>
    1f5c:	f000 faf6 	bl	254c <__sinit>
    1f60:	69ab      	ldr	r3, [r5, #24]
    1f62:	68ac      	ldr	r4, [r5, #8]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d102      	bne.n	1f6e <_puts_r+0x22>
    1f68:	0028      	movs	r0, r5
    1f6a:	f000 faef 	bl	254c <__sinit>
    1f6e:	4b24      	ldr	r3, [pc, #144]	; (2000 <STACK_SIZE>)
    1f70:	429c      	cmp	r4, r3
    1f72:	d10f      	bne.n	1f94 <_puts_r+0x48>
    1f74:	686c      	ldr	r4, [r5, #4]
    1f76:	89a3      	ldrh	r3, [r4, #12]
    1f78:	071b      	lsls	r3, r3, #28
    1f7a:	d502      	bpl.n	1f82 <_puts_r+0x36>
    1f7c:	6923      	ldr	r3, [r4, #16]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d120      	bne.n	1fc4 <_puts_r+0x78>
    1f82:	0021      	movs	r1, r4
    1f84:	0028      	movs	r0, r5
    1f86:	f000 f973 	bl	2270 <__swsetup_r>
    1f8a:	2800      	cmp	r0, #0
    1f8c:	d01a      	beq.n	1fc4 <_puts_r+0x78>
    1f8e:	2001      	movs	r0, #1
    1f90:	4240      	negs	r0, r0
    1f92:	bd70      	pop	{r4, r5, r6, pc}
    1f94:	4b1b      	ldr	r3, [pc, #108]	; (2004 <STACK_SIZE+0x4>)
    1f96:	429c      	cmp	r4, r3
    1f98:	d101      	bne.n	1f9e <_puts_r+0x52>
    1f9a:	68ac      	ldr	r4, [r5, #8]
    1f9c:	e7eb      	b.n	1f76 <_puts_r+0x2a>
    1f9e:	4b1a      	ldr	r3, [pc, #104]	; (2008 <STACK_SIZE+0x8>)
    1fa0:	429c      	cmp	r4, r3
    1fa2:	d1e8      	bne.n	1f76 <_puts_r+0x2a>
    1fa4:	68ec      	ldr	r4, [r5, #12]
    1fa6:	e7e6      	b.n	1f76 <_puts_r+0x2a>
    1fa8:	3b01      	subs	r3, #1
    1faa:	3601      	adds	r6, #1
    1fac:	60a3      	str	r3, [r4, #8]
    1fae:	2b00      	cmp	r3, #0
    1fb0:	da04      	bge.n	1fbc <_puts_r+0x70>
    1fb2:	69a2      	ldr	r2, [r4, #24]
    1fb4:	4293      	cmp	r3, r2
    1fb6:	db16      	blt.n	1fe6 <_puts_r+0x9a>
    1fb8:	290a      	cmp	r1, #10
    1fba:	d014      	beq.n	1fe6 <_puts_r+0x9a>
    1fbc:	6823      	ldr	r3, [r4, #0]
    1fbe:	1c5a      	adds	r2, r3, #1
    1fc0:	6022      	str	r2, [r4, #0]
    1fc2:	7019      	strb	r1, [r3, #0]
    1fc4:	7831      	ldrb	r1, [r6, #0]
    1fc6:	68a3      	ldr	r3, [r4, #8]
    1fc8:	2900      	cmp	r1, #0
    1fca:	d1ed      	bne.n	1fa8 <_puts_r+0x5c>
    1fcc:	3b01      	subs	r3, #1
    1fce:	60a3      	str	r3, [r4, #8]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	da0f      	bge.n	1ff4 <_puts_r+0xa8>
    1fd4:	0022      	movs	r2, r4
    1fd6:	310a      	adds	r1, #10
    1fd8:	0028      	movs	r0, r5
    1fda:	f000 f8f3 	bl	21c4 <__swbuf_r>
    1fde:	1c43      	adds	r3, r0, #1
    1fe0:	d0d5      	beq.n	1f8e <_puts_r+0x42>
    1fe2:	200a      	movs	r0, #10
    1fe4:	e7d5      	b.n	1f92 <_puts_r+0x46>
    1fe6:	0022      	movs	r2, r4
    1fe8:	0028      	movs	r0, r5
    1fea:	f000 f8eb 	bl	21c4 <__swbuf_r>
    1fee:	1c43      	adds	r3, r0, #1
    1ff0:	d1e8      	bne.n	1fc4 <_puts_r+0x78>
    1ff2:	e7cc      	b.n	1f8e <_puts_r+0x42>
    1ff4:	200a      	movs	r0, #10
    1ff6:	6823      	ldr	r3, [r4, #0]
    1ff8:	1c5a      	adds	r2, r3, #1
    1ffa:	6022      	str	r2, [r4, #0]
    1ffc:	7018      	strb	r0, [r3, #0]
    1ffe:	e7c8      	b.n	1f92 <_puts_r+0x46>
    2000:	00003224 	.word	0x00003224
    2004:	00003244 	.word	0x00003244
    2008:	00003204 	.word	0x00003204

0000200c <puts>:
    200c:	b510      	push	{r4, lr}
    200e:	4b03      	ldr	r3, [pc, #12]	; (201c <puts+0x10>)
    2010:	0001      	movs	r1, r0
    2012:	6818      	ldr	r0, [r3, #0]
    2014:	f7ff ff9a 	bl	1f4c <_puts_r>
    2018:	bd10      	pop	{r4, pc}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	20000004 	.word	0x20000004

00002020 <realloc>:
    2020:	b510      	push	{r4, lr}
    2022:	4b03      	ldr	r3, [pc, #12]	; (2030 <realloc+0x10>)
    2024:	000a      	movs	r2, r1
    2026:	0001      	movs	r1, r0
    2028:	6818      	ldr	r0, [r3, #0]
    202a:	f000 fb93 	bl	2754 <_realloc_r>
    202e:	bd10      	pop	{r4, pc}
    2030:	20000004 	.word	0x20000004

00002034 <_sbrk_r>:
    2034:	2300      	movs	r3, #0
    2036:	b570      	push	{r4, r5, r6, lr}
    2038:	4c06      	ldr	r4, [pc, #24]	; (2054 <_sbrk_r+0x20>)
    203a:	0005      	movs	r5, r0
    203c:	0008      	movs	r0, r1
    203e:	6023      	str	r3, [r4, #0]
    2040:	f7fe fbdc 	bl	7fc <_sbrk>
    2044:	1c43      	adds	r3, r0, #1
    2046:	d103      	bne.n	2050 <_sbrk_r+0x1c>
    2048:	6823      	ldr	r3, [r4, #0]
    204a:	2b00      	cmp	r3, #0
    204c:	d000      	beq.n	2050 <_sbrk_r+0x1c>
    204e:	602b      	str	r3, [r5, #0]
    2050:	bd70      	pop	{r4, r5, r6, pc}
    2052:	46c0      	nop			; (mov r8, r8)
    2054:	200000d8 	.word	0x200000d8

00002058 <setbuf>:
    2058:	424a      	negs	r2, r1
    205a:	414a      	adcs	r2, r1
    205c:	2380      	movs	r3, #128	; 0x80
    205e:	b510      	push	{r4, lr}
    2060:	0052      	lsls	r2, r2, #1
    2062:	00db      	lsls	r3, r3, #3
    2064:	f000 f802 	bl	206c <setvbuf>
    2068:	bd10      	pop	{r4, pc}
	...

0000206c <setvbuf>:
    206c:	b5f0      	push	{r4, r5, r6, r7, lr}
    206e:	001d      	movs	r5, r3
    2070:	4b4f      	ldr	r3, [pc, #316]	; (21b0 <setvbuf+0x144>)
    2072:	b085      	sub	sp, #20
    2074:	681e      	ldr	r6, [r3, #0]
    2076:	0004      	movs	r4, r0
    2078:	000f      	movs	r7, r1
    207a:	9200      	str	r2, [sp, #0]
    207c:	2e00      	cmp	r6, #0
    207e:	d005      	beq.n	208c <setvbuf+0x20>
    2080:	69b3      	ldr	r3, [r6, #24]
    2082:	2b00      	cmp	r3, #0
    2084:	d102      	bne.n	208c <setvbuf+0x20>
    2086:	0030      	movs	r0, r6
    2088:	f000 fa60 	bl	254c <__sinit>
    208c:	4b49      	ldr	r3, [pc, #292]	; (21b4 <setvbuf+0x148>)
    208e:	429c      	cmp	r4, r3
    2090:	d150      	bne.n	2134 <setvbuf+0xc8>
    2092:	6874      	ldr	r4, [r6, #4]
    2094:	9b00      	ldr	r3, [sp, #0]
    2096:	2b02      	cmp	r3, #2
    2098:	d005      	beq.n	20a6 <setvbuf+0x3a>
    209a:	2b01      	cmp	r3, #1
    209c:	d900      	bls.n	20a0 <setvbuf+0x34>
    209e:	e084      	b.n	21aa <setvbuf+0x13e>
    20a0:	2d00      	cmp	r5, #0
    20a2:	da00      	bge.n	20a6 <setvbuf+0x3a>
    20a4:	e081      	b.n	21aa <setvbuf+0x13e>
    20a6:	0021      	movs	r1, r4
    20a8:	0030      	movs	r0, r6
    20aa:	f000 f9e1 	bl	2470 <_fflush_r>
    20ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    20b0:	2900      	cmp	r1, #0
    20b2:	d008      	beq.n	20c6 <setvbuf+0x5a>
    20b4:	0023      	movs	r3, r4
    20b6:	3344      	adds	r3, #68	; 0x44
    20b8:	4299      	cmp	r1, r3
    20ba:	d002      	beq.n	20c2 <setvbuf+0x56>
    20bc:	0030      	movs	r0, r6
    20be:	f7ff fe6f 	bl	1da0 <_free_r>
    20c2:	2300      	movs	r3, #0
    20c4:	6363      	str	r3, [r4, #52]	; 0x34
    20c6:	2300      	movs	r3, #0
    20c8:	61a3      	str	r3, [r4, #24]
    20ca:	6063      	str	r3, [r4, #4]
    20cc:	89a3      	ldrh	r3, [r4, #12]
    20ce:	061b      	lsls	r3, r3, #24
    20d0:	d503      	bpl.n	20da <setvbuf+0x6e>
    20d2:	6921      	ldr	r1, [r4, #16]
    20d4:	0030      	movs	r0, r6
    20d6:	f7ff fe63 	bl	1da0 <_free_r>
    20da:	89a3      	ldrh	r3, [r4, #12]
    20dc:	4a36      	ldr	r2, [pc, #216]	; (21b8 <setvbuf+0x14c>)
    20de:	4013      	ands	r3, r2
    20e0:	81a3      	strh	r3, [r4, #12]
    20e2:	9b00      	ldr	r3, [sp, #0]
    20e4:	2b02      	cmp	r3, #2
    20e6:	d05a      	beq.n	219e <setvbuf+0x132>
    20e8:	ab03      	add	r3, sp, #12
    20ea:	aa02      	add	r2, sp, #8
    20ec:	0021      	movs	r1, r4
    20ee:	0030      	movs	r0, r6
    20f0:	f000 fac2 	bl	2678 <__swhatbuf_r>
    20f4:	89a3      	ldrh	r3, [r4, #12]
    20f6:	4318      	orrs	r0, r3
    20f8:	81a0      	strh	r0, [r4, #12]
    20fa:	2d00      	cmp	r5, #0
    20fc:	d124      	bne.n	2148 <setvbuf+0xdc>
    20fe:	9d02      	ldr	r5, [sp, #8]
    2100:	0028      	movs	r0, r5
    2102:	f7ff fe3b 	bl	1d7c <malloc>
    2106:	9501      	str	r5, [sp, #4]
    2108:	1e07      	subs	r7, r0, #0
    210a:	d142      	bne.n	2192 <setvbuf+0x126>
    210c:	9b02      	ldr	r3, [sp, #8]
    210e:	9301      	str	r3, [sp, #4]
    2110:	42ab      	cmp	r3, r5
    2112:	d139      	bne.n	2188 <setvbuf+0x11c>
    2114:	2001      	movs	r0, #1
    2116:	4240      	negs	r0, r0
    2118:	2302      	movs	r3, #2
    211a:	89a2      	ldrh	r2, [r4, #12]
    211c:	4313      	orrs	r3, r2
    211e:	81a3      	strh	r3, [r4, #12]
    2120:	2300      	movs	r3, #0
    2122:	60a3      	str	r3, [r4, #8]
    2124:	0023      	movs	r3, r4
    2126:	3347      	adds	r3, #71	; 0x47
    2128:	6023      	str	r3, [r4, #0]
    212a:	6123      	str	r3, [r4, #16]
    212c:	2301      	movs	r3, #1
    212e:	6163      	str	r3, [r4, #20]
    2130:	b005      	add	sp, #20
    2132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2134:	4b21      	ldr	r3, [pc, #132]	; (21bc <setvbuf+0x150>)
    2136:	429c      	cmp	r4, r3
    2138:	d101      	bne.n	213e <setvbuf+0xd2>
    213a:	68b4      	ldr	r4, [r6, #8]
    213c:	e7aa      	b.n	2094 <setvbuf+0x28>
    213e:	4b20      	ldr	r3, [pc, #128]	; (21c0 <setvbuf+0x154>)
    2140:	429c      	cmp	r4, r3
    2142:	d1a7      	bne.n	2094 <setvbuf+0x28>
    2144:	68f4      	ldr	r4, [r6, #12]
    2146:	e7a5      	b.n	2094 <setvbuf+0x28>
    2148:	2f00      	cmp	r7, #0
    214a:	d0d9      	beq.n	2100 <setvbuf+0x94>
    214c:	69b3      	ldr	r3, [r6, #24]
    214e:	2b00      	cmp	r3, #0
    2150:	d102      	bne.n	2158 <setvbuf+0xec>
    2152:	0030      	movs	r0, r6
    2154:	f000 f9fa 	bl	254c <__sinit>
    2158:	9b00      	ldr	r3, [sp, #0]
    215a:	2b01      	cmp	r3, #1
    215c:	d103      	bne.n	2166 <setvbuf+0xfa>
    215e:	89a3      	ldrh	r3, [r4, #12]
    2160:	9a00      	ldr	r2, [sp, #0]
    2162:	431a      	orrs	r2, r3
    2164:	81a2      	strh	r2, [r4, #12]
    2166:	2008      	movs	r0, #8
    2168:	89a3      	ldrh	r3, [r4, #12]
    216a:	6027      	str	r7, [r4, #0]
    216c:	6127      	str	r7, [r4, #16]
    216e:	6165      	str	r5, [r4, #20]
    2170:	4018      	ands	r0, r3
    2172:	d018      	beq.n	21a6 <setvbuf+0x13a>
    2174:	2001      	movs	r0, #1
    2176:	4018      	ands	r0, r3
    2178:	2300      	movs	r3, #0
    217a:	4298      	cmp	r0, r3
    217c:	d011      	beq.n	21a2 <setvbuf+0x136>
    217e:	426d      	negs	r5, r5
    2180:	60a3      	str	r3, [r4, #8]
    2182:	61a5      	str	r5, [r4, #24]
    2184:	0018      	movs	r0, r3
    2186:	e7d3      	b.n	2130 <setvbuf+0xc4>
    2188:	9801      	ldr	r0, [sp, #4]
    218a:	f7ff fdf7 	bl	1d7c <malloc>
    218e:	1e07      	subs	r7, r0, #0
    2190:	d0c0      	beq.n	2114 <setvbuf+0xa8>
    2192:	2380      	movs	r3, #128	; 0x80
    2194:	89a2      	ldrh	r2, [r4, #12]
    2196:	9d01      	ldr	r5, [sp, #4]
    2198:	4313      	orrs	r3, r2
    219a:	81a3      	strh	r3, [r4, #12]
    219c:	e7d6      	b.n	214c <setvbuf+0xe0>
    219e:	2000      	movs	r0, #0
    21a0:	e7ba      	b.n	2118 <setvbuf+0xac>
    21a2:	60a5      	str	r5, [r4, #8]
    21a4:	e7c4      	b.n	2130 <setvbuf+0xc4>
    21a6:	60a0      	str	r0, [r4, #8]
    21a8:	e7c2      	b.n	2130 <setvbuf+0xc4>
    21aa:	2001      	movs	r0, #1
    21ac:	4240      	negs	r0, r0
    21ae:	e7bf      	b.n	2130 <setvbuf+0xc4>
    21b0:	20000004 	.word	0x20000004
    21b4:	00003224 	.word	0x00003224
    21b8:	fffff35c 	.word	0xfffff35c
    21bc:	00003244 	.word	0x00003244
    21c0:	00003204 	.word	0x00003204

000021c4 <__swbuf_r>:
    21c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21c6:	0005      	movs	r5, r0
    21c8:	000e      	movs	r6, r1
    21ca:	0014      	movs	r4, r2
    21cc:	2800      	cmp	r0, #0
    21ce:	d004      	beq.n	21da <__swbuf_r+0x16>
    21d0:	6983      	ldr	r3, [r0, #24]
    21d2:	2b00      	cmp	r3, #0
    21d4:	d101      	bne.n	21da <__swbuf_r+0x16>
    21d6:	f000 f9b9 	bl	254c <__sinit>
    21da:	4b22      	ldr	r3, [pc, #136]	; (2264 <__swbuf_r+0xa0>)
    21dc:	429c      	cmp	r4, r3
    21de:	d12d      	bne.n	223c <__swbuf_r+0x78>
    21e0:	686c      	ldr	r4, [r5, #4]
    21e2:	69a3      	ldr	r3, [r4, #24]
    21e4:	60a3      	str	r3, [r4, #8]
    21e6:	89a3      	ldrh	r3, [r4, #12]
    21e8:	071b      	lsls	r3, r3, #28
    21ea:	d531      	bpl.n	2250 <__swbuf_r+0x8c>
    21ec:	6923      	ldr	r3, [r4, #16]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d02e      	beq.n	2250 <__swbuf_r+0x8c>
    21f2:	6823      	ldr	r3, [r4, #0]
    21f4:	6922      	ldr	r2, [r4, #16]
    21f6:	b2f7      	uxtb	r7, r6
    21f8:	1a98      	subs	r0, r3, r2
    21fa:	6963      	ldr	r3, [r4, #20]
    21fc:	b2f6      	uxtb	r6, r6
    21fe:	4298      	cmp	r0, r3
    2200:	db05      	blt.n	220e <__swbuf_r+0x4a>
    2202:	0021      	movs	r1, r4
    2204:	0028      	movs	r0, r5
    2206:	f000 f933 	bl	2470 <_fflush_r>
    220a:	2800      	cmp	r0, #0
    220c:	d126      	bne.n	225c <__swbuf_r+0x98>
    220e:	68a3      	ldr	r3, [r4, #8]
    2210:	3001      	adds	r0, #1
    2212:	3b01      	subs	r3, #1
    2214:	60a3      	str	r3, [r4, #8]
    2216:	6823      	ldr	r3, [r4, #0]
    2218:	1c5a      	adds	r2, r3, #1
    221a:	6022      	str	r2, [r4, #0]
    221c:	701f      	strb	r7, [r3, #0]
    221e:	6963      	ldr	r3, [r4, #20]
    2220:	4298      	cmp	r0, r3
    2222:	d004      	beq.n	222e <__swbuf_r+0x6a>
    2224:	89a3      	ldrh	r3, [r4, #12]
    2226:	07db      	lsls	r3, r3, #31
    2228:	d51a      	bpl.n	2260 <__swbuf_r+0x9c>
    222a:	2e0a      	cmp	r6, #10
    222c:	d118      	bne.n	2260 <__swbuf_r+0x9c>
    222e:	0021      	movs	r1, r4
    2230:	0028      	movs	r0, r5
    2232:	f000 f91d 	bl	2470 <_fflush_r>
    2236:	2800      	cmp	r0, #0
    2238:	d012      	beq.n	2260 <__swbuf_r+0x9c>
    223a:	e00f      	b.n	225c <__swbuf_r+0x98>
    223c:	4b0a      	ldr	r3, [pc, #40]	; (2268 <__swbuf_r+0xa4>)
    223e:	429c      	cmp	r4, r3
    2240:	d101      	bne.n	2246 <__swbuf_r+0x82>
    2242:	68ac      	ldr	r4, [r5, #8]
    2244:	e7cd      	b.n	21e2 <__swbuf_r+0x1e>
    2246:	4b09      	ldr	r3, [pc, #36]	; (226c <__swbuf_r+0xa8>)
    2248:	429c      	cmp	r4, r3
    224a:	d1ca      	bne.n	21e2 <__swbuf_r+0x1e>
    224c:	68ec      	ldr	r4, [r5, #12]
    224e:	e7c8      	b.n	21e2 <__swbuf_r+0x1e>
    2250:	0021      	movs	r1, r4
    2252:	0028      	movs	r0, r5
    2254:	f000 f80c 	bl	2270 <__swsetup_r>
    2258:	2800      	cmp	r0, #0
    225a:	d0ca      	beq.n	21f2 <__swbuf_r+0x2e>
    225c:	2601      	movs	r6, #1
    225e:	4276      	negs	r6, r6
    2260:	0030      	movs	r0, r6
    2262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2264:	00003224 	.word	0x00003224
    2268:	00003244 	.word	0x00003244
    226c:	00003204 	.word	0x00003204

00002270 <__swsetup_r>:
    2270:	4b36      	ldr	r3, [pc, #216]	; (234c <__swsetup_r+0xdc>)
    2272:	b570      	push	{r4, r5, r6, lr}
    2274:	681d      	ldr	r5, [r3, #0]
    2276:	0006      	movs	r6, r0
    2278:	000c      	movs	r4, r1
    227a:	2d00      	cmp	r5, #0
    227c:	d005      	beq.n	228a <__swsetup_r+0x1a>
    227e:	69ab      	ldr	r3, [r5, #24]
    2280:	2b00      	cmp	r3, #0
    2282:	d102      	bne.n	228a <__swsetup_r+0x1a>
    2284:	0028      	movs	r0, r5
    2286:	f000 f961 	bl	254c <__sinit>
    228a:	4b31      	ldr	r3, [pc, #196]	; (2350 <__swsetup_r+0xe0>)
    228c:	429c      	cmp	r4, r3
    228e:	d10f      	bne.n	22b0 <__swsetup_r+0x40>
    2290:	686c      	ldr	r4, [r5, #4]
    2292:	230c      	movs	r3, #12
    2294:	5ee2      	ldrsh	r2, [r4, r3]
    2296:	b293      	uxth	r3, r2
    2298:	0719      	lsls	r1, r3, #28
    229a:	d42d      	bmi.n	22f8 <__swsetup_r+0x88>
    229c:	06d9      	lsls	r1, r3, #27
    229e:	d411      	bmi.n	22c4 <__swsetup_r+0x54>
    22a0:	2309      	movs	r3, #9
    22a2:	2001      	movs	r0, #1
    22a4:	6033      	str	r3, [r6, #0]
    22a6:	3337      	adds	r3, #55	; 0x37
    22a8:	4313      	orrs	r3, r2
    22aa:	81a3      	strh	r3, [r4, #12]
    22ac:	4240      	negs	r0, r0
    22ae:	bd70      	pop	{r4, r5, r6, pc}
    22b0:	4b28      	ldr	r3, [pc, #160]	; (2354 <__swsetup_r+0xe4>)
    22b2:	429c      	cmp	r4, r3
    22b4:	d101      	bne.n	22ba <__swsetup_r+0x4a>
    22b6:	68ac      	ldr	r4, [r5, #8]
    22b8:	e7eb      	b.n	2292 <__swsetup_r+0x22>
    22ba:	4b27      	ldr	r3, [pc, #156]	; (2358 <__swsetup_r+0xe8>)
    22bc:	429c      	cmp	r4, r3
    22be:	d1e8      	bne.n	2292 <__swsetup_r+0x22>
    22c0:	68ec      	ldr	r4, [r5, #12]
    22c2:	e7e6      	b.n	2292 <__swsetup_r+0x22>
    22c4:	075b      	lsls	r3, r3, #29
    22c6:	d513      	bpl.n	22f0 <__swsetup_r+0x80>
    22c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    22ca:	2900      	cmp	r1, #0
    22cc:	d008      	beq.n	22e0 <__swsetup_r+0x70>
    22ce:	0023      	movs	r3, r4
    22d0:	3344      	adds	r3, #68	; 0x44
    22d2:	4299      	cmp	r1, r3
    22d4:	d002      	beq.n	22dc <__swsetup_r+0x6c>
    22d6:	0030      	movs	r0, r6
    22d8:	f7ff fd62 	bl	1da0 <_free_r>
    22dc:	2300      	movs	r3, #0
    22de:	6363      	str	r3, [r4, #52]	; 0x34
    22e0:	2224      	movs	r2, #36	; 0x24
    22e2:	89a3      	ldrh	r3, [r4, #12]
    22e4:	4393      	bics	r3, r2
    22e6:	81a3      	strh	r3, [r4, #12]
    22e8:	2300      	movs	r3, #0
    22ea:	6063      	str	r3, [r4, #4]
    22ec:	6923      	ldr	r3, [r4, #16]
    22ee:	6023      	str	r3, [r4, #0]
    22f0:	2308      	movs	r3, #8
    22f2:	89a2      	ldrh	r2, [r4, #12]
    22f4:	4313      	orrs	r3, r2
    22f6:	81a3      	strh	r3, [r4, #12]
    22f8:	6923      	ldr	r3, [r4, #16]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d10b      	bne.n	2316 <__swsetup_r+0xa6>
    22fe:	21a0      	movs	r1, #160	; 0xa0
    2300:	2280      	movs	r2, #128	; 0x80
    2302:	89a3      	ldrh	r3, [r4, #12]
    2304:	0089      	lsls	r1, r1, #2
    2306:	0092      	lsls	r2, r2, #2
    2308:	400b      	ands	r3, r1
    230a:	4293      	cmp	r3, r2
    230c:	d003      	beq.n	2316 <__swsetup_r+0xa6>
    230e:	0021      	movs	r1, r4
    2310:	0030      	movs	r0, r6
    2312:	f000 f9d9 	bl	26c8 <__smakebuf_r>
    2316:	2301      	movs	r3, #1
    2318:	89a2      	ldrh	r2, [r4, #12]
    231a:	4013      	ands	r3, r2
    231c:	d011      	beq.n	2342 <__swsetup_r+0xd2>
    231e:	2300      	movs	r3, #0
    2320:	60a3      	str	r3, [r4, #8]
    2322:	6963      	ldr	r3, [r4, #20]
    2324:	425b      	negs	r3, r3
    2326:	61a3      	str	r3, [r4, #24]
    2328:	2000      	movs	r0, #0
    232a:	6923      	ldr	r3, [r4, #16]
    232c:	4283      	cmp	r3, r0
    232e:	d1be      	bne.n	22ae <__swsetup_r+0x3e>
    2330:	230c      	movs	r3, #12
    2332:	5ee2      	ldrsh	r2, [r4, r3]
    2334:	0613      	lsls	r3, r2, #24
    2336:	d5ba      	bpl.n	22ae <__swsetup_r+0x3e>
    2338:	2340      	movs	r3, #64	; 0x40
    233a:	4313      	orrs	r3, r2
    233c:	81a3      	strh	r3, [r4, #12]
    233e:	3801      	subs	r0, #1
    2340:	e7b5      	b.n	22ae <__swsetup_r+0x3e>
    2342:	0792      	lsls	r2, r2, #30
    2344:	d400      	bmi.n	2348 <__swsetup_r+0xd8>
    2346:	6963      	ldr	r3, [r4, #20]
    2348:	60a3      	str	r3, [r4, #8]
    234a:	e7ed      	b.n	2328 <__swsetup_r+0xb8>
    234c:	20000004 	.word	0x20000004
    2350:	00003224 	.word	0x00003224
    2354:	00003244 	.word	0x00003244
    2358:	00003204 	.word	0x00003204

0000235c <__sflush_r>:
    235c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    235e:	898a      	ldrh	r2, [r1, #12]
    2360:	0005      	movs	r5, r0
    2362:	000c      	movs	r4, r1
    2364:	0713      	lsls	r3, r2, #28
    2366:	d460      	bmi.n	242a <__sflush_r+0xce>
    2368:	684b      	ldr	r3, [r1, #4]
    236a:	2b00      	cmp	r3, #0
    236c:	dc04      	bgt.n	2378 <__sflush_r+0x1c>
    236e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2370:	2b00      	cmp	r3, #0
    2372:	dc01      	bgt.n	2378 <__sflush_r+0x1c>
    2374:	2000      	movs	r0, #0
    2376:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2378:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    237a:	2f00      	cmp	r7, #0
    237c:	d0fa      	beq.n	2374 <__sflush_r+0x18>
    237e:	2300      	movs	r3, #0
    2380:	682e      	ldr	r6, [r5, #0]
    2382:	602b      	str	r3, [r5, #0]
    2384:	2380      	movs	r3, #128	; 0x80
    2386:	015b      	lsls	r3, r3, #5
    2388:	401a      	ands	r2, r3
    238a:	d034      	beq.n	23f6 <__sflush_r+0x9a>
    238c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    238e:	89a3      	ldrh	r3, [r4, #12]
    2390:	075b      	lsls	r3, r3, #29
    2392:	d506      	bpl.n	23a2 <__sflush_r+0x46>
    2394:	6863      	ldr	r3, [r4, #4]
    2396:	1ac0      	subs	r0, r0, r3
    2398:	6b63      	ldr	r3, [r4, #52]	; 0x34
    239a:	2b00      	cmp	r3, #0
    239c:	d001      	beq.n	23a2 <__sflush_r+0x46>
    239e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    23a0:	1ac0      	subs	r0, r0, r3
    23a2:	0002      	movs	r2, r0
    23a4:	6a21      	ldr	r1, [r4, #32]
    23a6:	2300      	movs	r3, #0
    23a8:	0028      	movs	r0, r5
    23aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    23ac:	47b8      	blx	r7
    23ae:	89a1      	ldrh	r1, [r4, #12]
    23b0:	1c43      	adds	r3, r0, #1
    23b2:	d106      	bne.n	23c2 <__sflush_r+0x66>
    23b4:	682b      	ldr	r3, [r5, #0]
    23b6:	2b1d      	cmp	r3, #29
    23b8:	d831      	bhi.n	241e <__sflush_r+0xc2>
    23ba:	4a2c      	ldr	r2, [pc, #176]	; (246c <__sflush_r+0x110>)
    23bc:	40da      	lsrs	r2, r3
    23be:	07d3      	lsls	r3, r2, #31
    23c0:	d52d      	bpl.n	241e <__sflush_r+0xc2>
    23c2:	2300      	movs	r3, #0
    23c4:	6063      	str	r3, [r4, #4]
    23c6:	6923      	ldr	r3, [r4, #16]
    23c8:	6023      	str	r3, [r4, #0]
    23ca:	04cb      	lsls	r3, r1, #19
    23cc:	d505      	bpl.n	23da <__sflush_r+0x7e>
    23ce:	1c43      	adds	r3, r0, #1
    23d0:	d102      	bne.n	23d8 <__sflush_r+0x7c>
    23d2:	682b      	ldr	r3, [r5, #0]
    23d4:	2b00      	cmp	r3, #0
    23d6:	d100      	bne.n	23da <__sflush_r+0x7e>
    23d8:	6560      	str	r0, [r4, #84]	; 0x54
    23da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    23dc:	602e      	str	r6, [r5, #0]
    23de:	2900      	cmp	r1, #0
    23e0:	d0c8      	beq.n	2374 <__sflush_r+0x18>
    23e2:	0023      	movs	r3, r4
    23e4:	3344      	adds	r3, #68	; 0x44
    23e6:	4299      	cmp	r1, r3
    23e8:	d002      	beq.n	23f0 <__sflush_r+0x94>
    23ea:	0028      	movs	r0, r5
    23ec:	f7ff fcd8 	bl	1da0 <_free_r>
    23f0:	2000      	movs	r0, #0
    23f2:	6360      	str	r0, [r4, #52]	; 0x34
    23f4:	e7bf      	b.n	2376 <__sflush_r+0x1a>
    23f6:	2301      	movs	r3, #1
    23f8:	6a21      	ldr	r1, [r4, #32]
    23fa:	0028      	movs	r0, r5
    23fc:	47b8      	blx	r7
    23fe:	1c43      	adds	r3, r0, #1
    2400:	d1c5      	bne.n	238e <__sflush_r+0x32>
    2402:	682b      	ldr	r3, [r5, #0]
    2404:	2b00      	cmp	r3, #0
    2406:	d0c2      	beq.n	238e <__sflush_r+0x32>
    2408:	2b1d      	cmp	r3, #29
    240a:	d001      	beq.n	2410 <__sflush_r+0xb4>
    240c:	2b16      	cmp	r3, #22
    240e:	d101      	bne.n	2414 <__sflush_r+0xb8>
    2410:	602e      	str	r6, [r5, #0]
    2412:	e7af      	b.n	2374 <__sflush_r+0x18>
    2414:	2340      	movs	r3, #64	; 0x40
    2416:	89a2      	ldrh	r2, [r4, #12]
    2418:	4313      	orrs	r3, r2
    241a:	81a3      	strh	r3, [r4, #12]
    241c:	e7ab      	b.n	2376 <__sflush_r+0x1a>
    241e:	2340      	movs	r3, #64	; 0x40
    2420:	430b      	orrs	r3, r1
    2422:	2001      	movs	r0, #1
    2424:	81a3      	strh	r3, [r4, #12]
    2426:	4240      	negs	r0, r0
    2428:	e7a5      	b.n	2376 <__sflush_r+0x1a>
    242a:	690f      	ldr	r7, [r1, #16]
    242c:	2f00      	cmp	r7, #0
    242e:	d0a1      	beq.n	2374 <__sflush_r+0x18>
    2430:	680b      	ldr	r3, [r1, #0]
    2432:	600f      	str	r7, [r1, #0]
    2434:	1bdb      	subs	r3, r3, r7
    2436:	9301      	str	r3, [sp, #4]
    2438:	2300      	movs	r3, #0
    243a:	0792      	lsls	r2, r2, #30
    243c:	d100      	bne.n	2440 <__sflush_r+0xe4>
    243e:	694b      	ldr	r3, [r1, #20]
    2440:	60a3      	str	r3, [r4, #8]
    2442:	9b01      	ldr	r3, [sp, #4]
    2444:	2b00      	cmp	r3, #0
    2446:	dc00      	bgt.n	244a <__sflush_r+0xee>
    2448:	e794      	b.n	2374 <__sflush_r+0x18>
    244a:	9b01      	ldr	r3, [sp, #4]
    244c:	003a      	movs	r2, r7
    244e:	6a21      	ldr	r1, [r4, #32]
    2450:	0028      	movs	r0, r5
    2452:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2454:	47b0      	blx	r6
    2456:	2800      	cmp	r0, #0
    2458:	dc03      	bgt.n	2462 <__sflush_r+0x106>
    245a:	2340      	movs	r3, #64	; 0x40
    245c:	89a2      	ldrh	r2, [r4, #12]
    245e:	4313      	orrs	r3, r2
    2460:	e7df      	b.n	2422 <__sflush_r+0xc6>
    2462:	9b01      	ldr	r3, [sp, #4]
    2464:	183f      	adds	r7, r7, r0
    2466:	1a1b      	subs	r3, r3, r0
    2468:	9301      	str	r3, [sp, #4]
    246a:	e7ea      	b.n	2442 <__sflush_r+0xe6>
    246c:	20400001 	.word	0x20400001

00002470 <_fflush_r>:
    2470:	690b      	ldr	r3, [r1, #16]
    2472:	b570      	push	{r4, r5, r6, lr}
    2474:	0005      	movs	r5, r0
    2476:	000c      	movs	r4, r1
    2478:	2b00      	cmp	r3, #0
    247a:	d101      	bne.n	2480 <_fflush_r+0x10>
    247c:	2000      	movs	r0, #0
    247e:	bd70      	pop	{r4, r5, r6, pc}
    2480:	2800      	cmp	r0, #0
    2482:	d004      	beq.n	248e <_fflush_r+0x1e>
    2484:	6983      	ldr	r3, [r0, #24]
    2486:	2b00      	cmp	r3, #0
    2488:	d101      	bne.n	248e <_fflush_r+0x1e>
    248a:	f000 f85f 	bl	254c <__sinit>
    248e:	4b0b      	ldr	r3, [pc, #44]	; (24bc <_fflush_r+0x4c>)
    2490:	429c      	cmp	r4, r3
    2492:	d109      	bne.n	24a8 <_fflush_r+0x38>
    2494:	686c      	ldr	r4, [r5, #4]
    2496:	220c      	movs	r2, #12
    2498:	5ea3      	ldrsh	r3, [r4, r2]
    249a:	2b00      	cmp	r3, #0
    249c:	d0ee      	beq.n	247c <_fflush_r+0xc>
    249e:	0021      	movs	r1, r4
    24a0:	0028      	movs	r0, r5
    24a2:	f7ff ff5b 	bl	235c <__sflush_r>
    24a6:	e7ea      	b.n	247e <_fflush_r+0xe>
    24a8:	4b05      	ldr	r3, [pc, #20]	; (24c0 <_fflush_r+0x50>)
    24aa:	429c      	cmp	r4, r3
    24ac:	d101      	bne.n	24b2 <_fflush_r+0x42>
    24ae:	68ac      	ldr	r4, [r5, #8]
    24b0:	e7f1      	b.n	2496 <_fflush_r+0x26>
    24b2:	4b04      	ldr	r3, [pc, #16]	; (24c4 <_fflush_r+0x54>)
    24b4:	429c      	cmp	r4, r3
    24b6:	d1ee      	bne.n	2496 <_fflush_r+0x26>
    24b8:	68ec      	ldr	r4, [r5, #12]
    24ba:	e7ec      	b.n	2496 <_fflush_r+0x26>
    24bc:	00003224 	.word	0x00003224
    24c0:	00003244 	.word	0x00003244
    24c4:	00003204 	.word	0x00003204

000024c8 <_cleanup_r>:
    24c8:	b510      	push	{r4, lr}
    24ca:	4902      	ldr	r1, [pc, #8]	; (24d4 <_cleanup_r+0xc>)
    24cc:	f000 f8b2 	bl	2634 <_fwalk_reent>
    24d0:	bd10      	pop	{r4, pc}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	00002471 	.word	0x00002471

000024d8 <std.isra.0>:
    24d8:	2300      	movs	r3, #0
    24da:	b510      	push	{r4, lr}
    24dc:	0004      	movs	r4, r0
    24de:	6003      	str	r3, [r0, #0]
    24e0:	6043      	str	r3, [r0, #4]
    24e2:	6083      	str	r3, [r0, #8]
    24e4:	8181      	strh	r1, [r0, #12]
    24e6:	6643      	str	r3, [r0, #100]	; 0x64
    24e8:	81c2      	strh	r2, [r0, #14]
    24ea:	6103      	str	r3, [r0, #16]
    24ec:	6143      	str	r3, [r0, #20]
    24ee:	6183      	str	r3, [r0, #24]
    24f0:	0019      	movs	r1, r3
    24f2:	2208      	movs	r2, #8
    24f4:	305c      	adds	r0, #92	; 0x5c
    24f6:	f7ff fc4b 	bl	1d90 <memset>
    24fa:	4b05      	ldr	r3, [pc, #20]	; (2510 <std.isra.0+0x38>)
    24fc:	6224      	str	r4, [r4, #32]
    24fe:	6263      	str	r3, [r4, #36]	; 0x24
    2500:	4b04      	ldr	r3, [pc, #16]	; (2514 <std.isra.0+0x3c>)
    2502:	62a3      	str	r3, [r4, #40]	; 0x28
    2504:	4b04      	ldr	r3, [pc, #16]	; (2518 <std.isra.0+0x40>)
    2506:	62e3      	str	r3, [r4, #44]	; 0x2c
    2508:	4b04      	ldr	r3, [pc, #16]	; (251c <std.isra.0+0x44>)
    250a:	6323      	str	r3, [r4, #48]	; 0x30
    250c:	bd10      	pop	{r4, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	00002da5 	.word	0x00002da5
    2514:	00002dcd 	.word	0x00002dcd
    2518:	00002e05 	.word	0x00002e05
    251c:	00002e31 	.word	0x00002e31

00002520 <__sfmoreglue>:
    2520:	b570      	push	{r4, r5, r6, lr}
    2522:	2568      	movs	r5, #104	; 0x68
    2524:	1e4a      	subs	r2, r1, #1
    2526:	4355      	muls	r5, r2
    2528:	000e      	movs	r6, r1
    252a:	0029      	movs	r1, r5
    252c:	3174      	adds	r1, #116	; 0x74
    252e:	f7ff fc81 	bl	1e34 <_malloc_r>
    2532:	1e04      	subs	r4, r0, #0
    2534:	d008      	beq.n	2548 <__sfmoreglue+0x28>
    2536:	2100      	movs	r1, #0
    2538:	002a      	movs	r2, r5
    253a:	6001      	str	r1, [r0, #0]
    253c:	6046      	str	r6, [r0, #4]
    253e:	300c      	adds	r0, #12
    2540:	60a0      	str	r0, [r4, #8]
    2542:	3268      	adds	r2, #104	; 0x68
    2544:	f7ff fc24 	bl	1d90 <memset>
    2548:	0020      	movs	r0, r4
    254a:	bd70      	pop	{r4, r5, r6, pc}

0000254c <__sinit>:
    254c:	6983      	ldr	r3, [r0, #24]
    254e:	b513      	push	{r0, r1, r4, lr}
    2550:	0004      	movs	r4, r0
    2552:	2b00      	cmp	r3, #0
    2554:	d128      	bne.n	25a8 <__sinit+0x5c>
    2556:	6483      	str	r3, [r0, #72]	; 0x48
    2558:	64c3      	str	r3, [r0, #76]	; 0x4c
    255a:	6503      	str	r3, [r0, #80]	; 0x50
    255c:	4b13      	ldr	r3, [pc, #76]	; (25ac <__sinit+0x60>)
    255e:	4a14      	ldr	r2, [pc, #80]	; (25b0 <__sinit+0x64>)
    2560:	681b      	ldr	r3, [r3, #0]
    2562:	6282      	str	r2, [r0, #40]	; 0x28
    2564:	9301      	str	r3, [sp, #4]
    2566:	4298      	cmp	r0, r3
    2568:	d101      	bne.n	256e <__sinit+0x22>
    256a:	2301      	movs	r3, #1
    256c:	6183      	str	r3, [r0, #24]
    256e:	0020      	movs	r0, r4
    2570:	f000 f820 	bl	25b4 <__sfp>
    2574:	6060      	str	r0, [r4, #4]
    2576:	0020      	movs	r0, r4
    2578:	f000 f81c 	bl	25b4 <__sfp>
    257c:	60a0      	str	r0, [r4, #8]
    257e:	0020      	movs	r0, r4
    2580:	f000 f818 	bl	25b4 <__sfp>
    2584:	2200      	movs	r2, #0
    2586:	60e0      	str	r0, [r4, #12]
    2588:	2104      	movs	r1, #4
    258a:	6860      	ldr	r0, [r4, #4]
    258c:	f7ff ffa4 	bl	24d8 <std.isra.0>
    2590:	2201      	movs	r2, #1
    2592:	2109      	movs	r1, #9
    2594:	68a0      	ldr	r0, [r4, #8]
    2596:	f7ff ff9f 	bl	24d8 <std.isra.0>
    259a:	2202      	movs	r2, #2
    259c:	2112      	movs	r1, #18
    259e:	68e0      	ldr	r0, [r4, #12]
    25a0:	f7ff ff9a 	bl	24d8 <std.isra.0>
    25a4:	2301      	movs	r3, #1
    25a6:	61a3      	str	r3, [r4, #24]
    25a8:	bd13      	pop	{r0, r1, r4, pc}
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	00003200 	.word	0x00003200
    25b0:	000024c9 	.word	0x000024c9

000025b4 <__sfp>:
    25b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b6:	4b1e      	ldr	r3, [pc, #120]	; (2630 <__sfp+0x7c>)
    25b8:	0007      	movs	r7, r0
    25ba:	681e      	ldr	r6, [r3, #0]
    25bc:	69b3      	ldr	r3, [r6, #24]
    25be:	2b00      	cmp	r3, #0
    25c0:	d102      	bne.n	25c8 <__sfp+0x14>
    25c2:	0030      	movs	r0, r6
    25c4:	f7ff ffc2 	bl	254c <__sinit>
    25c8:	3648      	adds	r6, #72	; 0x48
    25ca:	68b4      	ldr	r4, [r6, #8]
    25cc:	6873      	ldr	r3, [r6, #4]
    25ce:	3b01      	subs	r3, #1
    25d0:	d504      	bpl.n	25dc <__sfp+0x28>
    25d2:	6833      	ldr	r3, [r6, #0]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d007      	beq.n	25e8 <__sfp+0x34>
    25d8:	6836      	ldr	r6, [r6, #0]
    25da:	e7f6      	b.n	25ca <__sfp+0x16>
    25dc:	220c      	movs	r2, #12
    25de:	5ea5      	ldrsh	r5, [r4, r2]
    25e0:	2d00      	cmp	r5, #0
    25e2:	d00d      	beq.n	2600 <__sfp+0x4c>
    25e4:	3468      	adds	r4, #104	; 0x68
    25e6:	e7f2      	b.n	25ce <__sfp+0x1a>
    25e8:	2104      	movs	r1, #4
    25ea:	0038      	movs	r0, r7
    25ec:	f7ff ff98 	bl	2520 <__sfmoreglue>
    25f0:	6030      	str	r0, [r6, #0]
    25f2:	2800      	cmp	r0, #0
    25f4:	d1f0      	bne.n	25d8 <__sfp+0x24>
    25f6:	230c      	movs	r3, #12
    25f8:	0004      	movs	r4, r0
    25fa:	603b      	str	r3, [r7, #0]
    25fc:	0020      	movs	r0, r4
    25fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2600:	2301      	movs	r3, #1
    2602:	0020      	movs	r0, r4
    2604:	425b      	negs	r3, r3
    2606:	81e3      	strh	r3, [r4, #14]
    2608:	3302      	adds	r3, #2
    260a:	81a3      	strh	r3, [r4, #12]
    260c:	6665      	str	r5, [r4, #100]	; 0x64
    260e:	6025      	str	r5, [r4, #0]
    2610:	60a5      	str	r5, [r4, #8]
    2612:	6065      	str	r5, [r4, #4]
    2614:	6125      	str	r5, [r4, #16]
    2616:	6165      	str	r5, [r4, #20]
    2618:	61a5      	str	r5, [r4, #24]
    261a:	2208      	movs	r2, #8
    261c:	0029      	movs	r1, r5
    261e:	305c      	adds	r0, #92	; 0x5c
    2620:	f7ff fbb6 	bl	1d90 <memset>
    2624:	6365      	str	r5, [r4, #52]	; 0x34
    2626:	63a5      	str	r5, [r4, #56]	; 0x38
    2628:	64a5      	str	r5, [r4, #72]	; 0x48
    262a:	64e5      	str	r5, [r4, #76]	; 0x4c
    262c:	e7e6      	b.n	25fc <__sfp+0x48>
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	00003200 	.word	0x00003200

00002634 <_fwalk_reent>:
    2634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2636:	0004      	movs	r4, r0
    2638:	0007      	movs	r7, r0
    263a:	2600      	movs	r6, #0
    263c:	9101      	str	r1, [sp, #4]
    263e:	3448      	adds	r4, #72	; 0x48
    2640:	2c00      	cmp	r4, #0
    2642:	d101      	bne.n	2648 <_fwalk_reent+0x14>
    2644:	0030      	movs	r0, r6
    2646:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2648:	6863      	ldr	r3, [r4, #4]
    264a:	68a5      	ldr	r5, [r4, #8]
    264c:	9300      	str	r3, [sp, #0]
    264e:	9b00      	ldr	r3, [sp, #0]
    2650:	3b01      	subs	r3, #1
    2652:	9300      	str	r3, [sp, #0]
    2654:	d501      	bpl.n	265a <_fwalk_reent+0x26>
    2656:	6824      	ldr	r4, [r4, #0]
    2658:	e7f2      	b.n	2640 <_fwalk_reent+0xc>
    265a:	89ab      	ldrh	r3, [r5, #12]
    265c:	2b01      	cmp	r3, #1
    265e:	d908      	bls.n	2672 <_fwalk_reent+0x3e>
    2660:	220e      	movs	r2, #14
    2662:	5eab      	ldrsh	r3, [r5, r2]
    2664:	3301      	adds	r3, #1
    2666:	d004      	beq.n	2672 <_fwalk_reent+0x3e>
    2668:	0029      	movs	r1, r5
    266a:	0038      	movs	r0, r7
    266c:	9b01      	ldr	r3, [sp, #4]
    266e:	4798      	blx	r3
    2670:	4306      	orrs	r6, r0
    2672:	3568      	adds	r5, #104	; 0x68
    2674:	e7eb      	b.n	264e <_fwalk_reent+0x1a>
	...

00002678 <__swhatbuf_r>:
    2678:	b570      	push	{r4, r5, r6, lr}
    267a:	000e      	movs	r6, r1
    267c:	001d      	movs	r5, r3
    267e:	230e      	movs	r3, #14
    2680:	5ec9      	ldrsh	r1, [r1, r3]
    2682:	b090      	sub	sp, #64	; 0x40
    2684:	0014      	movs	r4, r2
    2686:	2900      	cmp	r1, #0
    2688:	da07      	bge.n	269a <__swhatbuf_r+0x22>
    268a:	2300      	movs	r3, #0
    268c:	602b      	str	r3, [r5, #0]
    268e:	89b3      	ldrh	r3, [r6, #12]
    2690:	061b      	lsls	r3, r3, #24
    2692:	d411      	bmi.n	26b8 <__swhatbuf_r+0x40>
    2694:	2380      	movs	r3, #128	; 0x80
    2696:	00db      	lsls	r3, r3, #3
    2698:	e00f      	b.n	26ba <__swhatbuf_r+0x42>
    269a:	aa01      	add	r2, sp, #4
    269c:	f000 fbf4 	bl	2e88 <_fstat_r>
    26a0:	2800      	cmp	r0, #0
    26a2:	dbf2      	blt.n	268a <__swhatbuf_r+0x12>
    26a4:	22f0      	movs	r2, #240	; 0xf0
    26a6:	9b02      	ldr	r3, [sp, #8]
    26a8:	0212      	lsls	r2, r2, #8
    26aa:	4013      	ands	r3, r2
    26ac:	4a05      	ldr	r2, [pc, #20]	; (26c4 <__swhatbuf_r+0x4c>)
    26ae:	189b      	adds	r3, r3, r2
    26b0:	425a      	negs	r2, r3
    26b2:	4153      	adcs	r3, r2
    26b4:	602b      	str	r3, [r5, #0]
    26b6:	e7ed      	b.n	2694 <__swhatbuf_r+0x1c>
    26b8:	2340      	movs	r3, #64	; 0x40
    26ba:	2000      	movs	r0, #0
    26bc:	6023      	str	r3, [r4, #0]
    26be:	b010      	add	sp, #64	; 0x40
    26c0:	bd70      	pop	{r4, r5, r6, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	ffffe000 	.word	0xffffe000

000026c8 <__smakebuf_r>:
    26c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26ca:	2602      	movs	r6, #2
    26cc:	898b      	ldrh	r3, [r1, #12]
    26ce:	0005      	movs	r5, r0
    26d0:	000c      	movs	r4, r1
    26d2:	4233      	tst	r3, r6
    26d4:	d006      	beq.n	26e4 <__smakebuf_r+0x1c>
    26d6:	0023      	movs	r3, r4
    26d8:	3347      	adds	r3, #71	; 0x47
    26da:	6023      	str	r3, [r4, #0]
    26dc:	6123      	str	r3, [r4, #16]
    26de:	2301      	movs	r3, #1
    26e0:	6163      	str	r3, [r4, #20]
    26e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    26e4:	ab01      	add	r3, sp, #4
    26e6:	466a      	mov	r2, sp
    26e8:	f7ff ffc6 	bl	2678 <__swhatbuf_r>
    26ec:	9900      	ldr	r1, [sp, #0]
    26ee:	0007      	movs	r7, r0
    26f0:	0028      	movs	r0, r5
    26f2:	f7ff fb9f 	bl	1e34 <_malloc_r>
    26f6:	2800      	cmp	r0, #0
    26f8:	d108      	bne.n	270c <__smakebuf_r+0x44>
    26fa:	220c      	movs	r2, #12
    26fc:	5ea3      	ldrsh	r3, [r4, r2]
    26fe:	059a      	lsls	r2, r3, #22
    2700:	d4ef      	bmi.n	26e2 <__smakebuf_r+0x1a>
    2702:	2203      	movs	r2, #3
    2704:	4393      	bics	r3, r2
    2706:	431e      	orrs	r6, r3
    2708:	81a6      	strh	r6, [r4, #12]
    270a:	e7e4      	b.n	26d6 <__smakebuf_r+0xe>
    270c:	4b0f      	ldr	r3, [pc, #60]	; (274c <__smakebuf_r+0x84>)
    270e:	62ab      	str	r3, [r5, #40]	; 0x28
    2710:	2380      	movs	r3, #128	; 0x80
    2712:	89a2      	ldrh	r2, [r4, #12]
    2714:	6020      	str	r0, [r4, #0]
    2716:	4313      	orrs	r3, r2
    2718:	81a3      	strh	r3, [r4, #12]
    271a:	9b00      	ldr	r3, [sp, #0]
    271c:	6120      	str	r0, [r4, #16]
    271e:	6163      	str	r3, [r4, #20]
    2720:	9b01      	ldr	r3, [sp, #4]
    2722:	2b00      	cmp	r3, #0
    2724:	d00d      	beq.n	2742 <__smakebuf_r+0x7a>
    2726:	230e      	movs	r3, #14
    2728:	5ee1      	ldrsh	r1, [r4, r3]
    272a:	0028      	movs	r0, r5
    272c:	f000 fbbe 	bl	2eac <_isatty_r>
    2730:	2800      	cmp	r0, #0
    2732:	d006      	beq.n	2742 <__smakebuf_r+0x7a>
    2734:	2203      	movs	r2, #3
    2736:	89a3      	ldrh	r3, [r4, #12]
    2738:	4393      	bics	r3, r2
    273a:	001a      	movs	r2, r3
    273c:	2301      	movs	r3, #1
    273e:	4313      	orrs	r3, r2
    2740:	81a3      	strh	r3, [r4, #12]
    2742:	89a0      	ldrh	r0, [r4, #12]
    2744:	4338      	orrs	r0, r7
    2746:	81a0      	strh	r0, [r4, #12]
    2748:	e7cb      	b.n	26e2 <__smakebuf_r+0x1a>
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	000024c9 	.word	0x000024c9

00002750 <__malloc_lock>:
    2750:	4770      	bx	lr

00002752 <__malloc_unlock>:
    2752:	4770      	bx	lr

00002754 <_realloc_r>:
    2754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2756:	0007      	movs	r7, r0
    2758:	000d      	movs	r5, r1
    275a:	0016      	movs	r6, r2
    275c:	2900      	cmp	r1, #0
    275e:	d105      	bne.n	276c <_realloc_r+0x18>
    2760:	0011      	movs	r1, r2
    2762:	f7ff fb67 	bl	1e34 <_malloc_r>
    2766:	0004      	movs	r4, r0
    2768:	0020      	movs	r0, r4
    276a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    276c:	2a00      	cmp	r2, #0
    276e:	d103      	bne.n	2778 <_realloc_r+0x24>
    2770:	f7ff fb16 	bl	1da0 <_free_r>
    2774:	0034      	movs	r4, r6
    2776:	e7f7      	b.n	2768 <_realloc_r+0x14>
    2778:	f000 fbd2 	bl	2f20 <_malloc_usable_size_r>
    277c:	002c      	movs	r4, r5
    277e:	4286      	cmp	r6, r0
    2780:	d9f2      	bls.n	2768 <_realloc_r+0x14>
    2782:	0031      	movs	r1, r6
    2784:	0038      	movs	r0, r7
    2786:	f7ff fb55 	bl	1e34 <_malloc_r>
    278a:	1e04      	subs	r4, r0, #0
    278c:	d0ec      	beq.n	2768 <_realloc_r+0x14>
    278e:	0029      	movs	r1, r5
    2790:	0032      	movs	r2, r6
    2792:	f000 fbbc 	bl	2f0e <memcpy>
    2796:	0029      	movs	r1, r5
    2798:	0038      	movs	r0, r7
    279a:	f7ff fb01 	bl	1da0 <_free_r>
    279e:	e7e3      	b.n	2768 <_realloc_r+0x14>

000027a0 <__sfputc_r>:
    27a0:	6893      	ldr	r3, [r2, #8]
    27a2:	b510      	push	{r4, lr}
    27a4:	3b01      	subs	r3, #1
    27a6:	6093      	str	r3, [r2, #8]
    27a8:	2b00      	cmp	r3, #0
    27aa:	da05      	bge.n	27b8 <__sfputc_r+0x18>
    27ac:	6994      	ldr	r4, [r2, #24]
    27ae:	42a3      	cmp	r3, r4
    27b0:	db08      	blt.n	27c4 <__sfputc_r+0x24>
    27b2:	b2cb      	uxtb	r3, r1
    27b4:	2b0a      	cmp	r3, #10
    27b6:	d005      	beq.n	27c4 <__sfputc_r+0x24>
    27b8:	6813      	ldr	r3, [r2, #0]
    27ba:	1c58      	adds	r0, r3, #1
    27bc:	6010      	str	r0, [r2, #0]
    27be:	7019      	strb	r1, [r3, #0]
    27c0:	b2c8      	uxtb	r0, r1
    27c2:	bd10      	pop	{r4, pc}
    27c4:	f7ff fcfe 	bl	21c4 <__swbuf_r>
    27c8:	e7fb      	b.n	27c2 <__sfputc_r+0x22>

000027ca <__sfputs_r>:
    27ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27cc:	0006      	movs	r6, r0
    27ce:	000f      	movs	r7, r1
    27d0:	0014      	movs	r4, r2
    27d2:	18d5      	adds	r5, r2, r3
    27d4:	42ac      	cmp	r4, r5
    27d6:	d101      	bne.n	27dc <__sfputs_r+0x12>
    27d8:	2000      	movs	r0, #0
    27da:	e007      	b.n	27ec <__sfputs_r+0x22>
    27dc:	7821      	ldrb	r1, [r4, #0]
    27de:	003a      	movs	r2, r7
    27e0:	0030      	movs	r0, r6
    27e2:	f7ff ffdd 	bl	27a0 <__sfputc_r>
    27e6:	3401      	adds	r4, #1
    27e8:	1c43      	adds	r3, r0, #1
    27ea:	d1f3      	bne.n	27d4 <__sfputs_r+0xa>
    27ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000027f0 <_vfiprintf_r>:
    27f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27f2:	b09f      	sub	sp, #124	; 0x7c
    27f4:	0006      	movs	r6, r0
    27f6:	000f      	movs	r7, r1
    27f8:	0014      	movs	r4, r2
    27fa:	9305      	str	r3, [sp, #20]
    27fc:	2800      	cmp	r0, #0
    27fe:	d004      	beq.n	280a <_vfiprintf_r+0x1a>
    2800:	6983      	ldr	r3, [r0, #24]
    2802:	2b00      	cmp	r3, #0
    2804:	d101      	bne.n	280a <_vfiprintf_r+0x1a>
    2806:	f7ff fea1 	bl	254c <__sinit>
    280a:	4b7f      	ldr	r3, [pc, #508]	; (2a08 <_vfiprintf_r+0x218>)
    280c:	429f      	cmp	r7, r3
    280e:	d15c      	bne.n	28ca <_vfiprintf_r+0xda>
    2810:	6877      	ldr	r7, [r6, #4]
    2812:	89bb      	ldrh	r3, [r7, #12]
    2814:	071b      	lsls	r3, r3, #28
    2816:	d562      	bpl.n	28de <_vfiprintf_r+0xee>
    2818:	693b      	ldr	r3, [r7, #16]
    281a:	2b00      	cmp	r3, #0
    281c:	d05f      	beq.n	28de <_vfiprintf_r+0xee>
    281e:	2300      	movs	r3, #0
    2820:	ad06      	add	r5, sp, #24
    2822:	616b      	str	r3, [r5, #20]
    2824:	3320      	adds	r3, #32
    2826:	766b      	strb	r3, [r5, #25]
    2828:	3310      	adds	r3, #16
    282a:	76ab      	strb	r3, [r5, #26]
    282c:	9402      	str	r4, [sp, #8]
    282e:	9c02      	ldr	r4, [sp, #8]
    2830:	7823      	ldrb	r3, [r4, #0]
    2832:	2b00      	cmp	r3, #0
    2834:	d15d      	bne.n	28f2 <_vfiprintf_r+0x102>
    2836:	9b02      	ldr	r3, [sp, #8]
    2838:	1ae3      	subs	r3, r4, r3
    283a:	9304      	str	r3, [sp, #16]
    283c:	d00d      	beq.n	285a <_vfiprintf_r+0x6a>
    283e:	9b04      	ldr	r3, [sp, #16]
    2840:	9a02      	ldr	r2, [sp, #8]
    2842:	0039      	movs	r1, r7
    2844:	0030      	movs	r0, r6
    2846:	f7ff ffc0 	bl	27ca <__sfputs_r>
    284a:	1c43      	adds	r3, r0, #1
    284c:	d100      	bne.n	2850 <_vfiprintf_r+0x60>
    284e:	e0cc      	b.n	29ea <_vfiprintf_r+0x1fa>
    2850:	696a      	ldr	r2, [r5, #20]
    2852:	9b04      	ldr	r3, [sp, #16]
    2854:	4694      	mov	ip, r2
    2856:	4463      	add	r3, ip
    2858:	616b      	str	r3, [r5, #20]
    285a:	7823      	ldrb	r3, [r4, #0]
    285c:	2b00      	cmp	r3, #0
    285e:	d100      	bne.n	2862 <_vfiprintf_r+0x72>
    2860:	e0c3      	b.n	29ea <_vfiprintf_r+0x1fa>
    2862:	2201      	movs	r2, #1
    2864:	2300      	movs	r3, #0
    2866:	4252      	negs	r2, r2
    2868:	606a      	str	r2, [r5, #4]
    286a:	a902      	add	r1, sp, #8
    286c:	3254      	adds	r2, #84	; 0x54
    286e:	1852      	adds	r2, r2, r1
    2870:	3401      	adds	r4, #1
    2872:	602b      	str	r3, [r5, #0]
    2874:	60eb      	str	r3, [r5, #12]
    2876:	60ab      	str	r3, [r5, #8]
    2878:	7013      	strb	r3, [r2, #0]
    287a:	65ab      	str	r3, [r5, #88]	; 0x58
    287c:	7821      	ldrb	r1, [r4, #0]
    287e:	2205      	movs	r2, #5
    2880:	4862      	ldr	r0, [pc, #392]	; (2a0c <_vfiprintf_r+0x21c>)
    2882:	f000 fb39 	bl	2ef8 <memchr>
    2886:	1c63      	adds	r3, r4, #1
    2888:	469c      	mov	ip, r3
    288a:	2800      	cmp	r0, #0
    288c:	d135      	bne.n	28fa <_vfiprintf_r+0x10a>
    288e:	6829      	ldr	r1, [r5, #0]
    2890:	06cb      	lsls	r3, r1, #27
    2892:	d504      	bpl.n	289e <_vfiprintf_r+0xae>
    2894:	2353      	movs	r3, #83	; 0x53
    2896:	aa02      	add	r2, sp, #8
    2898:	3020      	adds	r0, #32
    289a:	189b      	adds	r3, r3, r2
    289c:	7018      	strb	r0, [r3, #0]
    289e:	070b      	lsls	r3, r1, #28
    28a0:	d504      	bpl.n	28ac <_vfiprintf_r+0xbc>
    28a2:	2353      	movs	r3, #83	; 0x53
    28a4:	202b      	movs	r0, #43	; 0x2b
    28a6:	aa02      	add	r2, sp, #8
    28a8:	189b      	adds	r3, r3, r2
    28aa:	7018      	strb	r0, [r3, #0]
    28ac:	7823      	ldrb	r3, [r4, #0]
    28ae:	2b2a      	cmp	r3, #42	; 0x2a
    28b0:	d02c      	beq.n	290c <_vfiprintf_r+0x11c>
    28b2:	2000      	movs	r0, #0
    28b4:	210a      	movs	r1, #10
    28b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28b8:	7822      	ldrb	r2, [r4, #0]
    28ba:	3a30      	subs	r2, #48	; 0x30
    28bc:	2a09      	cmp	r2, #9
    28be:	d800      	bhi.n	28c2 <_vfiprintf_r+0xd2>
    28c0:	e06b      	b.n	299a <_vfiprintf_r+0x1aa>
    28c2:	2800      	cmp	r0, #0
    28c4:	d02a      	beq.n	291c <_vfiprintf_r+0x12c>
    28c6:	9309      	str	r3, [sp, #36]	; 0x24
    28c8:	e028      	b.n	291c <_vfiprintf_r+0x12c>
    28ca:	4b51      	ldr	r3, [pc, #324]	; (2a10 <_vfiprintf_r+0x220>)
    28cc:	429f      	cmp	r7, r3
    28ce:	d101      	bne.n	28d4 <_vfiprintf_r+0xe4>
    28d0:	68b7      	ldr	r7, [r6, #8]
    28d2:	e79e      	b.n	2812 <_vfiprintf_r+0x22>
    28d4:	4b4f      	ldr	r3, [pc, #316]	; (2a14 <_vfiprintf_r+0x224>)
    28d6:	429f      	cmp	r7, r3
    28d8:	d19b      	bne.n	2812 <_vfiprintf_r+0x22>
    28da:	68f7      	ldr	r7, [r6, #12]
    28dc:	e799      	b.n	2812 <_vfiprintf_r+0x22>
    28de:	0039      	movs	r1, r7
    28e0:	0030      	movs	r0, r6
    28e2:	f7ff fcc5 	bl	2270 <__swsetup_r>
    28e6:	2800      	cmp	r0, #0
    28e8:	d099      	beq.n	281e <_vfiprintf_r+0x2e>
    28ea:	2001      	movs	r0, #1
    28ec:	4240      	negs	r0, r0
    28ee:	b01f      	add	sp, #124	; 0x7c
    28f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28f2:	2b25      	cmp	r3, #37	; 0x25
    28f4:	d09f      	beq.n	2836 <_vfiprintf_r+0x46>
    28f6:	3401      	adds	r4, #1
    28f8:	e79a      	b.n	2830 <_vfiprintf_r+0x40>
    28fa:	4b44      	ldr	r3, [pc, #272]	; (2a0c <_vfiprintf_r+0x21c>)
    28fc:	6829      	ldr	r1, [r5, #0]
    28fe:	1ac0      	subs	r0, r0, r3
    2900:	2301      	movs	r3, #1
    2902:	4083      	lsls	r3, r0
    2904:	430b      	orrs	r3, r1
    2906:	602b      	str	r3, [r5, #0]
    2908:	4664      	mov	r4, ip
    290a:	e7b7      	b.n	287c <_vfiprintf_r+0x8c>
    290c:	9b05      	ldr	r3, [sp, #20]
    290e:	1d18      	adds	r0, r3, #4
    2910:	681b      	ldr	r3, [r3, #0]
    2912:	9005      	str	r0, [sp, #20]
    2914:	2b00      	cmp	r3, #0
    2916:	db3a      	blt.n	298e <_vfiprintf_r+0x19e>
    2918:	9309      	str	r3, [sp, #36]	; 0x24
    291a:	4664      	mov	r4, ip
    291c:	7823      	ldrb	r3, [r4, #0]
    291e:	2b2e      	cmp	r3, #46	; 0x2e
    2920:	d10b      	bne.n	293a <_vfiprintf_r+0x14a>
    2922:	7863      	ldrb	r3, [r4, #1]
    2924:	1c62      	adds	r2, r4, #1
    2926:	2b2a      	cmp	r3, #42	; 0x2a
    2928:	d13f      	bne.n	29aa <_vfiprintf_r+0x1ba>
    292a:	9b05      	ldr	r3, [sp, #20]
    292c:	3402      	adds	r4, #2
    292e:	1d1a      	adds	r2, r3, #4
    2930:	681b      	ldr	r3, [r3, #0]
    2932:	9205      	str	r2, [sp, #20]
    2934:	2b00      	cmp	r3, #0
    2936:	db35      	blt.n	29a4 <_vfiprintf_r+0x1b4>
    2938:	9307      	str	r3, [sp, #28]
    293a:	7821      	ldrb	r1, [r4, #0]
    293c:	2203      	movs	r2, #3
    293e:	4836      	ldr	r0, [pc, #216]	; (2a18 <_vfiprintf_r+0x228>)
    2940:	f000 fada 	bl	2ef8 <memchr>
    2944:	2800      	cmp	r0, #0
    2946:	d007      	beq.n	2958 <_vfiprintf_r+0x168>
    2948:	4b33      	ldr	r3, [pc, #204]	; (2a18 <_vfiprintf_r+0x228>)
    294a:	682a      	ldr	r2, [r5, #0]
    294c:	1ac0      	subs	r0, r0, r3
    294e:	2340      	movs	r3, #64	; 0x40
    2950:	4083      	lsls	r3, r0
    2952:	4313      	orrs	r3, r2
    2954:	602b      	str	r3, [r5, #0]
    2956:	3401      	adds	r4, #1
    2958:	7821      	ldrb	r1, [r4, #0]
    295a:	1c63      	adds	r3, r4, #1
    295c:	2206      	movs	r2, #6
    295e:	482f      	ldr	r0, [pc, #188]	; (2a1c <_vfiprintf_r+0x22c>)
    2960:	9302      	str	r3, [sp, #8]
    2962:	7629      	strb	r1, [r5, #24]
    2964:	f000 fac8 	bl	2ef8 <memchr>
    2968:	2800      	cmp	r0, #0
    296a:	d044      	beq.n	29f6 <_vfiprintf_r+0x206>
    296c:	4b2c      	ldr	r3, [pc, #176]	; (2a20 <_vfiprintf_r+0x230>)
    296e:	2b00      	cmp	r3, #0
    2970:	d12f      	bne.n	29d2 <_vfiprintf_r+0x1e2>
    2972:	6829      	ldr	r1, [r5, #0]
    2974:	9b05      	ldr	r3, [sp, #20]
    2976:	2207      	movs	r2, #7
    2978:	05c9      	lsls	r1, r1, #23
    297a:	d528      	bpl.n	29ce <_vfiprintf_r+0x1de>
    297c:	189b      	adds	r3, r3, r2
    297e:	4393      	bics	r3, r2
    2980:	3308      	adds	r3, #8
    2982:	9305      	str	r3, [sp, #20]
    2984:	696b      	ldr	r3, [r5, #20]
    2986:	9a03      	ldr	r2, [sp, #12]
    2988:	189b      	adds	r3, r3, r2
    298a:	616b      	str	r3, [r5, #20]
    298c:	e74f      	b.n	282e <_vfiprintf_r+0x3e>
    298e:	425b      	negs	r3, r3
    2990:	60eb      	str	r3, [r5, #12]
    2992:	2302      	movs	r3, #2
    2994:	430b      	orrs	r3, r1
    2996:	602b      	str	r3, [r5, #0]
    2998:	e7bf      	b.n	291a <_vfiprintf_r+0x12a>
    299a:	434b      	muls	r3, r1
    299c:	3401      	adds	r4, #1
    299e:	189b      	adds	r3, r3, r2
    29a0:	2001      	movs	r0, #1
    29a2:	e789      	b.n	28b8 <_vfiprintf_r+0xc8>
    29a4:	2301      	movs	r3, #1
    29a6:	425b      	negs	r3, r3
    29a8:	e7c6      	b.n	2938 <_vfiprintf_r+0x148>
    29aa:	2300      	movs	r3, #0
    29ac:	0014      	movs	r4, r2
    29ae:	200a      	movs	r0, #10
    29b0:	001a      	movs	r2, r3
    29b2:	606b      	str	r3, [r5, #4]
    29b4:	7821      	ldrb	r1, [r4, #0]
    29b6:	3930      	subs	r1, #48	; 0x30
    29b8:	2909      	cmp	r1, #9
    29ba:	d903      	bls.n	29c4 <_vfiprintf_r+0x1d4>
    29bc:	2b00      	cmp	r3, #0
    29be:	d0bc      	beq.n	293a <_vfiprintf_r+0x14a>
    29c0:	9207      	str	r2, [sp, #28]
    29c2:	e7ba      	b.n	293a <_vfiprintf_r+0x14a>
    29c4:	4342      	muls	r2, r0
    29c6:	3401      	adds	r4, #1
    29c8:	1852      	adds	r2, r2, r1
    29ca:	2301      	movs	r3, #1
    29cc:	e7f2      	b.n	29b4 <_vfiprintf_r+0x1c4>
    29ce:	3307      	adds	r3, #7
    29d0:	e7d5      	b.n	297e <_vfiprintf_r+0x18e>
    29d2:	ab05      	add	r3, sp, #20
    29d4:	9300      	str	r3, [sp, #0]
    29d6:	003a      	movs	r2, r7
    29d8:	4b12      	ldr	r3, [pc, #72]	; (2a24 <_vfiprintf_r+0x234>)
    29da:	0029      	movs	r1, r5
    29dc:	0030      	movs	r0, r6
    29de:	e000      	b.n	29e2 <_vfiprintf_r+0x1f2>
    29e0:	bf00      	nop
    29e2:	9003      	str	r0, [sp, #12]
    29e4:	9b03      	ldr	r3, [sp, #12]
    29e6:	3301      	adds	r3, #1
    29e8:	d1cc      	bne.n	2984 <_vfiprintf_r+0x194>
    29ea:	89bb      	ldrh	r3, [r7, #12]
    29ec:	065b      	lsls	r3, r3, #25
    29ee:	d500      	bpl.n	29f2 <_vfiprintf_r+0x202>
    29f0:	e77b      	b.n	28ea <_vfiprintf_r+0xfa>
    29f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    29f4:	e77b      	b.n	28ee <_vfiprintf_r+0xfe>
    29f6:	ab05      	add	r3, sp, #20
    29f8:	9300      	str	r3, [sp, #0]
    29fa:	003a      	movs	r2, r7
    29fc:	4b09      	ldr	r3, [pc, #36]	; (2a24 <_vfiprintf_r+0x234>)
    29fe:	0029      	movs	r1, r5
    2a00:	0030      	movs	r0, r6
    2a02:	f000 f87f 	bl	2b04 <_printf_i>
    2a06:	e7ec      	b.n	29e2 <_vfiprintf_r+0x1f2>
    2a08:	00003224 	.word	0x00003224
    2a0c:	00003264 	.word	0x00003264
    2a10:	00003244 	.word	0x00003244
    2a14:	00003204 	.word	0x00003204
    2a18:	0000326a 	.word	0x0000326a
    2a1c:	0000326e 	.word	0x0000326e
    2a20:	00000000 	.word	0x00000000
    2a24:	000027cb 	.word	0x000027cb

00002a28 <_printf_common>:
    2a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a2a:	0015      	movs	r5, r2
    2a2c:	9301      	str	r3, [sp, #4]
    2a2e:	688a      	ldr	r2, [r1, #8]
    2a30:	690b      	ldr	r3, [r1, #16]
    2a32:	9000      	str	r0, [sp, #0]
    2a34:	000c      	movs	r4, r1
    2a36:	4293      	cmp	r3, r2
    2a38:	da00      	bge.n	2a3c <_printf_common+0x14>
    2a3a:	0013      	movs	r3, r2
    2a3c:	0022      	movs	r2, r4
    2a3e:	602b      	str	r3, [r5, #0]
    2a40:	3243      	adds	r2, #67	; 0x43
    2a42:	7812      	ldrb	r2, [r2, #0]
    2a44:	2a00      	cmp	r2, #0
    2a46:	d001      	beq.n	2a4c <_printf_common+0x24>
    2a48:	3301      	adds	r3, #1
    2a4a:	602b      	str	r3, [r5, #0]
    2a4c:	6823      	ldr	r3, [r4, #0]
    2a4e:	069b      	lsls	r3, r3, #26
    2a50:	d502      	bpl.n	2a58 <_printf_common+0x30>
    2a52:	682b      	ldr	r3, [r5, #0]
    2a54:	3302      	adds	r3, #2
    2a56:	602b      	str	r3, [r5, #0]
    2a58:	2706      	movs	r7, #6
    2a5a:	6823      	ldr	r3, [r4, #0]
    2a5c:	401f      	ands	r7, r3
    2a5e:	d027      	beq.n	2ab0 <_printf_common+0x88>
    2a60:	0023      	movs	r3, r4
    2a62:	3343      	adds	r3, #67	; 0x43
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	1e5a      	subs	r2, r3, #1
    2a68:	4193      	sbcs	r3, r2
    2a6a:	6822      	ldr	r2, [r4, #0]
    2a6c:	0692      	lsls	r2, r2, #26
    2a6e:	d430      	bmi.n	2ad2 <_printf_common+0xaa>
    2a70:	0022      	movs	r2, r4
    2a72:	9901      	ldr	r1, [sp, #4]
    2a74:	3243      	adds	r2, #67	; 0x43
    2a76:	9800      	ldr	r0, [sp, #0]
    2a78:	9e08      	ldr	r6, [sp, #32]
    2a7a:	47b0      	blx	r6
    2a7c:	1c43      	adds	r3, r0, #1
    2a7e:	d025      	beq.n	2acc <_printf_common+0xa4>
    2a80:	2306      	movs	r3, #6
    2a82:	6820      	ldr	r0, [r4, #0]
    2a84:	682a      	ldr	r2, [r5, #0]
    2a86:	68e1      	ldr	r1, [r4, #12]
    2a88:	4003      	ands	r3, r0
    2a8a:	2500      	movs	r5, #0
    2a8c:	2b04      	cmp	r3, #4
    2a8e:	d103      	bne.n	2a98 <_printf_common+0x70>
    2a90:	1a8d      	subs	r5, r1, r2
    2a92:	43eb      	mvns	r3, r5
    2a94:	17db      	asrs	r3, r3, #31
    2a96:	401d      	ands	r5, r3
    2a98:	68a3      	ldr	r3, [r4, #8]
    2a9a:	6922      	ldr	r2, [r4, #16]
    2a9c:	4293      	cmp	r3, r2
    2a9e:	dd01      	ble.n	2aa4 <_printf_common+0x7c>
    2aa0:	1a9b      	subs	r3, r3, r2
    2aa2:	18ed      	adds	r5, r5, r3
    2aa4:	2700      	movs	r7, #0
    2aa6:	42bd      	cmp	r5, r7
    2aa8:	d120      	bne.n	2aec <_printf_common+0xc4>
    2aaa:	2000      	movs	r0, #0
    2aac:	e010      	b.n	2ad0 <_printf_common+0xa8>
    2aae:	3701      	adds	r7, #1
    2ab0:	68e3      	ldr	r3, [r4, #12]
    2ab2:	682a      	ldr	r2, [r5, #0]
    2ab4:	1a9b      	subs	r3, r3, r2
    2ab6:	429f      	cmp	r7, r3
    2ab8:	dad2      	bge.n	2a60 <_printf_common+0x38>
    2aba:	0022      	movs	r2, r4
    2abc:	2301      	movs	r3, #1
    2abe:	3219      	adds	r2, #25
    2ac0:	9901      	ldr	r1, [sp, #4]
    2ac2:	9800      	ldr	r0, [sp, #0]
    2ac4:	9e08      	ldr	r6, [sp, #32]
    2ac6:	47b0      	blx	r6
    2ac8:	1c43      	adds	r3, r0, #1
    2aca:	d1f0      	bne.n	2aae <_printf_common+0x86>
    2acc:	2001      	movs	r0, #1
    2ace:	4240      	negs	r0, r0
    2ad0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2ad2:	2030      	movs	r0, #48	; 0x30
    2ad4:	18e1      	adds	r1, r4, r3
    2ad6:	3143      	adds	r1, #67	; 0x43
    2ad8:	7008      	strb	r0, [r1, #0]
    2ada:	0021      	movs	r1, r4
    2adc:	1c5a      	adds	r2, r3, #1
    2ade:	3145      	adds	r1, #69	; 0x45
    2ae0:	7809      	ldrb	r1, [r1, #0]
    2ae2:	18a2      	adds	r2, r4, r2
    2ae4:	3243      	adds	r2, #67	; 0x43
    2ae6:	3302      	adds	r3, #2
    2ae8:	7011      	strb	r1, [r2, #0]
    2aea:	e7c1      	b.n	2a70 <_printf_common+0x48>
    2aec:	0022      	movs	r2, r4
    2aee:	2301      	movs	r3, #1
    2af0:	321a      	adds	r2, #26
    2af2:	9901      	ldr	r1, [sp, #4]
    2af4:	9800      	ldr	r0, [sp, #0]
    2af6:	9e08      	ldr	r6, [sp, #32]
    2af8:	47b0      	blx	r6
    2afa:	1c43      	adds	r3, r0, #1
    2afc:	d0e6      	beq.n	2acc <_printf_common+0xa4>
    2afe:	3701      	adds	r7, #1
    2b00:	e7d1      	b.n	2aa6 <_printf_common+0x7e>
	...

00002b04 <_printf_i>:
    2b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b06:	b08b      	sub	sp, #44	; 0x2c
    2b08:	9206      	str	r2, [sp, #24]
    2b0a:	000a      	movs	r2, r1
    2b0c:	3243      	adds	r2, #67	; 0x43
    2b0e:	9307      	str	r3, [sp, #28]
    2b10:	9005      	str	r0, [sp, #20]
    2b12:	9204      	str	r2, [sp, #16]
    2b14:	7e0a      	ldrb	r2, [r1, #24]
    2b16:	000c      	movs	r4, r1
    2b18:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2b1a:	2a6e      	cmp	r2, #110	; 0x6e
    2b1c:	d100      	bne.n	2b20 <_printf_i+0x1c>
    2b1e:	e08f      	b.n	2c40 <_printf_i+0x13c>
    2b20:	d817      	bhi.n	2b52 <_printf_i+0x4e>
    2b22:	2a63      	cmp	r2, #99	; 0x63
    2b24:	d02c      	beq.n	2b80 <_printf_i+0x7c>
    2b26:	d808      	bhi.n	2b3a <_printf_i+0x36>
    2b28:	2a00      	cmp	r2, #0
    2b2a:	d100      	bne.n	2b2e <_printf_i+0x2a>
    2b2c:	e099      	b.n	2c62 <_printf_i+0x15e>
    2b2e:	2a58      	cmp	r2, #88	; 0x58
    2b30:	d054      	beq.n	2bdc <_printf_i+0xd8>
    2b32:	0026      	movs	r6, r4
    2b34:	3642      	adds	r6, #66	; 0x42
    2b36:	7032      	strb	r2, [r6, #0]
    2b38:	e029      	b.n	2b8e <_printf_i+0x8a>
    2b3a:	2a64      	cmp	r2, #100	; 0x64
    2b3c:	d001      	beq.n	2b42 <_printf_i+0x3e>
    2b3e:	2a69      	cmp	r2, #105	; 0x69
    2b40:	d1f7      	bne.n	2b32 <_printf_i+0x2e>
    2b42:	6821      	ldr	r1, [r4, #0]
    2b44:	681a      	ldr	r2, [r3, #0]
    2b46:	0608      	lsls	r0, r1, #24
    2b48:	d523      	bpl.n	2b92 <_printf_i+0x8e>
    2b4a:	1d11      	adds	r1, r2, #4
    2b4c:	6019      	str	r1, [r3, #0]
    2b4e:	6815      	ldr	r5, [r2, #0]
    2b50:	e025      	b.n	2b9e <_printf_i+0x9a>
    2b52:	2a73      	cmp	r2, #115	; 0x73
    2b54:	d100      	bne.n	2b58 <_printf_i+0x54>
    2b56:	e088      	b.n	2c6a <_printf_i+0x166>
    2b58:	d808      	bhi.n	2b6c <_printf_i+0x68>
    2b5a:	2a6f      	cmp	r2, #111	; 0x6f
    2b5c:	d029      	beq.n	2bb2 <_printf_i+0xae>
    2b5e:	2a70      	cmp	r2, #112	; 0x70
    2b60:	d1e7      	bne.n	2b32 <_printf_i+0x2e>
    2b62:	2220      	movs	r2, #32
    2b64:	6809      	ldr	r1, [r1, #0]
    2b66:	430a      	orrs	r2, r1
    2b68:	6022      	str	r2, [r4, #0]
    2b6a:	e003      	b.n	2b74 <_printf_i+0x70>
    2b6c:	2a75      	cmp	r2, #117	; 0x75
    2b6e:	d020      	beq.n	2bb2 <_printf_i+0xae>
    2b70:	2a78      	cmp	r2, #120	; 0x78
    2b72:	d1de      	bne.n	2b32 <_printf_i+0x2e>
    2b74:	0022      	movs	r2, r4
    2b76:	2178      	movs	r1, #120	; 0x78
    2b78:	3245      	adds	r2, #69	; 0x45
    2b7a:	7011      	strb	r1, [r2, #0]
    2b7c:	4a6c      	ldr	r2, [pc, #432]	; (2d30 <_printf_i+0x22c>)
    2b7e:	e030      	b.n	2be2 <_printf_i+0xde>
    2b80:	000e      	movs	r6, r1
    2b82:	681a      	ldr	r2, [r3, #0]
    2b84:	3642      	adds	r6, #66	; 0x42
    2b86:	1d11      	adds	r1, r2, #4
    2b88:	6019      	str	r1, [r3, #0]
    2b8a:	6813      	ldr	r3, [r2, #0]
    2b8c:	7033      	strb	r3, [r6, #0]
    2b8e:	2301      	movs	r3, #1
    2b90:	e079      	b.n	2c86 <_printf_i+0x182>
    2b92:	0649      	lsls	r1, r1, #25
    2b94:	d5d9      	bpl.n	2b4a <_printf_i+0x46>
    2b96:	1d11      	adds	r1, r2, #4
    2b98:	6019      	str	r1, [r3, #0]
    2b9a:	2300      	movs	r3, #0
    2b9c:	5ed5      	ldrsh	r5, [r2, r3]
    2b9e:	2d00      	cmp	r5, #0
    2ba0:	da03      	bge.n	2baa <_printf_i+0xa6>
    2ba2:	232d      	movs	r3, #45	; 0x2d
    2ba4:	9a04      	ldr	r2, [sp, #16]
    2ba6:	426d      	negs	r5, r5
    2ba8:	7013      	strb	r3, [r2, #0]
    2baa:	4b62      	ldr	r3, [pc, #392]	; (2d34 <_printf_i+0x230>)
    2bac:	270a      	movs	r7, #10
    2bae:	9303      	str	r3, [sp, #12]
    2bb0:	e02f      	b.n	2c12 <_printf_i+0x10e>
    2bb2:	6820      	ldr	r0, [r4, #0]
    2bb4:	6819      	ldr	r1, [r3, #0]
    2bb6:	0605      	lsls	r5, r0, #24
    2bb8:	d503      	bpl.n	2bc2 <_printf_i+0xbe>
    2bba:	1d08      	adds	r0, r1, #4
    2bbc:	6018      	str	r0, [r3, #0]
    2bbe:	680d      	ldr	r5, [r1, #0]
    2bc0:	e005      	b.n	2bce <_printf_i+0xca>
    2bc2:	0640      	lsls	r0, r0, #25
    2bc4:	d5f9      	bpl.n	2bba <_printf_i+0xb6>
    2bc6:	680d      	ldr	r5, [r1, #0]
    2bc8:	1d08      	adds	r0, r1, #4
    2bca:	6018      	str	r0, [r3, #0]
    2bcc:	b2ad      	uxth	r5, r5
    2bce:	4b59      	ldr	r3, [pc, #356]	; (2d34 <_printf_i+0x230>)
    2bd0:	2708      	movs	r7, #8
    2bd2:	9303      	str	r3, [sp, #12]
    2bd4:	2a6f      	cmp	r2, #111	; 0x6f
    2bd6:	d018      	beq.n	2c0a <_printf_i+0x106>
    2bd8:	270a      	movs	r7, #10
    2bda:	e016      	b.n	2c0a <_printf_i+0x106>
    2bdc:	3145      	adds	r1, #69	; 0x45
    2bde:	700a      	strb	r2, [r1, #0]
    2be0:	4a54      	ldr	r2, [pc, #336]	; (2d34 <_printf_i+0x230>)
    2be2:	9203      	str	r2, [sp, #12]
    2be4:	681a      	ldr	r2, [r3, #0]
    2be6:	6821      	ldr	r1, [r4, #0]
    2be8:	1d10      	adds	r0, r2, #4
    2bea:	6018      	str	r0, [r3, #0]
    2bec:	6815      	ldr	r5, [r2, #0]
    2bee:	0608      	lsls	r0, r1, #24
    2bf0:	d522      	bpl.n	2c38 <_printf_i+0x134>
    2bf2:	07cb      	lsls	r3, r1, #31
    2bf4:	d502      	bpl.n	2bfc <_printf_i+0xf8>
    2bf6:	2320      	movs	r3, #32
    2bf8:	4319      	orrs	r1, r3
    2bfa:	6021      	str	r1, [r4, #0]
    2bfc:	2710      	movs	r7, #16
    2bfe:	2d00      	cmp	r5, #0
    2c00:	d103      	bne.n	2c0a <_printf_i+0x106>
    2c02:	2320      	movs	r3, #32
    2c04:	6822      	ldr	r2, [r4, #0]
    2c06:	439a      	bics	r2, r3
    2c08:	6022      	str	r2, [r4, #0]
    2c0a:	0023      	movs	r3, r4
    2c0c:	2200      	movs	r2, #0
    2c0e:	3343      	adds	r3, #67	; 0x43
    2c10:	701a      	strb	r2, [r3, #0]
    2c12:	6863      	ldr	r3, [r4, #4]
    2c14:	60a3      	str	r3, [r4, #8]
    2c16:	2b00      	cmp	r3, #0
    2c18:	db5c      	blt.n	2cd4 <_printf_i+0x1d0>
    2c1a:	2204      	movs	r2, #4
    2c1c:	6821      	ldr	r1, [r4, #0]
    2c1e:	4391      	bics	r1, r2
    2c20:	6021      	str	r1, [r4, #0]
    2c22:	2d00      	cmp	r5, #0
    2c24:	d158      	bne.n	2cd8 <_printf_i+0x1d4>
    2c26:	9e04      	ldr	r6, [sp, #16]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d064      	beq.n	2cf6 <_printf_i+0x1f2>
    2c2c:	0026      	movs	r6, r4
    2c2e:	9b03      	ldr	r3, [sp, #12]
    2c30:	3642      	adds	r6, #66	; 0x42
    2c32:	781b      	ldrb	r3, [r3, #0]
    2c34:	7033      	strb	r3, [r6, #0]
    2c36:	e05e      	b.n	2cf6 <_printf_i+0x1f2>
    2c38:	0648      	lsls	r0, r1, #25
    2c3a:	d5da      	bpl.n	2bf2 <_printf_i+0xee>
    2c3c:	b2ad      	uxth	r5, r5
    2c3e:	e7d8      	b.n	2bf2 <_printf_i+0xee>
    2c40:	6809      	ldr	r1, [r1, #0]
    2c42:	681a      	ldr	r2, [r3, #0]
    2c44:	0608      	lsls	r0, r1, #24
    2c46:	d505      	bpl.n	2c54 <_printf_i+0x150>
    2c48:	1d11      	adds	r1, r2, #4
    2c4a:	6019      	str	r1, [r3, #0]
    2c4c:	6813      	ldr	r3, [r2, #0]
    2c4e:	6962      	ldr	r2, [r4, #20]
    2c50:	601a      	str	r2, [r3, #0]
    2c52:	e006      	b.n	2c62 <_printf_i+0x15e>
    2c54:	0649      	lsls	r1, r1, #25
    2c56:	d5f7      	bpl.n	2c48 <_printf_i+0x144>
    2c58:	1d11      	adds	r1, r2, #4
    2c5a:	6019      	str	r1, [r3, #0]
    2c5c:	6813      	ldr	r3, [r2, #0]
    2c5e:	8aa2      	ldrh	r2, [r4, #20]
    2c60:	801a      	strh	r2, [r3, #0]
    2c62:	2300      	movs	r3, #0
    2c64:	9e04      	ldr	r6, [sp, #16]
    2c66:	6123      	str	r3, [r4, #16]
    2c68:	e054      	b.n	2d14 <_printf_i+0x210>
    2c6a:	681a      	ldr	r2, [r3, #0]
    2c6c:	1d11      	adds	r1, r2, #4
    2c6e:	6019      	str	r1, [r3, #0]
    2c70:	6816      	ldr	r6, [r2, #0]
    2c72:	2100      	movs	r1, #0
    2c74:	6862      	ldr	r2, [r4, #4]
    2c76:	0030      	movs	r0, r6
    2c78:	f000 f93e 	bl	2ef8 <memchr>
    2c7c:	2800      	cmp	r0, #0
    2c7e:	d001      	beq.n	2c84 <_printf_i+0x180>
    2c80:	1b80      	subs	r0, r0, r6
    2c82:	6060      	str	r0, [r4, #4]
    2c84:	6863      	ldr	r3, [r4, #4]
    2c86:	6123      	str	r3, [r4, #16]
    2c88:	2300      	movs	r3, #0
    2c8a:	9a04      	ldr	r2, [sp, #16]
    2c8c:	7013      	strb	r3, [r2, #0]
    2c8e:	e041      	b.n	2d14 <_printf_i+0x210>
    2c90:	6923      	ldr	r3, [r4, #16]
    2c92:	0032      	movs	r2, r6
    2c94:	9906      	ldr	r1, [sp, #24]
    2c96:	9805      	ldr	r0, [sp, #20]
    2c98:	9d07      	ldr	r5, [sp, #28]
    2c9a:	47a8      	blx	r5
    2c9c:	1c43      	adds	r3, r0, #1
    2c9e:	d043      	beq.n	2d28 <_printf_i+0x224>
    2ca0:	6823      	ldr	r3, [r4, #0]
    2ca2:	2500      	movs	r5, #0
    2ca4:	079b      	lsls	r3, r3, #30
    2ca6:	d40f      	bmi.n	2cc8 <_printf_i+0x1c4>
    2ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2caa:	68e0      	ldr	r0, [r4, #12]
    2cac:	4298      	cmp	r0, r3
    2cae:	da3d      	bge.n	2d2c <_printf_i+0x228>
    2cb0:	0018      	movs	r0, r3
    2cb2:	e03b      	b.n	2d2c <_printf_i+0x228>
    2cb4:	0022      	movs	r2, r4
    2cb6:	2301      	movs	r3, #1
    2cb8:	3219      	adds	r2, #25
    2cba:	9906      	ldr	r1, [sp, #24]
    2cbc:	9805      	ldr	r0, [sp, #20]
    2cbe:	9e07      	ldr	r6, [sp, #28]
    2cc0:	47b0      	blx	r6
    2cc2:	1c43      	adds	r3, r0, #1
    2cc4:	d030      	beq.n	2d28 <_printf_i+0x224>
    2cc6:	3501      	adds	r5, #1
    2cc8:	68e3      	ldr	r3, [r4, #12]
    2cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2ccc:	1a9b      	subs	r3, r3, r2
    2cce:	429d      	cmp	r5, r3
    2cd0:	dbf0      	blt.n	2cb4 <_printf_i+0x1b0>
    2cd2:	e7e9      	b.n	2ca8 <_printf_i+0x1a4>
    2cd4:	2d00      	cmp	r5, #0
    2cd6:	d0a9      	beq.n	2c2c <_printf_i+0x128>
    2cd8:	9e04      	ldr	r6, [sp, #16]
    2cda:	0028      	movs	r0, r5
    2cdc:	0039      	movs	r1, r7
    2cde:	f7fe fff9 	bl	1cd4 <__aeabi_uidivmod>
    2ce2:	9b03      	ldr	r3, [sp, #12]
    2ce4:	3e01      	subs	r6, #1
    2ce6:	5c5b      	ldrb	r3, [r3, r1]
    2ce8:	0028      	movs	r0, r5
    2cea:	7033      	strb	r3, [r6, #0]
    2cec:	0039      	movs	r1, r7
    2cee:	f7fe ff6b 	bl	1bc8 <__udivsi3>
    2cf2:	1e05      	subs	r5, r0, #0
    2cf4:	d1f1      	bne.n	2cda <_printf_i+0x1d6>
    2cf6:	2f08      	cmp	r7, #8
    2cf8:	d109      	bne.n	2d0e <_printf_i+0x20a>
    2cfa:	6823      	ldr	r3, [r4, #0]
    2cfc:	07db      	lsls	r3, r3, #31
    2cfe:	d506      	bpl.n	2d0e <_printf_i+0x20a>
    2d00:	6863      	ldr	r3, [r4, #4]
    2d02:	6922      	ldr	r2, [r4, #16]
    2d04:	4293      	cmp	r3, r2
    2d06:	dc02      	bgt.n	2d0e <_printf_i+0x20a>
    2d08:	2330      	movs	r3, #48	; 0x30
    2d0a:	3e01      	subs	r6, #1
    2d0c:	7033      	strb	r3, [r6, #0]
    2d0e:	9b04      	ldr	r3, [sp, #16]
    2d10:	1b9b      	subs	r3, r3, r6
    2d12:	6123      	str	r3, [r4, #16]
    2d14:	9b07      	ldr	r3, [sp, #28]
    2d16:	aa09      	add	r2, sp, #36	; 0x24
    2d18:	9300      	str	r3, [sp, #0]
    2d1a:	0021      	movs	r1, r4
    2d1c:	9b06      	ldr	r3, [sp, #24]
    2d1e:	9805      	ldr	r0, [sp, #20]
    2d20:	f7ff fe82 	bl	2a28 <_printf_common>
    2d24:	1c43      	adds	r3, r0, #1
    2d26:	d1b3      	bne.n	2c90 <_printf_i+0x18c>
    2d28:	2001      	movs	r0, #1
    2d2a:	4240      	negs	r0, r0
    2d2c:	b00b      	add	sp, #44	; 0x2c
    2d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d30:	00003286 	.word	0x00003286
    2d34:	00003275 	.word	0x00003275

00002d38 <_putc_r>:
    2d38:	b570      	push	{r4, r5, r6, lr}
    2d3a:	0006      	movs	r6, r0
    2d3c:	000d      	movs	r5, r1
    2d3e:	0014      	movs	r4, r2
    2d40:	2800      	cmp	r0, #0
    2d42:	d004      	beq.n	2d4e <_putc_r+0x16>
    2d44:	6983      	ldr	r3, [r0, #24]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d101      	bne.n	2d4e <_putc_r+0x16>
    2d4a:	f7ff fbff 	bl	254c <__sinit>
    2d4e:	4b12      	ldr	r3, [pc, #72]	; (2d98 <_putc_r+0x60>)
    2d50:	429c      	cmp	r4, r3
    2d52:	d111      	bne.n	2d78 <_putc_r+0x40>
    2d54:	6874      	ldr	r4, [r6, #4]
    2d56:	68a3      	ldr	r3, [r4, #8]
    2d58:	3b01      	subs	r3, #1
    2d5a:	60a3      	str	r3, [r4, #8]
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	da05      	bge.n	2d6c <_putc_r+0x34>
    2d60:	69a2      	ldr	r2, [r4, #24]
    2d62:	4293      	cmp	r3, r2
    2d64:	db12      	blt.n	2d8c <_putc_r+0x54>
    2d66:	b2eb      	uxtb	r3, r5
    2d68:	2b0a      	cmp	r3, #10
    2d6a:	d00f      	beq.n	2d8c <_putc_r+0x54>
    2d6c:	6823      	ldr	r3, [r4, #0]
    2d6e:	b2e8      	uxtb	r0, r5
    2d70:	1c5a      	adds	r2, r3, #1
    2d72:	6022      	str	r2, [r4, #0]
    2d74:	701d      	strb	r5, [r3, #0]
    2d76:	bd70      	pop	{r4, r5, r6, pc}
    2d78:	4b08      	ldr	r3, [pc, #32]	; (2d9c <_putc_r+0x64>)
    2d7a:	429c      	cmp	r4, r3
    2d7c:	d101      	bne.n	2d82 <_putc_r+0x4a>
    2d7e:	68b4      	ldr	r4, [r6, #8]
    2d80:	e7e9      	b.n	2d56 <_putc_r+0x1e>
    2d82:	4b07      	ldr	r3, [pc, #28]	; (2da0 <_putc_r+0x68>)
    2d84:	429c      	cmp	r4, r3
    2d86:	d1e6      	bne.n	2d56 <_putc_r+0x1e>
    2d88:	68f4      	ldr	r4, [r6, #12]
    2d8a:	e7e4      	b.n	2d56 <_putc_r+0x1e>
    2d8c:	0022      	movs	r2, r4
    2d8e:	0029      	movs	r1, r5
    2d90:	0030      	movs	r0, r6
    2d92:	f7ff fa17 	bl	21c4 <__swbuf_r>
    2d96:	e7ee      	b.n	2d76 <_putc_r+0x3e>
    2d98:	00003224 	.word	0x00003224
    2d9c:	00003244 	.word	0x00003244
    2da0:	00003204 	.word	0x00003204

00002da4 <__sread>:
    2da4:	b570      	push	{r4, r5, r6, lr}
    2da6:	000c      	movs	r4, r1
    2da8:	250e      	movs	r5, #14
    2daa:	5f49      	ldrsh	r1, [r1, r5]
    2dac:	f000 f8c0 	bl	2f30 <_read_r>
    2db0:	2800      	cmp	r0, #0
    2db2:	db03      	blt.n	2dbc <__sread+0x18>
    2db4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2db6:	181b      	adds	r3, r3, r0
    2db8:	6563      	str	r3, [r4, #84]	; 0x54
    2dba:	bd70      	pop	{r4, r5, r6, pc}
    2dbc:	89a3      	ldrh	r3, [r4, #12]
    2dbe:	4a02      	ldr	r2, [pc, #8]	; (2dc8 <__sread+0x24>)
    2dc0:	4013      	ands	r3, r2
    2dc2:	81a3      	strh	r3, [r4, #12]
    2dc4:	e7f9      	b.n	2dba <__sread+0x16>
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	ffffefff 	.word	0xffffefff

00002dcc <__swrite>:
    2dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dce:	001f      	movs	r7, r3
    2dd0:	898b      	ldrh	r3, [r1, #12]
    2dd2:	0005      	movs	r5, r0
    2dd4:	000c      	movs	r4, r1
    2dd6:	0016      	movs	r6, r2
    2dd8:	05db      	lsls	r3, r3, #23
    2dda:	d505      	bpl.n	2de8 <__swrite+0x1c>
    2ddc:	230e      	movs	r3, #14
    2dde:	5ec9      	ldrsh	r1, [r1, r3]
    2de0:	2200      	movs	r2, #0
    2de2:	2302      	movs	r3, #2
    2de4:	f000 f874 	bl	2ed0 <_lseek_r>
    2de8:	89a3      	ldrh	r3, [r4, #12]
    2dea:	4a05      	ldr	r2, [pc, #20]	; (2e00 <__swrite+0x34>)
    2dec:	0028      	movs	r0, r5
    2dee:	4013      	ands	r3, r2
    2df0:	81a3      	strh	r3, [r4, #12]
    2df2:	0032      	movs	r2, r6
    2df4:	230e      	movs	r3, #14
    2df6:	5ee1      	ldrsh	r1, [r4, r3]
    2df8:	003b      	movs	r3, r7
    2dfa:	f000 f81f 	bl	2e3c <_write_r>
    2dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e00:	ffffefff 	.word	0xffffefff

00002e04 <__sseek>:
    2e04:	b570      	push	{r4, r5, r6, lr}
    2e06:	000c      	movs	r4, r1
    2e08:	250e      	movs	r5, #14
    2e0a:	5f49      	ldrsh	r1, [r1, r5]
    2e0c:	f000 f860 	bl	2ed0 <_lseek_r>
    2e10:	89a3      	ldrh	r3, [r4, #12]
    2e12:	1c42      	adds	r2, r0, #1
    2e14:	d103      	bne.n	2e1e <__sseek+0x1a>
    2e16:	4a05      	ldr	r2, [pc, #20]	; (2e2c <__sseek+0x28>)
    2e18:	4013      	ands	r3, r2
    2e1a:	81a3      	strh	r3, [r4, #12]
    2e1c:	bd70      	pop	{r4, r5, r6, pc}
    2e1e:	2280      	movs	r2, #128	; 0x80
    2e20:	0152      	lsls	r2, r2, #5
    2e22:	4313      	orrs	r3, r2
    2e24:	81a3      	strh	r3, [r4, #12]
    2e26:	6560      	str	r0, [r4, #84]	; 0x54
    2e28:	e7f8      	b.n	2e1c <__sseek+0x18>
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	ffffefff 	.word	0xffffefff

00002e30 <__sclose>:
    2e30:	b510      	push	{r4, lr}
    2e32:	230e      	movs	r3, #14
    2e34:	5ec9      	ldrsh	r1, [r1, r3]
    2e36:	f000 f815 	bl	2e64 <_close_r>
    2e3a:	bd10      	pop	{r4, pc}

00002e3c <_write_r>:
    2e3c:	b570      	push	{r4, r5, r6, lr}
    2e3e:	0005      	movs	r5, r0
    2e40:	0008      	movs	r0, r1
    2e42:	0011      	movs	r1, r2
    2e44:	2200      	movs	r2, #0
    2e46:	4c06      	ldr	r4, [pc, #24]	; (2e60 <_write_r+0x24>)
    2e48:	6022      	str	r2, [r4, #0]
    2e4a:	001a      	movs	r2, r3
    2e4c:	f7fe fe5e 	bl	1b0c <_write>
    2e50:	1c43      	adds	r3, r0, #1
    2e52:	d103      	bne.n	2e5c <_write_r+0x20>
    2e54:	6823      	ldr	r3, [r4, #0]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d000      	beq.n	2e5c <_write_r+0x20>
    2e5a:	602b      	str	r3, [r5, #0]
    2e5c:	bd70      	pop	{r4, r5, r6, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	200000d8 	.word	0x200000d8

00002e64 <_close_r>:
    2e64:	2300      	movs	r3, #0
    2e66:	b570      	push	{r4, r5, r6, lr}
    2e68:	4c06      	ldr	r4, [pc, #24]	; (2e84 <_close_r+0x20>)
    2e6a:	0005      	movs	r5, r0
    2e6c:	0008      	movs	r0, r1
    2e6e:	6023      	str	r3, [r4, #0]
    2e70:	f7fd fcd6 	bl	820 <_close>
    2e74:	1c43      	adds	r3, r0, #1
    2e76:	d103      	bne.n	2e80 <_close_r+0x1c>
    2e78:	6823      	ldr	r3, [r4, #0]
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d000      	beq.n	2e80 <_close_r+0x1c>
    2e7e:	602b      	str	r3, [r5, #0]
    2e80:	bd70      	pop	{r4, r5, r6, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	200000d8 	.word	0x200000d8

00002e88 <_fstat_r>:
    2e88:	2300      	movs	r3, #0
    2e8a:	b570      	push	{r4, r5, r6, lr}
    2e8c:	4c06      	ldr	r4, [pc, #24]	; (2ea8 <_fstat_r+0x20>)
    2e8e:	0005      	movs	r5, r0
    2e90:	0008      	movs	r0, r1
    2e92:	0011      	movs	r1, r2
    2e94:	6023      	str	r3, [r4, #0]
    2e96:	f7fd fcc6 	bl	826 <_fstat>
    2e9a:	1c43      	adds	r3, r0, #1
    2e9c:	d103      	bne.n	2ea6 <_fstat_r+0x1e>
    2e9e:	6823      	ldr	r3, [r4, #0]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d000      	beq.n	2ea6 <_fstat_r+0x1e>
    2ea4:	602b      	str	r3, [r5, #0]
    2ea6:	bd70      	pop	{r4, r5, r6, pc}
    2ea8:	200000d8 	.word	0x200000d8

00002eac <_isatty_r>:
    2eac:	2300      	movs	r3, #0
    2eae:	b570      	push	{r4, r5, r6, lr}
    2eb0:	4c06      	ldr	r4, [pc, #24]	; (2ecc <_isatty_r+0x20>)
    2eb2:	0005      	movs	r5, r0
    2eb4:	0008      	movs	r0, r1
    2eb6:	6023      	str	r3, [r4, #0]
    2eb8:	f7fd fcba 	bl	830 <_isatty>
    2ebc:	1c43      	adds	r3, r0, #1
    2ebe:	d103      	bne.n	2ec8 <_isatty_r+0x1c>
    2ec0:	6823      	ldr	r3, [r4, #0]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d000      	beq.n	2ec8 <_isatty_r+0x1c>
    2ec6:	602b      	str	r3, [r5, #0]
    2ec8:	bd70      	pop	{r4, r5, r6, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	200000d8 	.word	0x200000d8

00002ed0 <_lseek_r>:
    2ed0:	b570      	push	{r4, r5, r6, lr}
    2ed2:	0005      	movs	r5, r0
    2ed4:	0008      	movs	r0, r1
    2ed6:	0011      	movs	r1, r2
    2ed8:	2200      	movs	r2, #0
    2eda:	4c06      	ldr	r4, [pc, #24]	; (2ef4 <_lseek_r+0x24>)
    2edc:	6022      	str	r2, [r4, #0]
    2ede:	001a      	movs	r2, r3
    2ee0:	f7fd fca8 	bl	834 <_lseek>
    2ee4:	1c43      	adds	r3, r0, #1
    2ee6:	d103      	bne.n	2ef0 <_lseek_r+0x20>
    2ee8:	6823      	ldr	r3, [r4, #0]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d000      	beq.n	2ef0 <_lseek_r+0x20>
    2eee:	602b      	str	r3, [r5, #0]
    2ef0:	bd70      	pop	{r4, r5, r6, pc}
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	200000d8 	.word	0x200000d8

00002ef8 <memchr>:
    2ef8:	b2c9      	uxtb	r1, r1
    2efa:	1882      	adds	r2, r0, r2
    2efc:	4290      	cmp	r0, r2
    2efe:	d101      	bne.n	2f04 <memchr+0xc>
    2f00:	2000      	movs	r0, #0
    2f02:	4770      	bx	lr
    2f04:	7803      	ldrb	r3, [r0, #0]
    2f06:	428b      	cmp	r3, r1
    2f08:	d0fb      	beq.n	2f02 <memchr+0xa>
    2f0a:	3001      	adds	r0, #1
    2f0c:	e7f6      	b.n	2efc <memchr+0x4>

00002f0e <memcpy>:
    2f0e:	2300      	movs	r3, #0
    2f10:	b510      	push	{r4, lr}
    2f12:	429a      	cmp	r2, r3
    2f14:	d100      	bne.n	2f18 <memcpy+0xa>
    2f16:	bd10      	pop	{r4, pc}
    2f18:	5ccc      	ldrb	r4, [r1, r3]
    2f1a:	54c4      	strb	r4, [r0, r3]
    2f1c:	3301      	adds	r3, #1
    2f1e:	e7f8      	b.n	2f12 <memcpy+0x4>

00002f20 <_malloc_usable_size_r>:
    2f20:	1f0b      	subs	r3, r1, #4
    2f22:	681b      	ldr	r3, [r3, #0]
    2f24:	1f18      	subs	r0, r3, #4
    2f26:	2b00      	cmp	r3, #0
    2f28:	da01      	bge.n	2f2e <_malloc_usable_size_r+0xe>
    2f2a:	580b      	ldr	r3, [r1, r0]
    2f2c:	18c0      	adds	r0, r0, r3
    2f2e:	4770      	bx	lr

00002f30 <_read_r>:
    2f30:	b570      	push	{r4, r5, r6, lr}
    2f32:	0005      	movs	r5, r0
    2f34:	0008      	movs	r0, r1
    2f36:	0011      	movs	r1, r2
    2f38:	2200      	movs	r2, #0
    2f3a:	4c06      	ldr	r4, [pc, #24]	; (2f54 <_read_r+0x24>)
    2f3c:	6022      	str	r2, [r4, #0]
    2f3e:	001a      	movs	r2, r3
    2f40:	f7fe fdd0 	bl	1ae4 <_read>
    2f44:	1c43      	adds	r3, r0, #1
    2f46:	d103      	bne.n	2f50 <_read_r+0x20>
    2f48:	6823      	ldr	r3, [r4, #0]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d000      	beq.n	2f50 <_read_r+0x20>
    2f4e:	602b      	str	r3, [r5, #0]
    2f50:	bd70      	pop	{r4, r5, r6, pc}
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	200000d8 	.word	0x200000d8
    2f58:	682f2e2e 	.word	0x682f2e2e
    2f5c:	732f6c61 	.word	0x732f6c61
    2f60:	682f6372 	.word	0x682f6372
    2f64:	695f6c61 	.word	0x695f6c61
    2f68:	6d5f6332 	.word	0x6d5f6332
    2f6c:	6e79735f 	.word	0x6e79735f
    2f70:	00632e63 	.word	0x00632e63
    2f74:	682f2e2e 	.word	0x682f2e2e
    2f78:	732f6c61 	.word	0x732f6c61
    2f7c:	682f6372 	.word	0x682f6372
    2f80:	695f6c61 	.word	0x695f6c61
    2f84:	00632e6f 	.word	0x00632e6f
    2f88:	682f2e2e 	.word	0x682f2e2e
    2f8c:	732f6c61 	.word	0x732f6c61
    2f90:	682f6372 	.word	0x682f6372
    2f94:	755f6c61 	.word	0x755f6c61
    2f98:	74726173 	.word	0x74726173
    2f9c:	6e79735f 	.word	0x6e79735f
    2fa0:	00632e63 	.word	0x00632e63

00002fa4 <_map>:
    2fa4:	0000000f 0000000f 682f2e2e 652f6c70     ........../hpl/e
    2fb4:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00002fc4 <_i2cms>:
    2fc4:	00000000 00200014 00000100 000000ff     ...... .........
    2fd4:	00d70000 000f4240 682f2e2e 732f6c70     ....@B..../hpl/s
    2fe4:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2ff4:	0000632e 00206425 73656854 72612065     .c..%d .These ar
    3004:	68742065 6f632065 6e6f6d6d 73656720     e the common ges
    3014:	65727574 00000073 25206425 00000a64     tures...%d %d...
    3024:	65726964 6f697463 6863206e 65676e61     direction change
    3034:	206e6920 00000078 65726964 6f697463      in x...directio
    3044:	6863206e 65676e61 206e6920 00000079     n change in y...
    3054:	65726964 6f697463 6863206e 65676e61     direction change
    3064:	206e6920 0000007a 25203a58 20202064      in z...X: %d   
    3074:	20202020 203a5920 20206425 20202020          Y: %d      
    3084:	3a5a2020 0a642520 00000000 74747542       Z: %d.....Butt
    3094:	70206e6f 73736572 00006465 6365520a     on pressed...Rec
    30a4:	6964726f 4620676e 6c616e69 73654720     ording Final Ges
    30b4:	65727574 00000000 6552200a 6e727574     ture..... Return
    30c4:	65687720 72656874 65687420 73656720      whether the ges
    30d4:	65727574 73617720 75727420 29312865     ture was true(1)
    30e4:	6425202d 0000000a 63637553 66737365     - %d....Successf
    30f4:	796c6c75 616c6320 66697373 00646569     ully classified.
    3104:	74736547 20657275 20746f6e 6f636572     Gesture not reco
    3114:	7a696e67 00006465 6365520a 6964726f     gnized...Recordi
    3124:	4720676e 75747365 32206572 00000000     ng Gesture 2....
    3134:	6365520a 6964726f 4720676e 75747365     .Recording Gestu
    3144:	31206572 00000000 20433249 62616e45     re 1....I2C Enab
    3154:	2064656c 6425202d 0000000a 6b73614d     led - %d....Mask
    3164:	53206465 6576616c 64644120 73736572     ed Slave Address
    3174:	25202d20 00000a64 64616572 74616420      - %d...read dat
    3184:	203a2061 7825203a 0000000a 64616552     a : : %x....Read
    3194:	66754220 20726566 7825203a 0000000a      Buffer : %x....
    31a4:	6165720a 63615f64 203a206b 000a6425     .read_ack : %d..
    31b4:	64616572 66667562 3a207265 0a782520     readbuffer : %x.
    31c4:	00000000 74697277 203a2065 000a6425     ....write : %d..
    31d4:	6165720a 63615f64 3a20316b 0a642520     .read_ack1 : %d.
    31e4:	00000000 64616572 66667562 20317265     ....readbuffer1 
    31f4:	7825203a 20202020 000a2020              : %x      ..

00003200 <_global_impure_ptr>:
    3200:	20000008                                ... 

00003204 <__sf_fake_stderr>:
	...

00003224 <__sf_fake_stdin>:
	...

00003244 <__sf_fake_stdout>:
	...
    3264:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3274:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3284:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3294:	00006665                                ef..

00003298 <_init>:
    3298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    329a:	46c0      	nop			; (mov r8, r8)
    329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    329e:	bc08      	pop	{r3}
    32a0:	469e      	mov	lr, r3
    32a2:	4770      	bx	lr

000032a4 <__init_array_start>:
    32a4:	000000dd 	.word	0x000000dd

000032a8 <_fini>:
    32a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    32ae:	bc08      	pop	{r3}
    32b0:	469e      	mov	lr, r3
    32b2:	4770      	bx	lr

000032b4 <__fini_array_start>:
    32b4:	000000b5 	.word	0x000000b5
